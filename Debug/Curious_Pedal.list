
Curious_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d70  08005d70  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d78  08005d78  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003900  2000007c  08005e04  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000397c  08005e04  0002397c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6ae  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002edf  00000000  00000000  0003a75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  0003d640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  0003e450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000274dd  00000000  00000000  0003f168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf29  00000000  00000000  00066645  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbdb7  00000000  00000000  0007356e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f325  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  0014f3a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005774 	.word	0x08005774

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08005774 	.word	0x08005774

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <_ZNSt7__cxx119to_stringEi+0x24>)
 80005d2:	2210      	movs	r2, #16
 80005d4:	4904      	ldr	r1, [pc, #16]	; (80005e8 <_ZNSt7__cxx119to_stringEi+0x28>)
 80005d6:	f000 faea 	bl	8000bae <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	0800578c 	.word	0x0800578c
 80005e8:	08005145 	.word	0x08005145

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b092      	sub	sp, #72	; 0x48
 80005f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fe41 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8b9 	bl	800076c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fa3f 	bl	8000a7c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80005fe:	f000 fa1d 	bl	8000a3c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000602:	f000 f9ed 	bl	80009e0 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000606:	f000 f9b7 	bl	8000978 <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 800060a:	f000 f925 	bl	8000858 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 800060e:	f000 f97f 	bl	8000910 <_ZL11MX_DAC_Initv>
  /* USER CODE BEGIN 2 */

  /*-----------------ADC AND DAC START------------------------*/
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, ADC_BUF_LEN);
 8000612:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <main+0x15c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061a:	4619      	mov	r1, r3
 800061c:	484b      	ldr	r0, [pc, #300]	; (800074c <main+0x160>)
 800061e:	f000 ff03 	bl	8001428 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000622:	2100      	movs	r1, #0
 8000624:	484a      	ldr	r0, [pc, #296]	; (8000750 <main+0x164>)
 8000626:	f001 fbe8 	bl	8001dfa <HAL_DAC_Start>
  /*-----------------SECTION_END------------------------------*/

  if(HAL_I2C_IsDeviceReady(&hi2c1, OLED1.getCAddress(), 1, 10)== HAL_OK){
 800062a:	484a      	ldr	r0, [pc, #296]	; (8000754 <main+0x168>)
 800062c:	f004 f97c 	bl	8004928 <_ZN4OLED11getCAddressEv>
 8000630:	4603      	mov	r3, r0
 8000632:	b299      	uxth	r1, r3
 8000634:	230a      	movs	r3, #10
 8000636:	2201      	movs	r2, #1
 8000638:	4847      	ldr	r0, [pc, #284]	; (8000758 <main+0x16c>)
 800063a:	f002 fc1f 	bl	8002e7c <HAL_I2C_IsDeviceReady>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d004      	beq.n	8000658 <main+0x6c>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2120      	movs	r1, #32
 8000652:	4842      	ldr	r0, [pc, #264]	; (800075c <main+0x170>)
 8000654:	f002 f9c2 	bl	80029dc <HAL_GPIO_WritePin>
  }

  OLED1.init(&hi2c1);
 8000658:	493f      	ldr	r1, [pc, #252]	; (8000758 <main+0x16c>)
 800065a:	483e      	ldr	r0, [pc, #248]	; (8000754 <main+0x168>)
 800065c:	f004 f85f 	bl	800471e <_ZN4OLED4initEP19__I2C_HandleTypeDef>

  HAL_Delay(2000);
 8000660:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000664:	f000 fe7a 	bl	800135c <HAL_Delay>
  OLED1.fill(0);
 8000668:	2100      	movs	r1, #0
 800066a:	483a      	ldr	r0, [pc, #232]	; (8000754 <main+0x168>)
 800066c:	f004 f9a3 	bl	80049b6 <_ZN4OLED4fillEb>
  OLED1.text(0,20, "Clean Trial", 1, 0, 2);
 8000670:	f107 0318 	add.w	r3, r7, #24
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fb1f 	bl	8004cb8 <_ZNSaIcEC1Ev>
 800067a:	f107 0218 	add.w	r2, r7, #24
 800067e:	463b      	mov	r3, r7
 8000680:	4937      	ldr	r1, [pc, #220]	; (8000760 <main+0x174>)
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fb98 	bl	8004db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000688:	463a      	mov	r2, r7
 800068a:	2302      	movs	r3, #2
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4613      	mov	r3, r2
 8000698:	2214      	movs	r2, #20
 800069a:	2100      	movs	r1, #0
 800069c:	482d      	ldr	r0, [pc, #180]	; (8000754 <main+0x168>)
 800069e:	f004 fac9 	bl	8004c34 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 80006a2:	463b      	mov	r3, r7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fb56 	bl	8004d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fb03 	bl	8004cba <_ZNSaIcED1Ev>
  OLED1.drawFullscreen();
 80006b4:	4827      	ldr	r0, [pc, #156]	; (8000754 <main+0x168>)
 80006b6:	f004 f8e9 	bl	800488c <_ZN4OLED14drawFullscreenEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	4829      	ldr	r0, [pc, #164]	; (8000764 <main+0x178>)
 80006c0:	f002 f974 	bl	80029ac <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf0c      	ite	eq
 80006ca:	2301      	moveq	r3, #1
 80006cc:	2300      	movne	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <main+0x130>

	OLED1.fill(0);
 80006d4:	2100      	movs	r1, #0
 80006d6:	481f      	ldr	r0, [pc, #124]	; (8000754 <main+0x168>)
 80006d8:	f004 f96d 	bl	80049b6 <_ZN4OLED4fillEb>
	OLED1.text(0,20, to_string(adc_buf1[0]), 1, 0, 2);
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <main+0x15c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff68 	bl	80005c0 <_ZNSt7__cxx119to_stringEi>
 80006f0:	f107 021c 	add.w	r2, r7, #28
 80006f4:	2302      	movs	r3, #2
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2300      	movs	r3, #0
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4613      	mov	r3, r2
 8000702:	2214      	movs	r2, #20
 8000704:	2100      	movs	r1, #0
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <main+0x168>)
 8000708:	f004 fa94 	bl	8004c34 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f004 fb20 	bl	8004d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	OLED1.drawFullscreen();
 8000716:	480f      	ldr	r0, [pc, #60]	; (8000754 <main+0x168>)
 8000718:	f004 f8b8 	bl	800488c <_ZN4OLED14drawFullscreenEv>
}

for (int i=0; i<ADC_BUF_LEN; i++){
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
 8000720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000726:	dac8      	bge.n	80006ba <main+0xce>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adc_buf2[i]);
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <main+0x17c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <main+0x164>)
 800073a:	f001 fc11 	bl	8001f60 <HAL_DAC_SetValue>
for (int i=0; i<ADC_BUF_LEN; i++){
 800073e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000740:	3301      	adds	r3, #1
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
 8000744:	e7ec      	b.n	8000720 <main+0x134>
 8000746:	bf00      	nop
 8000748:	20000000 	.word	0x20000000
 800074c:	20000098 	.word	0x20000098
 8000750:	20000140 	.word	0x20000140
 8000754:	20001958 	.word	0x20001958
 8000758:	20000154 	.word	0x20000154
 800075c:	40020000 	.word	0x40020000
 8000760:	08005790 	.word	0x08005790
 8000764:	40020800 	.word	0x40020800
 8000768:	20000004 	.word	0x20000004

0800076c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f004 fbb2 	bl	8004ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <_Z18SystemClock_Configv+0xe4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a2d      	ldr	r2, [pc, #180]	; (8000850 <_Z18SystemClock_Configv+0xe4>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <_Z18SystemClock_Configv+0xe4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <_Z18SystemClock_Configv+0xe8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <_Z18SystemClock_Configv+0xe8>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <_Z18SystemClock_Configv+0xe8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007e4:	2354      	movs	r3, #84	; 0x54
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f931 	bl	8003a60 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800080e:	f000 f9c7 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fe5c 	bl	80034ec <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8000844:	f000 f9ac 	bl	8000ba0 <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3750      	adds	r7, #80	; 0x50
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <_ZL12MX_ADC1_Initv+0xb0>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 8000872:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000876:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 8000886:	2201      	movs	r2, #1
 8000888:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <_ZL12MX_ADC1_Initv+0xb4>)
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b8:	4812      	ldr	r0, [pc, #72]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 80008ba:	f000 fd71 	bl	80013a0 <HAL_ADC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80008ce:	f000 f967 	bl	8000ba0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4808      	ldr	r0, [pc, #32]	; (8000904 <_ZL12MX_ADC1_Initv+0xac>)
 80008e4:	f000 fea6 	bl	8001634 <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 80008f8:	f000 f952 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000098 	.word	0x20000098
 8000908:	40012000 	.word	0x40012000
 800090c:	0f000001 	.word	0x0f000001

08000910 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <_ZL11MX_DAC_Initv+0x60>)
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_ZL11MX_DAC_Initv+0x64>)
 8000922:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <_ZL11MX_DAC_Initv+0x60>)
 8000926:	f001 fa46 	bl	8001db6 <HAL_DAC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 800093a:	f000 f931 	bl	8000ba0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <_ZL11MX_DAC_Initv+0x60>)
 800094e:	f001 faba 	bl	8001ec6 <HAL_DAC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	bf14      	ite	ne
 8000958:	2301      	movne	r3, #1
 800095a:	2300      	moveq	r3, #0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 8000962:	f000 f91d 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000140 	.word	0x20000140
 8000974:	40007400 	.word	0x40007400

08000978 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <_ZL12MX_I2C1_Initv+0x60>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000984:	4a15      	ldr	r2, [pc, #84]	; (80009dc <_ZL12MX_I2C1_Initv+0x64>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80009b6:	f002 f82b 	bl	8002a10 <HAL_I2C_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80009ca:	f000 f8e9 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000154 	.word	0x20000154
 80009d8:	40005400 	.word	0x40005400
 80009dc:	00061a80 	.word	0x00061a80

080009e0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_ZL19MX_USART2_UART_Initv+0x58>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a18:	f003 fa7c 	bl	8003f14 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000a2c:	f000 f8b8 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001a8 	.word	0x200001a8
 8000a38:	40004400 	.word	0x40004400

08000a3c <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <_ZL11MX_DMA_Initv+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <_ZL11MX_DMA_Initv+0x3c>)
 8000a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <_ZL11MX_DMA_Initv+0x3c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2038      	movs	r0, #56	; 0x38
 8000a64:	f001 f971 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a68:	2038      	movs	r0, #56	; 0x38
 8000a6a:	f001 f98a 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2c      	ldr	r2, [pc, #176]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_ZL12MX_GPIO_Initv+0xd0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	4812      	ldr	r0, [pc, #72]	; (8000b50 <_ZL12MX_GPIO_Initv+0xd4>)
 8000b08:	f001 ff68 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_ZL12MX_GPIO_Initv+0xd8>)
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <_ZL12MX_GPIO_Initv+0xdc>)
 8000b22:	f001 fdb1 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b26:	2320      	movs	r3, #32
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <_ZL12MX_GPIO_Initv+0xd4>)
 8000b3e:	f001 fda3 	bl	8002688 <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	10210000 	.word	0x10210000
 8000b58:	40020800 	.word	0x40020800

08000b5c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
void splash_screen_OLED(OLED Oled){

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]


	*swapper = *adc_buf1;
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_ADC_ConvCpltCallback+0x38>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	8812      	ldrh	r2, [r2, #0]
 8000b6e:	801a      	strh	r2, [r3, #0]
	*adc_buf1 = *adc_buf2;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_ADC_ConvCpltCallback+0x40>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_ADC_ConvCpltCallback+0x38>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	8812      	ldrh	r2, [r2, #0]
 8000b7a:	801a      	strh	r2, [r3, #0]
	*adc_buf2 = *swapper;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_ADC_ConvCpltCallback+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	8812      	ldrh	r2, [r2, #0]
 8000b86:	801a      	strh	r2, [r3, #0]



}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8000bae:	b408      	push	{r3}
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	3307      	adds	r3, #7
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	ebad 0d03 	sub.w	sp, sp, r3
 8000bca:	466b      	mov	r3, sp
 8000bcc:	3307      	adds	r3, #7
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8000bd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd8:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8000bda:	68bc      	ldr	r4, [r7, #8]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	69f8      	ldr	r0, [r7, #28]
 8000be4:	47a0      	blx	r4
 8000be6:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	18d4      	adds	r4, r2, r3
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 f860 	bl	8004cb8 <_ZNSaIcEC1Ev>
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4622      	mov	r2, r4
 8000bfe:	69f9      	ldr	r1, [r7, #28]
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f000 f80c 	bl	8000c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 f855 	bl	8004cba <_ZNSaIcED1Ev>
    }
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c1a:	b001      	add	sp, #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8000c1e:	b590      	push	{r4, r7, lr}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8000c2c:	68fc      	ldr	r4, [r7, #12]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f004 f852 	bl	8004cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000c34:	4603      	mov	r3, r0
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f004 f896 	bl	8004d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 f805 	bl	8000c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}

08000c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 f804 	bl	8000c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b087      	sub	sp, #28
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8000c80:	4623      	mov	r3, r4
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f000 f804 	bl	8000c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8000c8c:	bf00      	nop
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8000ca2:	68b8      	ldr	r0, [r7, #8]
 8000ca4:	f000 f83e 	bl	8000d24 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d001      	beq.n	8000cba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8000cc2:	f003 fffb 	bl	8004cbc <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	68b8      	ldr	r0, [r7, #8]
 8000cca:	f000 f845 	bl	8000d58 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d910      	bls.n	8000cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f004 f803 	bl	8004cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f003 fff0 	bl	8004cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f003 fff1 	bl	8004cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f003 ffea 	bl	8004cd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000d00:	4603      	mov	r3, r0
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f81b 	bl	8004d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f003 ffe5 	bl	8004ce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	0800579c 	.word	0x0800579c

08000d24 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf0c      	ite	eq
 8000d32:	2301      	moveq	r3, #1
 8000d34:	2300      	movne	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8000d62:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ffec 	bl	8000d44 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8000d6c:	462a      	mov	r2, r5
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	4620      	mov	r0, r4
 8000d72:	f000 f805 	bl	8000d80 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8000d76:	4603      	mov	r3, r0
    }
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bdb0      	pop	{r4, r5, r7, pc}

08000d80 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	1ad3      	subs	r3, r2, r3
    }
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_Z41__static_initialization_and_destruction_0ii>:
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d107      	bne.n	8000dc0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d102      	bne.n	8000dc0 <_Z41__static_initialization_and_destruction_0ii+0x20>
OLED OLED1;
 8000dba:	4809      	ldr	r0, [pc, #36]	; (8000de0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000dbc:	f003 fc74 	bl	80046a8 <_ZN4OLEDC1Ev>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d102      	bne.n	8000dd6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000dd2:	f003 fc83 	bl	80046dc <_ZN4OLEDD1Ev>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20001958 	.word	0x20001958

08000de4 <_GLOBAL__sub_I_hadc1>:
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff ffd7 	bl	8000da0 <_Z41__static_initialization_and_destruction_0ii>
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_GLOBAL__sub_D_hadc1>:
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ffcf 	bl	8000da0 <_Z41__static_initialization_and_destruction_0ii>
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f000 ff76 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_ADC_MspInit+0xdc>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d157      	bne.n	8000f26 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <HAL_ADC_MspInit+0xe0>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	; (8000f34 <HAL_ADC_MspInit+0xe0>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <HAL_ADC_MspInit+0xe0>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <HAL_ADC_MspInit+0xe0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <HAL_ADC_MspInit+0xe0>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <HAL_ADC_MspInit+0xe0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481d      	ldr	r0, [pc, #116]	; (8000f38 <HAL_ADC_MspInit+0xe4>)
 8000ec2:	f001 fbe1 	bl	8002688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_ADC_MspInit+0xec>)
 8000eca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000f0c:	f001 f84e 	bl	8001fac <HAL_DMA_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f16:	f7ff fe43 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_ADC_MspInit+0xe8>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40012000 	.word	0x40012000
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	200000e0 	.word	0x200000e0
 8000f40:	40026410 	.word	0x40026410

08000f44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_DAC_MspInit+0x7c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d127      	bne.n	8000fb6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_DAC_MspInit+0x80>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <HAL_DAC_MspInit+0x80>)
 8000f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_DAC_MspInit+0x80>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_DAC_MspInit+0x80>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_DAC_MspInit+0x80>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_DAC_MspInit+0x80>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_DAC_MspInit+0x84>)
 8000fb2:	f001 fb69 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40007400 	.word	0x40007400
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_I2C_MspInit+0x84>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12c      	bne.n	8001048 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800100a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001010:	2312      	movs	r3, #18
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101c:	2304      	movs	r3, #4
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <HAL_I2C_MspInit+0x8c>)
 8001028:	f001 fb2e 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_I2C_MspInit+0x88>)
 8001036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_I2C_MspInit+0x88>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40005400 	.word	0x40005400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400

0800105c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0x84>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12b      	bne.n	80010d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_UART_MspInit+0x88>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x88>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0x88>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_UART_MspInit+0x88>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_UART_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b6:	230c      	movs	r3, #12
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 80010d2:	f001 fad9 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004400 	.word	0x40004400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f8ec 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <DMA2_Stream0_IRQHandler+0x10>)
 800114e:	f001 f833 	bl	80021b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000e0 	.word	0x200000e0

0800115c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_kill>:

int _kill(int pid, int sig)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001176:	f003 fe57 	bl	8004e28 <__errno>
 800117a:	4602      	mov	r2, r0
 800117c:	2316      	movs	r3, #22
 800117e:	6013      	str	r3, [r2, #0]
	return -1;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_exit>:

void _exit (int status)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffe7 	bl	800116c <_kill>
	while (1) {}		/* Make sure we hang here */
 800119e:	e7fe      	b.n	800119e <_exit+0x12>

080011a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <_sbrk+0x50>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x16>
		heap_end = &end;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <_sbrk+0x50>)
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <_sbrk+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <_sbrk+0x50>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <_sbrk+0x50>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	466a      	mov	r2, sp
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d907      	bls.n	80011da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ca:	f003 fe2d 	bl	8004e28 <__errno>
 80011ce:	4602      	mov	r2, r0
 80011d0:	230c      	movs	r3, #12
 80011d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e006      	b.n	80011e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <_sbrk+0x50>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <_sbrk+0x50>)
 80011e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20003964 	.word	0x20003964
 80011f4:	20003980 	.word	0x20003980

080011f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <SystemInit+0x28>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <SystemInit+0x28>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SystemInit+0x28>)
 800120e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001212:	609a      	str	r2, [r3, #8]
#endif
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001228:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800122a:	e003      	b.n	8001234 <LoopCopyDataInit>

0800122c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800122e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001230:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001232:	3104      	adds	r1, #4

08001234 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001238:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800123c:	d3f6      	bcc.n	800122c <CopyDataInit>
  ldr  r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001240:	e002      	b.n	8001248 <LoopFillZerobss>

08001242 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001242:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001244:	f842 3b04 	str.w	r3, [r2], #4

08001248 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800124a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800124c:	d3f9      	bcc.n	8001242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800124e:	f7ff ffd3 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f003 fdef 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff f9c9 	bl	80005ec <main>
  bx  lr    
 800125a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001260:	08005d88 	.word	0x08005d88
  ldr  r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001268:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800126c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001270:	2000397c 	.word	0x2000397c

08001274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>
	...

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_Init+0x40>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_Init+0x40>)
 800128e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x40>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 fd47 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff fdaa 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fd5f 	bl	8001d9e <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 fd27 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000000c 	.word	0x2000000c
 8001314:	20000014 	.word	0x20000014
 8001318:	20000010 	.word	0x20000010

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000014 	.word	0x20000014
 8001340:	20003974 	.word	0x20003974

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20003974 	.word	0x20003974

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_Delay+0x40>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000014 	.word	0x20000014

080013a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e033      	b.n	800141e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fd48 	bl	8000e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d118      	bne.n	8001410 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013e6:	f023 0302 	bic.w	r3, r3, #2
 80013ea:	f043 0202 	orr.w	r2, r3, #2
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fa50 	bl	8001898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f023 0303 	bic.w	r3, r3, #3
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
 800140e:	e001      	b.n	8001414 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Start_DMA+0x1e>
 8001442:	2302      	movs	r3, #2
 8001444:	e0cc      	b.n	80015e0 <HAL_ADC_Start_DMA+0x1b8>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d018      	beq.n	800148e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800146c:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <HAL_ADC_Start_DMA+0x1c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a5e      	ldr	r2, [pc, #376]	; (80015ec <HAL_ADC_Start_DMA+0x1c4>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9a      	lsrs	r2, r3, #18
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001480:	e002      	b.n	8001488 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3b01      	subs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 80a0 	bne.w	80015de <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014dc:	d106      	bne.n	80014ec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f023 0206 	bic.w	r2, r3, #6
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
 80014ea:	e002      	b.n	80014f2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_ADC_Start_DMA+0x1c8>)
 80014fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	4a3c      	ldr	r2, [pc, #240]	; (80015f4 <HAL_ADC_Start_DMA+0x1cc>)
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <HAL_ADC_Start_DMA+0x1d0>)
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001512:	4a3a      	ldr	r2, [pc, #232]	; (80015fc <HAL_ADC_Start_DMA+0x1d4>)
 8001514:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800151e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800152e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800153e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	334c      	adds	r3, #76	; 0x4c
 800154a:	4619      	mov	r1, r3
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f000 fdda 	bl	8002108 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2b00      	cmp	r3, #0
 800155e:	d12a      	bne.n	80015b6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a26      	ldr	r2, [pc, #152]	; (8001600 <HAL_ADC_Start_DMA+0x1d8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d015      	beq.n	8001596 <HAL_ADC_Start_DMA+0x16e>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a25      	ldr	r2, [pc, #148]	; (8001604 <HAL_ADC_Start_DMA+0x1dc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d105      	bne.n	8001580 <HAL_ADC_Start_DMA+0x158>
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_ADC_Start_DMA+0x1c8>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00a      	beq.n	8001596 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a20      	ldr	r2, [pc, #128]	; (8001608 <HAL_ADC_Start_DMA+0x1e0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d129      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_ADC_Start_DMA+0x1c8>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	2b0f      	cmp	r3, #15
 8001594:	d823      	bhi.n	80015de <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d11c      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e013      	b.n	80015de <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_ADC_Start_DMA+0x1d8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10e      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015dc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	40012300 	.word	0x40012300
 80015f4:	08001a91 	.word	0x08001a91
 80015f8:	08001b4b 	.word	0x08001b4b
 80015fc:	08001b67 	.word	0x08001b67
 8001600:	40012000 	.word	0x40012000
 8001604:	40012100 	.word	0x40012100
 8001608:	40012200 	.word	0x40012200

0800160c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1c>
 800164c:	2302      	movs	r3, #2
 800164e:	e113      	b.n	8001878 <HAL_ADC_ConfigChannel+0x244>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b09      	cmp	r3, #9
 800165e:	d925      	bls.n	80016ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68d9      	ldr	r1, [r3, #12]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	3b1e      	subs	r3, #30
 8001676:	2207      	movs	r2, #7
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43da      	mvns	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	400a      	ands	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68d9      	ldr	r1, [r3, #12]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	4603      	mov	r3, r0
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4403      	add	r3, r0
 800169e:	3b1e      	subs	r3, #30
 80016a0:	409a      	lsls	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	e022      	b.n	80016f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	2207      	movs	r2, #7
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6919      	ldr	r1, [r3, #16]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4403      	add	r3, r0
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d824      	bhi.n	8001744 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b05      	subs	r3, #5
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b05      	subs	r3, #5
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
 8001742:	e04c      	b.n	80017de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b23      	subs	r3, #35	; 0x23
 800175e:	221f      	movs	r2, #31
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43da      	mvns	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	400a      	ands	r2, r1
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b23      	subs	r3, #35	; 0x23
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
 8001794:	e023      	b.n	80017de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b41      	subs	r3, #65	; 0x41
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b41      	subs	r3, #65	; 0x41
 80017d2:	fa00 f203 	lsl.w	r2, r0, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_ADC_ConfigChannel+0x250>)
 80017e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a28      	ldr	r2, [pc, #160]	; (8001888 <HAL_ADC_ConfigChannel+0x254>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d10f      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1d8>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b12      	cmp	r3, #18
 80017f2:	d10b      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_ADC_ConfigChannel+0x254>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d12b      	bne.n	800186e <HAL_ADC_ConfigChannel+0x23a>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_ADC_ConfigChannel+0x258>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d003      	beq.n	8001828 <HAL_ADC_ConfigChannel+0x1f4>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b11      	cmp	r3, #17
 8001826:	d122      	bne.n	800186e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_ADC_ConfigChannel+0x258>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d111      	bne.n	800186e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_ADC_ConfigChannel+0x25c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_ADC_ConfigChannel+0x260>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	0c9a      	lsrs	r2, r3, #18
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001860:	e002      	b.n	8001868 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3b01      	subs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40012300 	.word	0x40012300
 8001888:	40012000 	.word	0x40012000
 800188c:	10000012 	.word	0x10000012
 8001890:	2000000c 	.word	0x2000000c
 8001894:	431bde83 	.word	0x431bde83

08001898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a0:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <ADC_Init+0x1f0>)
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	021a      	lsls	r2, r3, #8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6899      	ldr	r1, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <ADC_Init+0x1f4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e00f      	b.n	8001996 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0202 	bic.w	r2, r2, #2
 80019a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6899      	ldr	r1, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7e1b      	ldrb	r3, [r3, #24]
 80019b0:	005a      	lsls	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01b      	beq.n	80019fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	035a      	lsls	r2, r3, #13
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	e007      	b.n	8001a0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	051a      	lsls	r2, r3, #20
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a4e:	025a      	lsls	r2, r3, #9
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6899      	ldr	r1, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	029a      	lsls	r2, r3, #10
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40012300 	.word	0x40012300
 8001a8c:	0f000001 	.word	0x0f000001

08001a90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d13c      	bne.n	8001b24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d12b      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d127      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d119      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0220 	bic.w	r2, r2, #32
 8001af6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff f81d 	bl	8000b5c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b22:	e00e      	b.n	8001b42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fd75 	bl	8001620 <HAL_ADC_ErrorCallback>
}
 8001b36:	e004      	b.n	8001b42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	4798      	blx	r3
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fd57 	bl	800160c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f043 0204 	orr.w	r2, r3, #4
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff fd4a 	bl	8001620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e014      	b.n	8001df2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff f8b3 	bl	8000f44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	795b      	ldrb	r3, [r3, #5]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_DAC_Start+0x1e>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e050      	b.n	8001eba <HAL_DAC_Start+0xc0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11a      	bne.n	8001e74 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e54:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d127      	bne.n	8001eac <HAL_DAC_Start+0xb2>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b38      	cmp	r3, #56	; 0x38
 8001e60:	d124      	bne.n	8001eac <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e01b      	b.n	8001eac <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001e8a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e92:	d10b      	bne.n	8001eac <HAL_DAC_Start+0xb2>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001e9a:	d107      	bne.n	8001eac <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0202 	orr.w	r2, r2, #2
 8001eaa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b087      	sub	sp, #28
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DAC_ConfigChannel+0x20>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e036      	b.n	8001f54 <HAL_DAC_ConfigChannel+0x8e>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001efa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	22c0      	movs	r2, #192	; 0xc0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	3308      	adds	r3, #8
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e004      	b.n	8001f94 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	3314      	adds	r3, #20
 8001f92:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	461a      	mov	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff f9c4 	bl	8001344 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e099      	b.n	80020fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe8:	e00f      	b.n	800200a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fea:	f7ff f9ab 	bl	8001344 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d908      	bls.n	800200a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2203      	movs	r2, #3
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e078      	b.n	80020fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e8      	bne.n	8001fea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4b38      	ldr	r3, [pc, #224]	; (8002104 <HAL_DMA_Init+0x158>)
 8002024:	4013      	ands	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	2b04      	cmp	r3, #4
 8002062:	d107      	bne.n	8002074 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4313      	orrs	r3, r2
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f023 0307 	bic.w	r3, r3, #7
 800208a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2b04      	cmp	r3, #4
 800209c:	d117      	bne.n	80020ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00e      	beq.n	80020ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fa6f 	bl	8002594 <DMA_CheckFifoParam>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ca:	2301      	movs	r3, #1
 80020cc:	e016      	b.n	80020fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fa26 	bl	8002528 <DMA_CalcBaseAndBitshift>
 80020dc:	4603      	mov	r3, r0
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	223f      	movs	r2, #63	; 0x3f
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	f010803f 	.word	0xf010803f

08002108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_DMA_Start_IT+0x26>
 800212a:	2302      	movs	r3, #2
 800212c:	e040      	b.n	80021b0 <HAL_DMA_Start_IT+0xa8>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d12f      	bne.n	80021a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f9b8 	bl	80024cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	223f      	movs	r2, #63	; 0x3f
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0216 	orr.w	r2, r2, #22
 8002176:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0208 	orr.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e005      	b.n	80021ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
 80021ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021c4:	4b92      	ldr	r3, [pc, #584]	; (8002410 <HAL_DMA_IRQHandler+0x258>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a92      	ldr	r2, [pc, #584]	; (8002414 <HAL_DMA_IRQHandler+0x25c>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2208      	movs	r2, #8
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2208      	movs	r2, #8
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2201      	movs	r2, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f043 0202 	orr.w	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2204      	movs	r2, #4
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2204      	movs	r2, #4
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	2210      	movs	r2, #16
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d043      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03c      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	2210      	movs	r2, #16
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d024      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
 80022e6:	e01f      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e016      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0208 	bic.w	r2, r2, #8
 8002316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2220      	movs	r2, #32
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 808e 	beq.w	8002456 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 8086 	beq.w	8002456 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	2220      	movs	r2, #32
 8002350:	409a      	lsls	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b05      	cmp	r3, #5
 8002360:	d136      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0216 	bic.w	r2, r2, #22
 8002370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_DMA_IRQHandler+0x1da>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0208 	bic.w	r2, r2, #8
 80023a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	223f      	movs	r2, #63	; 0x3f
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07d      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
        }
        return;
 80023ce:	e078      	b.n	80024c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01c      	beq.n	8002418 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d108      	bne.n	80023fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d030      	beq.n	8002456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e02b      	b.n	8002456 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d027      	beq.n	8002456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
 800240e:	e022      	b.n	8002456 <HAL_DMA_IRQHandler+0x29e>
 8002410:	2000000c 	.word	0x2000000c
 8002414:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0210 	bic.w	r2, r2, #16
 8002434:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	2b00      	cmp	r3, #0
 800245c:	d032      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d022      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2205      	movs	r2, #5
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3301      	adds	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	429a      	cmp	r2, r3
 800248c:	d307      	bcc.n	800249e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f2      	bne.n	8002482 <HAL_DMA_IRQHandler+0x2ca>
 800249c:	e000      	b.n	80024a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800249e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
 80024c0:	e000      	b.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80024c2:	bf00      	nop
    }
  }
}
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop

080024cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d108      	bne.n	800250c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800250a:	e007      	b.n	800251c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	3b10      	subs	r3, #16
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <DMA_CalcBaseAndBitshift+0x64>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002542:	4a13      	ldr	r2, [pc, #76]	; (8002590 <DMA_CalcBaseAndBitshift+0x68>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d909      	bls.n	800256a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	659a      	str	r2, [r3, #88]	; 0x58
 8002568:	e007      	b.n	800257a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	aaaaaaab 	.word	0xaaaaaaab
 8002590:	080057e0 	.word	0x080057e0

08002594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11f      	bne.n	80025ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d855      	bhi.n	8002660 <DMA_CheckFifoParam+0xcc>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <DMA_CheckFifoParam+0x28>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025df 	.word	0x080025df
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	08002661 	.word	0x08002661
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d045      	beq.n	8002664 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025dc:	e042      	b.n	8002664 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e6:	d13f      	bne.n	8002668 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ec:	e03c      	b.n	8002668 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f6:	d121      	bne.n	800263c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d836      	bhi.n	800266c <DMA_CheckFifoParam+0xd8>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <DMA_CheckFifoParam+0x70>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	0800261b 	.word	0x0800261b
 800260c:	08002615 	.word	0x08002615
 8002610:	0800262d 	.word	0x0800262d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      break;
 8002618:	e02f      	b.n	800267a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d024      	beq.n	8002670 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262a:	e021      	b.n	8002670 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002634:	d11e      	bne.n	8002674 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800263a:	e01b      	b.n	8002674 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d902      	bls.n	8002648 <DMA_CheckFifoParam+0xb4>
 8002642:	2b03      	cmp	r3, #3
 8002644:	d003      	beq.n	800264e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002646:	e018      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e015      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      break;
 800265e:	e00b      	b.n	8002678 <DMA_CheckFifoParam+0xe4>
      break;
 8002660:	bf00      	nop
 8002662:	e00a      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;
 8002664:	bf00      	nop
 8002666:	e008      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;
 8002668:	bf00      	nop
 800266a:	e006      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;
 800266c:	bf00      	nop
 800266e:	e004      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;
 8002670:	bf00      	nop
 8002672:	e002      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;   
 8002674:	bf00      	nop
 8002676:	e000      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;
 8002678:	bf00      	nop
    }
  } 
  
  return status; 
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	e165      	b.n	8002970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8154 	bne.w	800296a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d00b      	beq.n	80026e2 <HAL_GPIO_Init+0x5a>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b12      	cmp	r3, #18
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0xfc>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b12      	cmp	r3, #18
 8002782:	d123      	bne.n	80027cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	220f      	movs	r2, #15
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	08da      	lsrs	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3208      	adds	r2, #8
 80027c6:	69b9      	ldr	r1, [r7, #24]
 80027c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0203 	and.w	r2, r3, #3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80ae 	beq.w	800296a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <HAL_GPIO_Init+0x2fc>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <HAL_GPIO_Init+0x2fc>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_GPIO_Init+0x2fc>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282a:	4a57      	ldr	r2, [pc, #348]	; (8002988 <HAL_GPIO_Init+0x300>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4e      	ldr	r2, [pc, #312]	; (800298c <HAL_GPIO_Init+0x304>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d025      	beq.n	80028a2 <HAL_GPIO_Init+0x21a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4d      	ldr	r2, [pc, #308]	; (8002990 <HAL_GPIO_Init+0x308>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01f      	beq.n	800289e <HAL_GPIO_Init+0x216>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4c      	ldr	r2, [pc, #304]	; (8002994 <HAL_GPIO_Init+0x30c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0x212>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <HAL_GPIO_Init+0x310>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x20e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4a      	ldr	r2, [pc, #296]	; (800299c <HAL_GPIO_Init+0x314>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00d      	beq.n	8002892 <HAL_GPIO_Init+0x20a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a49      	ldr	r2, [pc, #292]	; (80029a0 <HAL_GPIO_Init+0x318>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <HAL_GPIO_Init+0x206>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a48      	ldr	r2, [pc, #288]	; (80029a4 <HAL_GPIO_Init+0x31c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_GPIO_Init+0x202>
 8002886:	2306      	movs	r3, #6
 8002888:	e00c      	b.n	80028a4 <HAL_GPIO_Init+0x21c>
 800288a:	2307      	movs	r3, #7
 800288c:	e00a      	b.n	80028a4 <HAL_GPIO_Init+0x21c>
 800288e:	2305      	movs	r3, #5
 8002890:	e008      	b.n	80028a4 <HAL_GPIO_Init+0x21c>
 8002892:	2304      	movs	r3, #4
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x21c>
 8002896:	2303      	movs	r3, #3
 8002898:	e004      	b.n	80028a4 <HAL_GPIO_Init+0x21c>
 800289a:	2302      	movs	r3, #2
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_Init+0x21c>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x21c>
 80028a2:	2300      	movs	r3, #0
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	f002 0203 	and.w	r2, r2, #3
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	4093      	lsls	r3, r2
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b4:	4934      	ldr	r1, [pc, #208]	; (8002988 <HAL_GPIO_Init+0x300>)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_GPIO_Init+0x320>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e6:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <HAL_GPIO_Init+0x320>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028ec:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_GPIO_Init+0x320>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002910:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HAL_GPIO_Init+0x320>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_GPIO_Init+0x320>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293a:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_GPIO_Init+0x320>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_GPIO_Init+0x320>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002964:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_GPIO_Init+0x320>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	f67f ae96 	bls.w	80026a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002978:	bf00      	nop
 800297a:	3724      	adds	r7, #36	; 0x24
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40023800 	.word	0x40023800
 8002988:	40013800 	.word	0x40013800
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	40021400 	.word	0x40021400
 80029a4:	40021800 	.word	0x40021800
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e001      	b.n	80029ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f8:	e003      	b.n	8002a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	619a      	str	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e11f      	b.n	8002c62 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fac8 	bl	8000fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a74:	f000 fe2c 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8002a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a7b      	ldr	r2, [pc, #492]	; (8002c6c <HAL_I2C_Init+0x25c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d807      	bhi.n	8002a94 <HAL_I2C_Init+0x84>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a7a      	ldr	r2, [pc, #488]	; (8002c70 <HAL_I2C_Init+0x260>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bf94      	ite	ls
 8002a8c:	2301      	movls	r3, #1
 8002a8e:	2300      	movhi	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e006      	b.n	8002aa2 <HAL_I2C_Init+0x92>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_I2C_Init+0x264>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	bf94      	ite	ls
 8002a9c:	2301      	movls	r3, #1
 8002a9e:	2300      	movhi	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0db      	b.n	8002c62 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a72      	ldr	r2, [pc, #456]	; (8002c78 <HAL_I2C_Init+0x268>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0c9b      	lsrs	r3, r3, #18
 8002ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a64      	ldr	r2, [pc, #400]	; (8002c6c <HAL_I2C_Init+0x25c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d802      	bhi.n	8002ae4 <HAL_I2C_Init+0xd4>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	e009      	b.n	8002af8 <HAL_I2C_Init+0xe8>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	4a63      	ldr	r2, [pc, #396]	; (8002c7c <HAL_I2C_Init+0x26c>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	3301      	adds	r3, #1
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4956      	ldr	r1, [pc, #344]	; (8002c6c <HAL_I2C_Init+0x25c>)
 8002b14:	428b      	cmp	r3, r1
 8002b16:	d80d      	bhi.n	8002b34 <HAL_I2C_Init+0x124>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e59      	subs	r1, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	bf38      	it	cc
 8002b30:	2304      	movcc	r3, #4
 8002b32:	e04f      	b.n	8002bd4 <HAL_I2C_Init+0x1c4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <HAL_I2C_Init+0x150>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e012      	b.n	8002b86 <HAL_I2C_Init+0x176>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1e58      	subs	r0, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	0099      	lsls	r1, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Init+0x17e>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e022      	b.n	8002bd4 <HAL_I2C_Init+0x1c4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10e      	bne.n	8002bb4 <HAL_I2C_Init+0x1a4>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e58      	subs	r0, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	440b      	add	r3, r1
 8002ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb2:	e00f      	b.n	8002bd4 <HAL_I2C_Init+0x1c4>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	6809      	ldr	r1, [r1, #0]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6911      	ldr	r1, [r2, #16]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	000186a0 	.word	0x000186a0
 8002c70:	001e847f 	.word	0x001e847f
 8002c74:	003d08ff 	.word	0x003d08ff
 8002c78:	431bde83 	.word	0x431bde83
 8002c7c:	10624dd3 	.word	0x10624dd3

08002c80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	817b      	strh	r3, [r7, #10]
 8002c90:	4613      	mov	r3, r2
 8002c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7fe fb56 	bl	8001344 <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	f040 80e0 	bne.w	8002e68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2319      	movs	r3, #25
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4970      	ldr	r1, [pc, #448]	; (8002e74 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fa92 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0d3      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x50>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0cc      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d007      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2221      	movs	r2, #33	; 0x21
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2210      	movs	r2, #16
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	893a      	ldrh	r2, [r7, #8]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d38:	8979      	ldrh	r1, [r7, #10]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f9ca 	bl	80030d8 <I2C_MasterRequestWrite>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e08d      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d64:	e066      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	6a39      	ldr	r1, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb0c 	bl	8003388 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d107      	bne.n	8002d8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06b      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d11b      	bne.n	8002e08 <HAL_I2C_Master_Transmit+0x188>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	6a39      	ldr	r1, [r7, #32]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fafc 	bl	800340a <I2C_WaitOnBTFFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d107      	bne.n	8002e30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e01a      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d194      	bne.n	8002d66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	00100002 	.word	0x00100002
 8002e78:	ffff0000 	.word	0xffff0000

08002e7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7fe fa5a 	bl	8001344 <HAL_GetTick>
 8002e90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002e92:	2301      	movs	r3, #1
 8002e94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	f040 8110 	bne.w	80030c4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2319      	movs	r3, #25
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4988      	ldr	r1, [pc, #544]	; (80030d0 <HAL_I2C_IsDeviceReady+0x254>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f994 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e103      	b.n	80030c6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2C_IsDeviceReady+0x50>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0fc      	b.n	80030c6 <HAL_I2C_IsDeviceReady+0x24a>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d007      	beq.n	8002ef2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2224      	movs	r2, #36	; 0x24
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a70      	ldr	r2, [pc, #448]	; (80030d4 <HAL_I2C_IsDeviceReady+0x258>)
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f952 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0b6      	b.n	80030c6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f66:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fe f9ec 	bl	8001344 <HAL_GetTick>
 8002f6c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f9c:	e025      	b.n	8002fea <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe f9d1 	bl	8001344 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <HAL_I2C_IsDeviceReady+0x138>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	22a0      	movs	r2, #160	; 0xa0
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ff4:	d005      	beq.n	8003002 <HAL_I2C_IsDeviceReady+0x186>
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_I2C_IsDeviceReady+0x186>
 8002ffc:	7dbb      	ldrb	r3, [r7, #22]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0cd      	beq.n	8002f9e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d129      	bne.n	800306c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2319      	movs	r3, #25
 8003044:	2201      	movs	r2, #1
 8003046:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f8c7 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e036      	b.n	80030c6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e02c      	b.n	80030c6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003084:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2319      	movs	r3, #25
 800308c:	2201      	movs	r2, #1
 800308e:	4910      	ldr	r1, [pc, #64]	; (80030d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f8a3 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e012      	b.n	80030c6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	3301      	adds	r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	f4ff af33 	bcc.w	8002f16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	00100002 	.word	0x00100002
 80030d4:	ffff0000 	.word	0xffff0000

080030d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	460b      	mov	r3, r1
 80030e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d006      	beq.n	8003102 <I2C_MasterRequestWrite+0x2a>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d003      	beq.n	8003102 <I2C_MasterRequestWrite+0x2a>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003100:	d108      	bne.n	8003114 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e00b      	b.n	800312c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	2b12      	cmp	r3, #18
 800311a:	d107      	bne.n	800312c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f84f 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00c      	beq.n	800315e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e035      	b.n	80031ca <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003166:	d108      	bne.n	800317a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003168:	897b      	ldrh	r3, [r7, #10]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003176:	611a      	str	r2, [r3, #16]
 8003178:	e01b      	b.n	80031b2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	11db      	asrs	r3, r3, #7
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f003 0306 	and.w	r3, r3, #6
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f063 030f 	orn	r3, r3, #15
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	490f      	ldr	r1, [pc, #60]	; (80031d4 <I2C_MasterRequestWrite+0xfc>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f876 	bl	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e010      	b.n	80031ca <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4908      	ldr	r1, [pc, #32]	; (80031d8 <I2C_MasterRequestWrite+0x100>)
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f866 	bl	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	00010008 	.word	0x00010008
 80031d8:	00010002 	.word	0x00010002

080031dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ec:	e025      	b.n	800323a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d021      	beq.n	800323a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fe f8a5 	bl	8001344 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d116      	bne.n	800323a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e023      	b.n	8003282 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	e00c      	b.n	800327a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	429a      	cmp	r2, r3
 800327e:	d0b6      	beq.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003298:	e051      	b.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d123      	bne.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e046      	b.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d021      	beq.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7fe f823 	bl	8001344 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d116      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e020      	b.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10c      	bne.n	8003362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	e00b      	b.n	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	43da      	mvns	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4013      	ands	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d18d      	bne.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003394:	e02d      	b.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f878 	bl	800348c <I2C_IsAcknowledgeFailed>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e02d      	b.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d021      	beq.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fd ffc9 	bl	8001344 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d116      	bne.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e007      	b.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d1ca      	bne.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003416:	e02d      	b.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f837 	bl	800348c <I2C_IsAcknowledgeFailed>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e02d      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d021      	beq.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003430:	f7fd ff88 	bl	8001344 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	d302      	bcc.n	8003446 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d1ca      	bne.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d11b      	bne.n	80034dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0cc      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b68      	ldr	r3, [pc, #416]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d90c      	bls.n	8003528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b8      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	494d      	ldr	r1, [pc, #308]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d044      	beq.n	800360c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d119      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e067      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4934      	ldr	r1, [pc, #208]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fd feb2 	bl	8001344 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fd feae 	bl	8001344 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e04f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20c      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e032      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4916      	ldr	r1, [pc, #88]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	490e      	ldr	r1, [pc, #56]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003672:	f000 f855 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8003676:	4601      	mov	r1, r0
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	fa21 f303 	lsr.w	r3, r1, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd fe12 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023c00 	.word	0x40023c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	080057c8 	.word	0x080057c8
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	20000010 	.word	0x20000010

080036b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	2000000c 	.word	0x2000000c

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d4:	f7ff fff0 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036d8:	4601      	mov	r1, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0a9b      	lsrs	r3, r3, #10
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4a03      	ldr	r2, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	080057d8 	.word	0x080057d8

080036f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036fc:	f7ff ffdc 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 8003700:	4601      	mov	r1, r0
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	0b5b      	lsrs	r3, r3, #13
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4a03      	ldr	r2, [pc, #12]	; (800371c <HAL_RCC_GetPCLK2Freq+0x24>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	080057d8 	.word	0x080057d8

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373a:	4bc6      	ldr	r3, [pc, #792]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b0c      	cmp	r3, #12
 8003744:	f200 817e 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x324>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <HAL_RCC_GetSysClockFreq+0x30>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003785 	.word	0x08003785
 8003754:	08003a45 	.word	0x08003a45
 8003758:	08003a45 	.word	0x08003a45
 800375c:	08003a45 	.word	0x08003a45
 8003760:	0800378b 	.word	0x0800378b
 8003764:	08003a45 	.word	0x08003a45
 8003768:	08003a45 	.word	0x08003a45
 800376c:	08003a45 	.word	0x08003a45
 8003770:	08003791 	.word	0x08003791
 8003774:	08003a45 	.word	0x08003a45
 8003778:	08003a45 	.word	0x08003a45
 800377c:	08003a45 	.word	0x08003a45
 8003780:	080038ed 	.word	0x080038ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4bb4      	ldr	r3, [pc, #720]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x338>)
 8003786:	613b      	str	r3, [r7, #16]
       break;
 8003788:	e15f      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378a:	4bb4      	ldr	r3, [pc, #720]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x33c>)
 800378c:	613b      	str	r3, [r7, #16]
      break;
 800378e:	e15c      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003790:	4bb0      	ldr	r3, [pc, #704]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003798:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379a:	4bae      	ldr	r3, [pc, #696]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d04a      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4bab      	ldr	r3, [pc, #684]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	f04f 0400 	mov.w	r4, #0
 80037b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	ea03 0501 	and.w	r5, r3, r1
 80037bc:	ea04 0602 	and.w	r6, r4, r2
 80037c0:	4629      	mov	r1, r5
 80037c2:	4632      	mov	r2, r6
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	f04f 0400 	mov.w	r4, #0
 80037cc:	0154      	lsls	r4, r2, #5
 80037ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037d2:	014b      	lsls	r3, r1, #5
 80037d4:	4619      	mov	r1, r3
 80037d6:	4622      	mov	r2, r4
 80037d8:	1b49      	subs	r1, r1, r5
 80037da:	eb62 0206 	sbc.w	r2, r2, r6
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	f04f 0400 	mov.w	r4, #0
 80037e6:	0194      	lsls	r4, r2, #6
 80037e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ec:	018b      	lsls	r3, r1, #6
 80037ee:	1a5b      	subs	r3, r3, r1
 80037f0:	eb64 0402 	sbc.w	r4, r4, r2
 80037f4:	f04f 0100 	mov.w	r1, #0
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	00e2      	lsls	r2, r4, #3
 80037fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003802:	00d9      	lsls	r1, r3, #3
 8003804:	460b      	mov	r3, r1
 8003806:	4614      	mov	r4, r2
 8003808:	195b      	adds	r3, r3, r5
 800380a:	eb44 0406 	adc.w	r4, r4, r6
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	0262      	lsls	r2, r4, #9
 8003818:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800381c:	0259      	lsls	r1, r3, #9
 800381e:	460b      	mov	r3, r1
 8003820:	4614      	mov	r4, r2
 8003822:	4618      	mov	r0, r3
 8003824:	4621      	mov	r1, r4
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f04f 0400 	mov.w	r4, #0
 800382c:	461a      	mov	r2, r3
 800382e:	4623      	mov	r3, r4
 8003830:	f7fc fd46 	bl	80002c0 <__aeabi_uldivmod>
 8003834:	4603      	mov	r3, r0
 8003836:	460c      	mov	r4, r1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e049      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383c:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	f04f 0400 	mov.w	r4, #0
 8003846:	f240 11ff 	movw	r1, #511	; 0x1ff
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	ea03 0501 	and.w	r5, r3, r1
 8003852:	ea04 0602 	and.w	r6, r4, r2
 8003856:	4629      	mov	r1, r5
 8003858:	4632      	mov	r2, r6
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	0154      	lsls	r4, r2, #5
 8003864:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003868:	014b      	lsls	r3, r1, #5
 800386a:	4619      	mov	r1, r3
 800386c:	4622      	mov	r2, r4
 800386e:	1b49      	subs	r1, r1, r5
 8003870:	eb62 0206 	sbc.w	r2, r2, r6
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	f04f 0400 	mov.w	r4, #0
 800387c:	0194      	lsls	r4, r2, #6
 800387e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003882:	018b      	lsls	r3, r1, #6
 8003884:	1a5b      	subs	r3, r3, r1
 8003886:	eb64 0402 	sbc.w	r4, r4, r2
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	00e2      	lsls	r2, r4, #3
 8003894:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003898:	00d9      	lsls	r1, r3, #3
 800389a:	460b      	mov	r3, r1
 800389c:	4614      	mov	r4, r2
 800389e:	195b      	adds	r3, r3, r5
 80038a0:	eb44 0406 	adc.w	r4, r4, r6
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	02a2      	lsls	r2, r4, #10
 80038ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038b2:	0299      	lsls	r1, r3, #10
 80038b4:	460b      	mov	r3, r1
 80038b6:	4614      	mov	r4, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	4621      	mov	r1, r4
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	461a      	mov	r2, r3
 80038c4:	4623      	mov	r3, r4
 80038c6:	f7fc fcfb 	bl	80002c0 <__aeabi_uldivmod>
 80038ca:	4603      	mov	r3, r0
 80038cc:	460c      	mov	r4, r1
 80038ce:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038d0:	4b60      	ldr	r3, [pc, #384]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	3301      	adds	r3, #1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	613b      	str	r3, [r7, #16]
      break;
 80038ea:	e0ae      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f6:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d04a      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003902:	4b54      	ldr	r3, [pc, #336]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	f04f 0400 	mov.w	r4, #0
 800390c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	ea03 0501 	and.w	r5, r3, r1
 8003918:	ea04 0602 	and.w	r6, r4, r2
 800391c:	4629      	mov	r1, r5
 800391e:	4632      	mov	r2, r6
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	f04f 0400 	mov.w	r4, #0
 8003928:	0154      	lsls	r4, r2, #5
 800392a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800392e:	014b      	lsls	r3, r1, #5
 8003930:	4619      	mov	r1, r3
 8003932:	4622      	mov	r2, r4
 8003934:	1b49      	subs	r1, r1, r5
 8003936:	eb62 0206 	sbc.w	r2, r2, r6
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	f04f 0400 	mov.w	r4, #0
 8003942:	0194      	lsls	r4, r2, #6
 8003944:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003948:	018b      	lsls	r3, r1, #6
 800394a:	1a5b      	subs	r3, r3, r1
 800394c:	eb64 0402 	sbc.w	r4, r4, r2
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	00e2      	lsls	r2, r4, #3
 800395a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800395e:	00d9      	lsls	r1, r3, #3
 8003960:	460b      	mov	r3, r1
 8003962:	4614      	mov	r4, r2
 8003964:	195b      	adds	r3, r3, r5
 8003966:	eb44 0406 	adc.w	r4, r4, r6
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	0262      	lsls	r2, r4, #9
 8003974:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003978:	0259      	lsls	r1, r3, #9
 800397a:	460b      	mov	r3, r1
 800397c:	4614      	mov	r4, r2
 800397e:	4618      	mov	r0, r3
 8003980:	4621      	mov	r1, r4
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f04f 0400 	mov.w	r4, #0
 8003988:	461a      	mov	r2, r3
 800398a:	4623      	mov	r3, r4
 800398c:	f7fc fc98 	bl	80002c0 <__aeabi_uldivmod>
 8003990:	4603      	mov	r3, r0
 8003992:	460c      	mov	r4, r1
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	e049      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003998:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	f04f 0400 	mov.w	r4, #0
 80039a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	ea03 0501 	and.w	r5, r3, r1
 80039ae:	ea04 0602 	and.w	r6, r4, r2
 80039b2:	4629      	mov	r1, r5
 80039b4:	4632      	mov	r2, r6
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	f04f 0400 	mov.w	r4, #0
 80039be:	0154      	lsls	r4, r2, #5
 80039c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039c4:	014b      	lsls	r3, r1, #5
 80039c6:	4619      	mov	r1, r3
 80039c8:	4622      	mov	r2, r4
 80039ca:	1b49      	subs	r1, r1, r5
 80039cc:	eb62 0206 	sbc.w	r2, r2, r6
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	0194      	lsls	r4, r2, #6
 80039da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039de:	018b      	lsls	r3, r1, #6
 80039e0:	1a5b      	subs	r3, r3, r1
 80039e2:	eb64 0402 	sbc.w	r4, r4, r2
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	00e2      	lsls	r2, r4, #3
 80039f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f4:	00d9      	lsls	r1, r3, #3
 80039f6:	460b      	mov	r3, r1
 80039f8:	4614      	mov	r4, r2
 80039fa:	195b      	adds	r3, r3, r5
 80039fc:	eb44 0406 	adc.w	r4, r4, r6
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	02a2      	lsls	r2, r4, #10
 8003a0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a0e:	0299      	lsls	r1, r3, #10
 8003a10:	460b      	mov	r3, r1
 8003a12:	4614      	mov	r4, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	4621      	mov	r1, r4
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f04f 0400 	mov.w	r4, #0
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4623      	mov	r3, r4
 8003a22:	f7fc fc4d 	bl	80002c0 <__aeabi_uldivmod>
 8003a26:	4603      	mov	r3, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	0f1b      	lsrs	r3, r3, #28
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	613b      	str	r3, [r7, #16]
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x338>)
 8003a46:	613b      	str	r3, [r7, #16]
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	693b      	ldr	r3, [r7, #16]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	007a1200 	.word	0x007a1200

08003a60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8083 	beq.w	8003b80 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a7a:	4b95      	ldr	r3, [pc, #596]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d019      	beq.n	8003aba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a86:	4b92      	ldr	r3, [pc, #584]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a92:	4b8f      	ldr	r3, [pc, #572]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a9e:	d00c      	beq.n	8003aba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa0:	4b8b      	ldr	r3, [pc, #556]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	d112      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aac:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aba:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d05b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x11e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d157      	bne.n	8003b7e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e216      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x8a>
 8003adc:	4b7c      	ldr	r3, [pc, #496]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7b      	ldr	r2, [pc, #492]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e01d      	b.n	8003b26 <HAL_RCC_OscConfig+0xc6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_OscConfig+0xae>
 8003af4:	4b76      	ldr	r3, [pc, #472]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a72      	ldr	r2, [pc, #456]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCC_OscConfig+0xc6>
 8003b0e:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6f      	ldr	r2, [pc, #444]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6c      	ldr	r2, [pc, #432]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fc09 	bl	8001344 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b36:	f7fd fc05 	bl	8001344 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b64      	cmp	r3, #100	; 0x64
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1db      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0xd6>
 8003b54:	e014      	b.n	8003b80 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fd fbf5 	bl	8001344 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b5e:	f7fd fbf1 	bl	8001344 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	; 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1c7      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b70:	4b57      	ldr	r3, [pc, #348]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0xfe>
 8003b7c:	e000      	b.n	8003b80 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06f      	beq.n	8003c6c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b98:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb0:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d11c      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bbc:	4b44      	ldr	r3, [pc, #272]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d116      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc8:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x180>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e18f      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4938      	ldr	r1, [pc, #224]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf4:	e03a      	b.n	8003c6c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d020      	beq.n	8003c40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfe:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <HAL_RCC_OscConfig+0x274>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd fb9e 	bl	8001344 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fd fb9a 	bl	8001344 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e170      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1e:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4925      	ldr	r1, [pc, #148]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
 8003c3e:	e015      	b.n	8003c6c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x274>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd fb7d 	bl	8001344 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fb79 	bl	8001344 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e14f      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d037      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d016      	beq.n	8003cae <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCC_OscConfig+0x278>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fd fb5d 	bl	8001344 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fd fb59 	bl	8001344 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e12f      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x22e>
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <HAL_RCC_OscConfig+0x278>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fd fb46 	bl	8001344 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cba:	e00f      	b.n	8003cdc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fd fb42 	bl	8001344 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d908      	bls.n	8003cdc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e118      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	42470000 	.word	0x42470000
 8003cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4b8a      	ldr	r3, [pc, #552]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e9      	bne.n	8003cbc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8097 	beq.w	8003e24 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfa:	4b83      	ldr	r3, [pc, #524]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	4b7f      	ldr	r3, [pc, #508]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a7e      	ldr	r2, [pc, #504]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b7c      	ldr	r3, [pc, #496]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d26:	4b79      	ldr	r3, [pc, #484]	; (8003f0c <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d118      	bne.n	8003d64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d32:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a75      	ldr	r2, [pc, #468]	; (8003f0c <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3e:	f7fd fb01 	bl	8001344 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fd fafd 	bl	8001344 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e0d3      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <HAL_RCC_OscConfig+0x4ac>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x31a>
 8003d6c:	4b66      	ldr	r3, [pc, #408]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a65      	ldr	r2, [pc, #404]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	e01c      	b.n	8003db4 <HAL_RCC_OscConfig+0x354>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x33c>
 8003d82:	4b61      	ldr	r3, [pc, #388]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a60      	ldr	r2, [pc, #384]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	4b5e      	ldr	r3, [pc, #376]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a5d      	ldr	r2, [pc, #372]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0x354>
 8003d9c:	4b5a      	ldr	r3, [pc, #360]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a59      	ldr	r2, [pc, #356]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	4b57      	ldr	r3, [pc, #348]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a56      	ldr	r2, [pc, #344]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003dae:	f023 0304 	bic.w	r3, r3, #4
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d015      	beq.n	8003de8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd fac2 	bl	8001344 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fabe 	bl	8001344 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e092      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dda:	4b4b      	ldr	r3, [pc, #300]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0ee      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x364>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fd faac 	bl	8001344 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fd faa8 	bl	8001344 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e07c      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e06:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ee      	bne.n	8003df0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	4a3a      	ldr	r2, [pc, #232]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d068      	beq.n	8003efe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2c:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d060      	beq.n	8003efa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d145      	bne.n	8003ecc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_RCC_OscConfig+0x4b0>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fd fa7d 	bl	8001344 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fd fa79 	bl	8001344 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e04f      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e60:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	071b      	lsls	r3, r3, #28
 8003e98:	491b      	ldr	r1, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <HAL_RCC_OscConfig+0x4b0>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fa4e 	bl	8001344 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fd fa4a 	bl	8001344 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e020      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x44c>
 8003eca:	e018      	b.n	8003efe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_RCC_OscConfig+0x4b0>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fa37 	bl	8001344 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd fa33 	bl	8001344 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e009      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_OscConfig+0x4a8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x47a>
 8003ef8:	e001      	b.n	8003efe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42470060 	.word	0x42470060

08003f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e03f      	b.n	8003fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd f88e 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f829 	bl	8003fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ff2:	f023 030c 	bic.w	r3, r3, #12
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401e:	f040 818b 	bne.w	8004338 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4ac1      	ldr	r2, [pc, #772]	; (800432c <UART_SetConfig+0x37c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d005      	beq.n	8004038 <UART_SetConfig+0x88>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4abf      	ldr	r2, [pc, #764]	; (8004330 <UART_SetConfig+0x380>)
 8004032:	4293      	cmp	r3, r2
 8004034:	f040 80bd 	bne.w	80041b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7ff fb5e 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 800403c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	461d      	mov	r5, r3
 8004042:	f04f 0600 	mov.w	r6, #0
 8004046:	46a8      	mov	r8, r5
 8004048:	46b1      	mov	r9, r6
 800404a:	eb18 0308 	adds.w	r3, r8, r8
 800404e:	eb49 0409 	adc.w	r4, r9, r9
 8004052:	4698      	mov	r8, r3
 8004054:	46a1      	mov	r9, r4
 8004056:	eb18 0805 	adds.w	r8, r8, r5
 800405a:	eb49 0906 	adc.w	r9, r9, r6
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800406a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800406e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004072:	4688      	mov	r8, r1
 8004074:	4691      	mov	r9, r2
 8004076:	eb18 0005 	adds.w	r0, r8, r5
 800407a:	eb49 0106 	adc.w	r1, r9, r6
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	461d      	mov	r5, r3
 8004084:	f04f 0600 	mov.w	r6, #0
 8004088:	196b      	adds	r3, r5, r5
 800408a:	eb46 0406 	adc.w	r4, r6, r6
 800408e:	461a      	mov	r2, r3
 8004090:	4623      	mov	r3, r4
 8004092:	f7fc f915 	bl	80002c0 <__aeabi_uldivmod>
 8004096:	4603      	mov	r3, r0
 8004098:	460c      	mov	r4, r1
 800409a:	461a      	mov	r2, r3
 800409c:	4ba5      	ldr	r3, [pc, #660]	; (8004334 <UART_SetConfig+0x384>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	461d      	mov	r5, r3
 80040ac:	f04f 0600 	mov.w	r6, #0
 80040b0:	46a9      	mov	r9, r5
 80040b2:	46b2      	mov	sl, r6
 80040b4:	eb19 0309 	adds.w	r3, r9, r9
 80040b8:	eb4a 040a 	adc.w	r4, sl, sl
 80040bc:	4699      	mov	r9, r3
 80040be:	46a2      	mov	sl, r4
 80040c0:	eb19 0905 	adds.w	r9, r9, r5
 80040c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040dc:	4689      	mov	r9, r1
 80040de:	4692      	mov	sl, r2
 80040e0:	eb19 0005 	adds.w	r0, r9, r5
 80040e4:	eb4a 0106 	adc.w	r1, sl, r6
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	461d      	mov	r5, r3
 80040ee:	f04f 0600 	mov.w	r6, #0
 80040f2:	196b      	adds	r3, r5, r5
 80040f4:	eb46 0406 	adc.w	r4, r6, r6
 80040f8:	461a      	mov	r2, r3
 80040fa:	4623      	mov	r3, r4
 80040fc:	f7fc f8e0 	bl	80002c0 <__aeabi_uldivmod>
 8004100:	4603      	mov	r3, r0
 8004102:	460c      	mov	r4, r1
 8004104:	461a      	mov	r2, r3
 8004106:	4b8b      	ldr	r3, [pc, #556]	; (8004334 <UART_SetConfig+0x384>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	; 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a86      	ldr	r2, [pc, #536]	; (8004334 <UART_SetConfig+0x384>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004128:	4498      	add	r8, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	461d      	mov	r5, r3
 800412e:	f04f 0600 	mov.w	r6, #0
 8004132:	46a9      	mov	r9, r5
 8004134:	46b2      	mov	sl, r6
 8004136:	eb19 0309 	adds.w	r3, r9, r9
 800413a:	eb4a 040a 	adc.w	r4, sl, sl
 800413e:	4699      	mov	r9, r3
 8004140:	46a2      	mov	sl, r4
 8004142:	eb19 0905 	adds.w	r9, r9, r5
 8004146:	eb4a 0a06 	adc.w	sl, sl, r6
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800415a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800415e:	4689      	mov	r9, r1
 8004160:	4692      	mov	sl, r2
 8004162:	eb19 0005 	adds.w	r0, r9, r5
 8004166:	eb4a 0106 	adc.w	r1, sl, r6
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	461d      	mov	r5, r3
 8004170:	f04f 0600 	mov.w	r6, #0
 8004174:	196b      	adds	r3, r5, r5
 8004176:	eb46 0406 	adc.w	r4, r6, r6
 800417a:	461a      	mov	r2, r3
 800417c:	4623      	mov	r3, r4
 800417e:	f7fc f89f 	bl	80002c0 <__aeabi_uldivmod>
 8004182:	4603      	mov	r3, r0
 8004184:	460c      	mov	r4, r1
 8004186:	461a      	mov	r2, r3
 8004188:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <UART_SetConfig+0x384>)
 800418a:	fba3 1302 	umull	r1, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2164      	movs	r1, #100	; 0x64
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	3332      	adds	r3, #50	; 0x32
 800419c:	4a65      	ldr	r2, [pc, #404]	; (8004334 <UART_SetConfig+0x384>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f003 0207 	and.w	r2, r3, #7
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4442      	add	r2, r8
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	e26f      	b.n	8004692 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041b2:	f7ff fa8d 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80041b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	461d      	mov	r5, r3
 80041bc:	f04f 0600 	mov.w	r6, #0
 80041c0:	46a8      	mov	r8, r5
 80041c2:	46b1      	mov	r9, r6
 80041c4:	eb18 0308 	adds.w	r3, r8, r8
 80041c8:	eb49 0409 	adc.w	r4, r9, r9
 80041cc:	4698      	mov	r8, r3
 80041ce:	46a1      	mov	r9, r4
 80041d0:	eb18 0805 	adds.w	r8, r8, r5
 80041d4:	eb49 0906 	adc.w	r9, r9, r6
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041ec:	4688      	mov	r8, r1
 80041ee:	4691      	mov	r9, r2
 80041f0:	eb18 0005 	adds.w	r0, r8, r5
 80041f4:	eb49 0106 	adc.w	r1, r9, r6
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	461d      	mov	r5, r3
 80041fe:	f04f 0600 	mov.w	r6, #0
 8004202:	196b      	adds	r3, r5, r5
 8004204:	eb46 0406 	adc.w	r4, r6, r6
 8004208:	461a      	mov	r2, r3
 800420a:	4623      	mov	r3, r4
 800420c:	f7fc f858 	bl	80002c0 <__aeabi_uldivmod>
 8004210:	4603      	mov	r3, r0
 8004212:	460c      	mov	r4, r1
 8004214:	461a      	mov	r2, r3
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <UART_SetConfig+0x384>)
 8004218:	fba3 2302 	umull	r2, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	461d      	mov	r5, r3
 8004226:	f04f 0600 	mov.w	r6, #0
 800422a:	46a9      	mov	r9, r5
 800422c:	46b2      	mov	sl, r6
 800422e:	eb19 0309 	adds.w	r3, r9, r9
 8004232:	eb4a 040a 	adc.w	r4, sl, sl
 8004236:	4699      	mov	r9, r3
 8004238:	46a2      	mov	sl, r4
 800423a:	eb19 0905 	adds.w	r9, r9, r5
 800423e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800424e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004256:	4689      	mov	r9, r1
 8004258:	4692      	mov	sl, r2
 800425a:	eb19 0005 	adds.w	r0, r9, r5
 800425e:	eb4a 0106 	adc.w	r1, sl, r6
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	461d      	mov	r5, r3
 8004268:	f04f 0600 	mov.w	r6, #0
 800426c:	196b      	adds	r3, r5, r5
 800426e:	eb46 0406 	adc.w	r4, r6, r6
 8004272:	461a      	mov	r2, r3
 8004274:	4623      	mov	r3, r4
 8004276:	f7fc f823 	bl	80002c0 <__aeabi_uldivmod>
 800427a:	4603      	mov	r3, r0
 800427c:	460c      	mov	r4, r1
 800427e:	461a      	mov	r2, r3
 8004280:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <UART_SetConfig+0x384>)
 8004282:	fba3 1302 	umull	r1, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2164      	movs	r1, #100	; 0x64
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	3332      	adds	r3, #50	; 0x32
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <UART_SetConfig+0x384>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a2:	4498      	add	r8, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	461d      	mov	r5, r3
 80042a8:	f04f 0600 	mov.w	r6, #0
 80042ac:	46a9      	mov	r9, r5
 80042ae:	46b2      	mov	sl, r6
 80042b0:	eb19 0309 	adds.w	r3, r9, r9
 80042b4:	eb4a 040a 	adc.w	r4, sl, sl
 80042b8:	4699      	mov	r9, r3
 80042ba:	46a2      	mov	sl, r4
 80042bc:	eb19 0905 	adds.w	r9, r9, r5
 80042c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042d8:	4689      	mov	r9, r1
 80042da:	4692      	mov	sl, r2
 80042dc:	eb19 0005 	adds.w	r0, r9, r5
 80042e0:	eb4a 0106 	adc.w	r1, sl, r6
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	461d      	mov	r5, r3
 80042ea:	f04f 0600 	mov.w	r6, #0
 80042ee:	196b      	adds	r3, r5, r5
 80042f0:	eb46 0406 	adc.w	r4, r6, r6
 80042f4:	461a      	mov	r2, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	f7fb ffe2 	bl	80002c0 <__aeabi_uldivmod>
 80042fc:	4603      	mov	r3, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	461a      	mov	r2, r3
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <UART_SetConfig+0x384>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	; 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a07      	ldr	r2, [pc, #28]	; (8004334 <UART_SetConfig+0x384>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 0207 	and.w	r2, r3, #7
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4442      	add	r2, r8
 8004328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800432a:	e1b2      	b.n	8004692 <UART_SetConfig+0x6e2>
 800432c:	40011000 	.word	0x40011000
 8004330:	40011400 	.word	0x40011400
 8004334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4ad7      	ldr	r2, [pc, #860]	; (800469c <UART_SetConfig+0x6ec>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d005      	beq.n	800434e <UART_SetConfig+0x39e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4ad6      	ldr	r2, [pc, #856]	; (80046a0 <UART_SetConfig+0x6f0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	f040 80d1 	bne.w	80044f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800434e:	f7ff f9d3 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 8004352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	469a      	mov	sl, r3
 8004358:	f04f 0b00 	mov.w	fp, #0
 800435c:	46d0      	mov	r8, sl
 800435e:	46d9      	mov	r9, fp
 8004360:	eb18 0308 	adds.w	r3, r8, r8
 8004364:	eb49 0409 	adc.w	r4, r9, r9
 8004368:	4698      	mov	r8, r3
 800436a:	46a1      	mov	r9, r4
 800436c:	eb18 080a 	adds.w	r8, r8, sl
 8004370:	eb49 090b 	adc.w	r9, r9, fp
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004388:	4688      	mov	r8, r1
 800438a:	4691      	mov	r9, r2
 800438c:	eb1a 0508 	adds.w	r5, sl, r8
 8004390:	eb4b 0609 	adc.w	r6, fp, r9
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4619      	mov	r1, r3
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	0094      	lsls	r4, r2, #2
 80043a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043ac:	008b      	lsls	r3, r1, #2
 80043ae:	461a      	mov	r2, r3
 80043b0:	4623      	mov	r3, r4
 80043b2:	4628      	mov	r0, r5
 80043b4:	4631      	mov	r1, r6
 80043b6:	f7fb ff83 	bl	80002c0 <__aeabi_uldivmod>
 80043ba:	4603      	mov	r3, r0
 80043bc:	460c      	mov	r4, r1
 80043be:	461a      	mov	r2, r3
 80043c0:	4bb8      	ldr	r3, [pc, #736]	; (80046a4 <UART_SetConfig+0x6f4>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	469b      	mov	fp, r3
 80043d0:	f04f 0c00 	mov.w	ip, #0
 80043d4:	46d9      	mov	r9, fp
 80043d6:	46e2      	mov	sl, ip
 80043d8:	eb19 0309 	adds.w	r3, r9, r9
 80043dc:	eb4a 040a 	adc.w	r4, sl, sl
 80043e0:	4699      	mov	r9, r3
 80043e2:	46a2      	mov	sl, r4
 80043e4:	eb19 090b 	adds.w	r9, r9, fp
 80043e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004400:	4689      	mov	r9, r1
 8004402:	4692      	mov	sl, r2
 8004404:	eb1b 0509 	adds.w	r5, fp, r9
 8004408:	eb4c 060a 	adc.w	r6, ip, sl
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4619      	mov	r1, r3
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f04f 0400 	mov.w	r4, #0
 800441e:	0094      	lsls	r4, r2, #2
 8004420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004424:	008b      	lsls	r3, r1, #2
 8004426:	461a      	mov	r2, r3
 8004428:	4623      	mov	r3, r4
 800442a:	4628      	mov	r0, r5
 800442c:	4631      	mov	r1, r6
 800442e:	f7fb ff47 	bl	80002c0 <__aeabi_uldivmod>
 8004432:	4603      	mov	r3, r0
 8004434:	460c      	mov	r4, r1
 8004436:	461a      	mov	r2, r3
 8004438:	4b9a      	ldr	r3, [pc, #616]	; (80046a4 <UART_SetConfig+0x6f4>)
 800443a:	fba3 1302 	umull	r1, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2164      	movs	r1, #100	; 0x64
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	; 0x32
 800444c:	4a95      	ldr	r2, [pc, #596]	; (80046a4 <UART_SetConfig+0x6f4>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004458:	4498      	add	r8, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	469b      	mov	fp, r3
 800445e:	f04f 0c00 	mov.w	ip, #0
 8004462:	46d9      	mov	r9, fp
 8004464:	46e2      	mov	sl, ip
 8004466:	eb19 0309 	adds.w	r3, r9, r9
 800446a:	eb4a 040a 	adc.w	r4, sl, sl
 800446e:	4699      	mov	r9, r3
 8004470:	46a2      	mov	sl, r4
 8004472:	eb19 090b 	adds.w	r9, r9, fp
 8004476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800448a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800448e:	4689      	mov	r9, r1
 8004490:	4692      	mov	sl, r2
 8004492:	eb1b 0509 	adds.w	r5, fp, r9
 8004496:	eb4c 060a 	adc.w	r6, ip, sl
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4619      	mov	r1, r3
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	f04f 0400 	mov.w	r4, #0
 80044ac:	0094      	lsls	r4, r2, #2
 80044ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044b2:	008b      	lsls	r3, r1, #2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4623      	mov	r3, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	4631      	mov	r1, r6
 80044bc:	f7fb ff00 	bl	80002c0 <__aeabi_uldivmod>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b77      	ldr	r3, [pc, #476]	; (80046a4 <UART_SetConfig+0x6f4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a72      	ldr	r2, [pc, #456]	; (80046a4 <UART_SetConfig+0x6f4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4442      	add	r2, r8
 80044ec:	609a      	str	r2, [r3, #8]
 80044ee:	e0d0      	b.n	8004692 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7ff f8ee 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80044f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	469a      	mov	sl, r3
 80044fa:	f04f 0b00 	mov.w	fp, #0
 80044fe:	46d0      	mov	r8, sl
 8004500:	46d9      	mov	r9, fp
 8004502:	eb18 0308 	adds.w	r3, r8, r8
 8004506:	eb49 0409 	adc.w	r4, r9, r9
 800450a:	4698      	mov	r8, r3
 800450c:	46a1      	mov	r9, r4
 800450e:	eb18 080a 	adds.w	r8, r8, sl
 8004512:	eb49 090b 	adc.w	r9, r9, fp
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004522:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800452a:	4688      	mov	r8, r1
 800452c:	4691      	mov	r9, r2
 800452e:	eb1a 0508 	adds.w	r5, sl, r8
 8004532:	eb4b 0609 	adc.w	r6, fp, r9
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4619      	mov	r1, r3
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	f04f 0400 	mov.w	r4, #0
 8004548:	0094      	lsls	r4, r2, #2
 800454a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	461a      	mov	r2, r3
 8004552:	4623      	mov	r3, r4
 8004554:	4628      	mov	r0, r5
 8004556:	4631      	mov	r1, r6
 8004558:	f7fb feb2 	bl	80002c0 <__aeabi_uldivmod>
 800455c:	4603      	mov	r3, r0
 800455e:	460c      	mov	r4, r1
 8004560:	461a      	mov	r2, r3
 8004562:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <UART_SetConfig+0x6f4>)
 8004564:	fba3 2302 	umull	r2, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	469b      	mov	fp, r3
 8004572:	f04f 0c00 	mov.w	ip, #0
 8004576:	46d9      	mov	r9, fp
 8004578:	46e2      	mov	sl, ip
 800457a:	eb19 0309 	adds.w	r3, r9, r9
 800457e:	eb4a 040a 	adc.w	r4, sl, sl
 8004582:	4699      	mov	r9, r3
 8004584:	46a2      	mov	sl, r4
 8004586:	eb19 090b 	adds.w	r9, r9, fp
 800458a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800459e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045a2:	4689      	mov	r9, r1
 80045a4:	4692      	mov	sl, r2
 80045a6:	eb1b 0509 	adds.w	r5, fp, r9
 80045aa:	eb4c 060a 	adc.w	r6, ip, sl
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4619      	mov	r1, r3
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	f04f 0400 	mov.w	r4, #0
 80045c0:	0094      	lsls	r4, r2, #2
 80045c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045c6:	008b      	lsls	r3, r1, #2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	4628      	mov	r0, r5
 80045ce:	4631      	mov	r1, r6
 80045d0:	f7fb fe76 	bl	80002c0 <__aeabi_uldivmod>
 80045d4:	4603      	mov	r3, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	461a      	mov	r2, r3
 80045da:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <UART_SetConfig+0x6f4>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	; 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	3332      	adds	r3, #50	; 0x32
 80045ee:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <UART_SetConfig+0x6f4>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fa:	4498      	add	r8, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	469b      	mov	fp, r3
 8004600:	f04f 0c00 	mov.w	ip, #0
 8004604:	46d9      	mov	r9, fp
 8004606:	46e2      	mov	sl, ip
 8004608:	eb19 0309 	adds.w	r3, r9, r9
 800460c:	eb4a 040a 	adc.w	r4, sl, sl
 8004610:	4699      	mov	r9, r3
 8004612:	46a2      	mov	sl, r4
 8004614:	eb19 090b 	adds.w	r9, r9, fp
 8004618:	eb4a 0a0c 	adc.w	sl, sl, ip
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800462c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004630:	4689      	mov	r9, r1
 8004632:	4692      	mov	sl, r2
 8004634:	eb1b 0509 	adds.w	r5, fp, r9
 8004638:	eb4c 060a 	adc.w	r6, ip, sl
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4619      	mov	r1, r3
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	f04f 0400 	mov.w	r4, #0
 800464e:	0094      	lsls	r4, r2, #2
 8004650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004654:	008b      	lsls	r3, r1, #2
 8004656:	461a      	mov	r2, r3
 8004658:	4623      	mov	r3, r4
 800465a:	4628      	mov	r0, r5
 800465c:	4631      	mov	r1, r6
 800465e:	f7fb fe2f 	bl	80002c0 <__aeabi_uldivmod>
 8004662:	4603      	mov	r3, r0
 8004664:	460c      	mov	r4, r1
 8004666:	461a      	mov	r2, r3
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <UART_SetConfig+0x6f4>)
 800466a:	fba3 1302 	umull	r1, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2164      	movs	r1, #100	; 0x64
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	3332      	adds	r3, #50	; 0x32
 800467c:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <UART_SetConfig+0x6f4>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4442      	add	r2, r8
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	e7ff      	b.n	8004692 <UART_SetConfig+0x6e2>
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469c:	40011000 	.word	0x40011000
 80046a0:	40011400 	.word	0x40011400
 80046a4:	51eb851f 	.word	0x51eb851f

080046a8 <_ZN4OLEDC1Ev>:

#include "RJA_SSD1306.h"

constexpr unsigned char OLED::font1[];

OLED::OLED()
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <_ZN4OLEDC1Ev+0x30>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2278      	movs	r2, #120	; 0x78
 80046ba:	711a      	strb	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	227a      	movs	r2, #122	; 0x7a
 80046c0:	715a      	strb	r2, [r3, #5]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	719a      	strb	r2, [r3, #6]
{
	// TODO Auto-generated constructor stub

}
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	08005cf0 	.word	0x08005cf0

080046dc <_ZN4OLEDD1Ev>:

OLED::~OLED()
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <_ZN4OLEDD1Ev+0x1c>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	08005cf0 	.word	0x08005cf0

080046fc <_ZN4OLEDD0Ev>:
OLED::~OLED()
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
}
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ffe9 	bl	80046dc <_ZN4OLEDD1Ev>
 800470a:	f242 010c 	movw	r1, #8204	; 0x200c
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 face 	bl	8004cb0 <_ZdlPvj>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <_ZN4OLED4initEP19__I2C_HandleTypeDef>:

void OLED::init(I2C_HandleTypeDef *hi2c1)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af02      	add	r7, sp, #8
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
	uint8_t I2CBuff[2];
		//uint16_t OLEDCAddress = 0x78;
		hi2cI = hi2c1;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	609a      	str	r2, [r3, #8]

		//display off
		I2CBuff[0] = 0x00;
 800472e:	2300      	movs	r3, #0
 8004730:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 8004732:	23ae      	movs	r3, #174	; 0xae
 8004734:	737b      	strb	r3, [r7, #13]
		//memory mode: horizontal addressing
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6898      	ldr	r0, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	791b      	ldrb	r3, [r3, #4]
 800473e:	b299      	uxth	r1, r3
 8004740:	f107 020c 	add.w	r2, r7, #12
 8004744:	230a      	movs	r3, #10
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2302      	movs	r3, #2
 800474a:	f7fe fa99 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800474e:	2300      	movs	r3, #0
 8004750:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x20;	//memory mode
 8004752:	2320      	movs	r3, #32
 8004754:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6898      	ldr	r0, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	791b      	ldrb	r3, [r3, #4]
 800475e:	b299      	uxth	r1, r3
 8004760:	f107 020c 	add.w	r2, r7, #12
 8004764:	230a      	movs	r3, #10
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2302      	movs	r3, #2
 800476a:	f7fe fa89 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800476e:	2300      	movs	r3, #0
 8004770:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00;	//horizontal addressing
 8004772:	2300      	movs	r3, #0
 8004774:	737b      	strb	r3, [r7, #13]
		//scan starting line
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6898      	ldr	r0, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	791b      	ldrb	r3, [r3, #4]
 800477e:	b299      	uxth	r1, r3
 8004780:	f107 020c 	add.w	r2, r7, #12
 8004784:	230a      	movs	r3, #10
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2302      	movs	r3, #2
 800478a:	f7fe fa79 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800478e:	2300      	movs	r3, #0
 8004790:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6898      	ldr	r0, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	791b      	ldrb	r3, [r3, #4]
 800479e:	b299      	uxth	r1, r3
 80047a0:	f107 020c 	add.w	r2, r7, #12
 80047a4:	230a      	movs	r3, #10
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2302      	movs	r3, #2
 80047aa:	f7fe fa69 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80047ae:	2300      	movs	r3, #0
 80047b0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 80047b2:	2300      	movs	r3, #0
 80047b4:	737b      	strb	r3, [r7, #13]
		//charge pump on (2 commands)
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6898      	ldr	r0, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	791b      	ldrb	r3, [r3, #4]
 80047be:	b299      	uxth	r1, r3
 80047c0:	f107 020c 	add.w	r2, r7, #12
 80047c4:	230a      	movs	r3, #10
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2302      	movs	r3, #2
 80047ca:	f7fe fa59 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80047ce:	2300      	movs	r3, #0
 80047d0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x8D;
 80047d2:	238d      	movs	r3, #141	; 0x8d
 80047d4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6898      	ldr	r0, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	791b      	ldrb	r3, [r3, #4]
 80047de:	b299      	uxth	r1, r3
 80047e0:	f107 020c 	add.w	r2, r7, #12
 80047e4:	230a      	movs	r3, #10
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2302      	movs	r3, #2
 80047ea:	f7fe fa49 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80047ee:	2300      	movs	r3, #0
 80047f0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x14;
 80047f2:	2314      	movs	r3, #20
 80047f4:	737b      	strb	r3, [r7, #13]
		//entire display on, from RAM content
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6898      	ldr	r0, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	791b      	ldrb	r3, [r3, #4]
 80047fe:	b299      	uxth	r1, r3
 8004800:	f107 020c 	add.w	r2, r7, #12
 8004804:	230a      	movs	r3, #10
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2302      	movs	r3, #2
 800480a:	f7fe fa39 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800480e:	2300      	movs	r3, #0
 8004810:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 8004812:	23a4      	movs	r3, #164	; 0xa4
 8004814:	737b      	strb	r3, [r7, #13]
		//display on
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6898      	ldr	r0, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	791b      	ldrb	r3, [r3, #4]
 800481e:	b299      	uxth	r1, r3
 8004820:	f107 020c 	add.w	r2, r7, #12
 8004824:	230a      	movs	r3, #10
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2302      	movs	r3, #2
 800482a:	f7fe fa29 	bl	8002c80 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800482e:	2300      	movs	r3, #0
 8004830:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 8004832:	23af      	movs	r3, #175	; 0xaf
 8004834:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6898      	ldr	r0, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	791b      	ldrb	r3, [r3, #4]
 800483e:	b299      	uxth	r1, r3
 8004840:	f107 020c 	add.w	r2, r7, #12
 8004844:	230a      	movs	r3, #10
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2302      	movs	r3, #2
 800484a:	f7fe fa19 	bl	8002c80 <HAL_I2C_Master_Transmit>

		//initialise frame to zeros i.e. "empty" GDDRAM
		for(int r = 0; r < 64; r++)
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b3f      	cmp	r3, #63	; 0x3f
 8004856:	dc15      	bgt.n	8004884 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x166>
		{
			for(int c = 0; c < 128; c++)
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b7f      	cmp	r3, #127	; 0x7f
 8004860:	dc0c      	bgt.n	800487c <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x15e>
			{
				//pixel(c,r,0);	//problem!
				frame[c][r] = 0;
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	019b      	lsls	r3, r3, #6
 8004868:	441a      	add	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4413      	add	r3, r2
 800486e:	330c      	adds	r3, #12
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
			for(int c = 0; c < 128; c++)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3301      	adds	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e7ef      	b.n	800485c <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x13e>
		for(int r = 0; r < 64; r++)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e7e6      	b.n	8004852 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x134>
			}
		}
}
 8004884:	bf00      	nop
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <_ZN4OLED14drawFullscreenEv>:

void OLED::drawFullscreen() //I2C_HandleTypeDef *hi2c1
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
	uint8_t I2CBuff[2];
	int r, c, b, row, col;
	for (r = 0; r < 8; r++)
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	2b07      	cmp	r3, #7
 800489c:	dc40      	bgt.n	8004920 <_ZN4OLED14drawFullscreenEv+0x94>
	{
		for (c = 0; c < 128; c++)
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2b7f      	cmp	r3, #127	; 0x7f
 80048a6:	dc37      	bgt.n	8004918 <_ZN4OLED14drawFullscreenEv+0x8c>
		{
			uint8_t temp = 0x00;
 80048a8:	2300      	movs	r3, #0
 80048aa:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b07      	cmp	r3, #7
 80048b4:	dc1c      	bgt.n	80048f0 <_ZN4OLED14drawFullscreenEv+0x64>
			{
				row = r*8 + b;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
				col = c;
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	613b      	str	r3, [r7, #16]
				temp |= (frame[col][row]) << b;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	441a      	add	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4413      	add	r3, r2
 80048d0:	330c      	adds	r3, #12
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	b25a      	sxtb	r2, r3
 80048de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	e7df      	b.n	80048b0 <_ZN4OLED14drawFullscreenEv+0x24>
			}
			//
			I2CBuff[0] = 0x40;	//to write data
 80048f0:	2340      	movs	r3, #64	; 0x40
 80048f2:	733b      	strb	r3, [r7, #12]
			I2CBuff[1] = temp;
 80048f4:	7efb      	ldrb	r3, [r7, #27]
 80048f6:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6898      	ldr	r0, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	791b      	ldrb	r3, [r3, #4]
 8004900:	b299      	uxth	r1, r3
 8004902:	f107 020c 	add.w	r2, r7, #12
 8004906:	2305      	movs	r3, #5
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2302      	movs	r3, #2
 800490c:	f7fe f9b8 	bl	8002c80 <HAL_I2C_Master_Transmit>
		for (c = 0; c < 128; c++)
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	3301      	adds	r3, #1
 8004914:	623b      	str	r3, [r7, #32]
 8004916:	e7c4      	b.n	80048a2 <_ZN4OLED14drawFullscreenEv+0x16>
	for (r = 0; r < 8; r++)
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	3301      	adds	r3, #1
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	e7bb      	b.n	8004898 <_ZN4OLED14drawFullscreenEv+0xc>
		}
	}
}
 8004920:	bf00      	nop
 8004922:	3728      	adds	r7, #40	; 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_ZN4OLED11getCAddressEv>:
	}
	HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
}

uint8_t OLED::getCAddress()
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	return CAddress;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	791b      	ldrb	r3, [r3, #4]
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <_ZN4OLED5pixelEiibb>:
{
	return DAddress;
}

void OLED::pixel(int x, int y, bool colour, bool locked)	//use locked when inconvenient to lock from outside
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	70fb      	strb	r3, [r7, #3]
	if(locked)
 800494e:	7e3b      	ldrb	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <_ZN4OLED5pixelEiibb+0x2c>
	{
		if(x < 0 || y < 0 || x >= width || y >= height)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db12      	blt.n	8004980 <_ZN4OLED5pixelEiibb+0x40>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	db0f      	blt.n	8004980 <_ZN4OLED5pixelEiibb+0x40>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b7f      	cmp	r3, #127	; 0x7f
 8004964:	dc0c      	bgt.n	8004980 <_ZN4OLED5pixelEiibb+0x40>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b3f      	cmp	r3, #63	; 0x3f
 800496a:	dc09      	bgt.n	8004980 <_ZN4OLED5pixelEiibb+0x40>
		{
			return;
		}
	}
	frame[x][y] = colour;
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	441a      	add	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	330c      	adds	r3, #12
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e000      	b.n	8004982 <_ZN4OLED5pixelEiibb+0x42>
			return;
 8004980:	bf00      	nop
}
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_ZN4OLED8fillRectEiiiib>:
	line(x0, y0, x0, y0+rectHeight, colour, lineWidth);
	line(x1, y1-rectHeight, x1, y1, colour, lineWidth);
}

void OLED::fillRect(int x0, int y0, int x1, int y1, bool colour)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
	fill(x0, y0, x1, y1, colour);
 800499a:	7f3b      	ldrb	r3, [r7, #28]
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f829 	bl	8004a00 <_ZN4OLED4fillEiiiib>
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <_ZN4OLED4fillEb>:
	connectPoints(X, Y, pointsNum, colour, lineWidth);
	line(X[pointsNum - 1], Y[pointsNum - 1], X[0], Y[0], colour, lineWidth);
}

void OLED::fill(bool colour)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af02      	add	r7, sp, #8
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
	for(int r = 0; r < 64; r++)
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b3f      	cmp	r3, #63	; 0x3f
 80049ca:	dc15      	bgt.n	80049f8 <_ZN4OLED4fillEb+0x42>
	{
		for(int c = 0; c < 128; c++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b7f      	cmp	r3, #127	; 0x7f
 80049d4:	dc0c      	bgt.n	80049f0 <_ZN4OLED4fillEb+0x3a>
		{
			pixel(c,r,colour);	//frame[c][r] = colour;
 80049d6:	78fa      	ldrb	r2, [r7, #3]
 80049d8:	2300      	movs	r3, #0
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ffac 	bl	8004940 <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	e7ef      	b.n	80049d0 <_ZN4OLED4fillEb+0x1a>
	for(int r = 0; r < 64; r++)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e7e6      	b.n	80049c6 <_ZN4OLED4fillEb+0x10>
		}
	}
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <_ZN4OLED4fillEiiiib>:
void OLED::fill(int x0, int y0, int x1, int y1, bool colour)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	for(int r = y0; r <= y1; r++)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	dc17      	bgt.n	8004a4a <_ZN4OLED4fillEiiiib+0x4a>
	{
		for(int c = x0; c <= x1; c++)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	dc0d      	bgt.n	8004a42 <_ZN4OLED4fillEiiiib+0x42>
		{
			pixel(c, r, colour, 1);	//frame[c][r] = colour;
 8004a26:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	6939      	ldr	r1, [r7, #16]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ff83 	bl	8004940 <_ZN4OLED5pixelEiibb>
		for(int c = x0; c <= x1; c++)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e7ed      	b.n	8004a1e <_ZN4OLED4fillEiiiib+0x1e>
	for(int r = y0; r <= y1; r++)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3301      	adds	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e7e3      	b.n	8004a12 <_ZN4OLED4fillEiiiib+0x12>
		}
	}
}
 8004a4a:	bf00      	nop
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <_ZN4OLED9characterEiihbbi>:
		}
	}
}

void OLED::character(int x, int y, unsigned char c, bool colour, bool bg, int size)
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	70fb      	strb	r3, [r7, #3]
	if((x >= width)            || // Clip right
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b7f      	cmp	r3, #127	; 0x7f
 8004a66:	f300 80df 	bgt.w	8004c28 <_ZN4OLED9characterEiihbbi+0x1d4>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b3f      	cmp	r3, #63	; 0x3f
 8004a6e:	f300 80db 	bgt.w	8004c28 <_ZN4OLED9characterEiihbbi+0x1d4>
	 (y >= height)           || // Clip bottom
	 ((x + 6 * size - 1) < 0) || // Clip left
 8004a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a74:	4613      	mov	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4413      	add	r3, r2
 8004a82:	3b01      	subs	r3, #1
	 (y >= height)           || // Clip bottom
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f2c0 80cf 	blt.w	8004c28 <_ZN4OLED9characterEiihbbi+0x1d4>
	 ((y + 8 * size - 1) < 0))   // Clip top
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	00da      	lsls	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4413      	add	r3, r2
 8004a92:	3b01      	subs	r3, #1
	 ((x + 6 * size - 1) < 0) || // Clip left
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f2c0 80c7 	blt.w	8004c28 <_ZN4OLED9characterEiihbbi+0x1d4>
	return;

	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	799b      	ldrb	r3, [r3, #6]
 8004a9e:	f083 0301 	eor.w	r3, r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <_ZN4OLED9characterEiihbbi+0x60>
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	2baf      	cmp	r3, #175	; 0xaf
 8004aac:	d902      	bls.n	8004ab4 <_ZN4OLED9characterEiihbbi+0x60>
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	70fb      	strb	r3, [r7, #3]

	for (int8_t i=0; i<6; i++ )
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
 8004ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	f300 80b4 	bgt.w	8004c2a <_ZN4OLED9characterEiihbbi+0x1d6>
	{
		uint8_t line;
		if (i == 5)
 8004ac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d102      	bne.n	8004ad0 <_ZN4OLED9characterEiihbbi+0x7c>
			line = 0x0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75bb      	strb	r3, [r7, #22]
 8004ace:	e009      	b.n	8004ae4 <_ZN4OLED9characterEiihbbi+0x90>
		else
		{
			line = pgm_read_byte(&font1[(c*5)+i]);
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004adc:	4413      	add	r3, r2
 8004ade:	4a54      	ldr	r2, [pc, #336]	; (8004c30 <_ZN4OLED9characterEiihbbi+0x1dc>)
 8004ae0:	5cd3      	ldrb	r3, [r2, r3]
 8004ae2:	75bb      	strb	r3, [r7, #22]
		}
		for (int8_t j = 0; j<8; j++)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	757b      	strb	r3, [r7, #21]
 8004ae8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004aec:	2b07      	cmp	r3, #7
 8004aee:	f300 8094 	bgt.w	8004c1a <_ZN4OLED9characterEiihbbi+0x1c6>
		{
			if (line & 0x1)
 8004af2:	7dbb      	ldrb	r3, [r7, #22]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d03f      	beq.n	8004b7c <_ZN4OLED9characterEiihbbi+0x128>
			{
				if (size == 1) // default size
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d110      	bne.n	8004b24 <_ZN4OLED9characterEiihbbi+0xd0>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = colour;
 8004b02:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	18d1      	adds	r1, r2, r3
 8004b0a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	441a      	add	r2, r3
 8004b12:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8004b16:	2301      	movs	r3, #1
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ff0f 	bl	8004940 <_ZN4OLED5pixelEiibb>
 8004b22:	e070      	b.n	8004c06 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), colour);
 8004b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2a:	fb02 f203 	mul.w	r2, r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	18d0      	adds	r0, r2, r3
 8004b32:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b38:	fb02 f203 	mul.w	r2, r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	18d4      	adds	r4, r2, r3
 8004b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	441a      	add	r2, r3
 8004b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	18d5      	adds	r5, r2, r3
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	441a      	add	r2, r3
 8004b5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004b6a:	9201      	str	r2, [sp, #4]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	462b      	mov	r3, r5
 8004b70:	4622      	mov	r2, r4
 8004b72:	4601      	mov	r1, r0
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff ff09 	bl	800498c <_ZN4OLED8fillRectEiiiib>
 8004b7a:	e044      	b.n	8004c06 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
			}
			else if (bg != colour)
 8004b7c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004b80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d03e      	beq.n	8004c06 <_ZN4OLED9characterEiihbbi+0x1b2>
			{
				if (size == 1) // default size
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d110      	bne.n	8004bb0 <_ZN4OLED9characterEiihbbi+0x15c>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = bg;
 8004b8e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	18d1      	adds	r1, r2, r3
 8004b96:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	441a      	add	r2, r3
 8004b9e:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff fec9 	bl	8004940 <_ZN4OLED5pixelEiibb>
 8004bae:	e02a      	b.n	8004c06 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8004bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb6:	fb02 f203 	mul.w	r2, r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	18d0      	adds	r0, r2, r3
 8004bbe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc4:	fb02 f203 	mul.w	r2, r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	18d4      	adds	r4, r2, r3
 8004bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	441a      	add	r2, r3
 8004bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	18d5      	adds	r5, r2, r3
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004bf6:	9201      	str	r2, [sp, #4]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4601      	mov	r1, r0
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff fec3 	bl	800498c <_ZN4OLED8fillRectEiiiib>
				}
			}
			line >>= 1;
 8004c06:	7dbb      	ldrb	r3, [r7, #22]
 8004c08:	105b      	asrs	r3, r3, #1
 8004c0a:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j<8; j++)
 8004c0c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	757b      	strb	r3, [r7, #21]
 8004c18:	e766      	b.n	8004ae8 <_ZN4OLED9characterEiihbbi+0x94>
	for (int8_t i=0; i<6; i++ )
 8004c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3301      	adds	r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	75fb      	strb	r3, [r7, #23]
 8004c26:	e747      	b.n	8004ab8 <_ZN4OLED9characterEiihbbi+0x64>
	return;
 8004c28:	bf00      	nop
		}
	}
}
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c30:	080057e8 	.word	0x080057e8

08004c34 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>:

void OLED::text(int x, int y, string s, bool colour, bool bg, int size)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b08b      	sub	sp, #44	; 0x2c
 8004c38:	af04      	add	r7, sp, #16
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
	int offset = size*6;
 8004c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	613b      	str	r3, [r7, #16]
	for(string::size_type i = 0; i < s.size(); i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	6838      	ldr	r0, [r7, #0]
 8004c54:	f000 f885 	bl	8004d62 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	bf34      	ite	cc
 8004c60:	2301      	movcc	r3, #1
 8004c62:	2300      	movcs	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01e      	beq.n	8004ca8 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x74>
	{
		character(x+(offset*i), y, s[i], colour, bg, size);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	fb02 f203 	mul.w	r2, r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4413      	add	r3, r2
 8004c76:	461c      	mov	r4, r3
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	6838      	ldr	r0, [r7, #0]
 8004c7c:	f000 f873 	bl	8004d66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004c80:	4603      	mov	r3, r0
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	9302      	str	r3, [sp, #8]
 8004c88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4621      	mov	r1, r4
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff feda 	bl	8004a54 <_ZN4OLED9characterEiihbbi>
	for(string::size_type i = 0; i < s.size(); i++)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	e7d4      	b.n	8004c52 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x1e>
	}
}
 8004ca8:	bf00      	nop
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd90      	pop	{r4, r7, pc}

08004cb0 <_ZdlPvj>:
 8004cb0:	f000 b800 	b.w	8004cb4 <_ZdlPv>

08004cb4 <_ZdlPv>:
 8004cb4:	f000 b8ea 	b.w	8004e8c <free>

08004cb8 <_ZNSaIcEC1Ev>:
 8004cb8:	4770      	bx	lr

08004cba <_ZNSaIcED1Ev>:
 8004cba:	4770      	bx	lr

08004cbc <_ZSt19__throw_logic_errorPKc>:
 8004cbc:	b508      	push	{r3, lr}
 8004cbe:	f000 f8ab 	bl	8004e18 <abort>

08004cc2 <_ZSt20__throw_length_errorPKc>:
 8004cc2:	b508      	push	{r3, lr}
 8004cc4:	f000 f8a8 	bl	8004e18 <abort>

08004cc8 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8004cc8:	b10a      	cbz	r2, 8004cce <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8004cca:	f000 b8e7 	b.w	8004e9c <memcpy>
 8004cce:	4770      	bx	lr

08004cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8004cd0:	6001      	str	r1, [r0, #0]
 8004cd2:	4770      	bx	lr

08004cd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8004cd4:	6800      	ldr	r0, [r0, #0]
 8004cd6:	4770      	bx	lr

08004cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8004cd8:	3008      	adds	r0, #8
 8004cda:	4770      	bx	lr

08004cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8004cdc:	6081      	str	r1, [r0, #8]
 8004cde:	4770      	bx	lr

08004ce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8004ce0:	6803      	ldr	r3, [r0, #0]
 8004ce2:	6041      	str	r1, [r0, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	545a      	strb	r2, [r3, r1]
 8004ce8:	4770      	bx	lr
	...

08004cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004cec:	b508      	push	{r3, lr}
 8004cee:	680b      	ldr	r3, [r1, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da02      	bge.n	8004cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8004cf4:	4809      	ldr	r0, [pc, #36]	; (8004d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8004cf6:	f7ff ffe4 	bl	8004cc2 <_ZSt20__throw_length_errorPKc>
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d908      	bls.n	8004d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8004cfe:	0052      	lsls	r2, r2, #1
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d205      	bcs.n	8004d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	bfb6      	itet	lt
 8004d08:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8004d0c:	600a      	strge	r2, [r1, #0]
 8004d0e:	600b      	strlt	r3, [r1, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d16:	3001      	adds	r0, #1
 8004d18:	f000 b864 	b.w	8004de4 <_Znwj>
 8004d1c:	08005d22 	.word	0x08005d22

08004d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004d20:	4603      	mov	r3, r0
 8004d22:	f853 0b08 	ldr.w	r0, [r3], #8
 8004d26:	4298      	cmp	r0, r3
 8004d28:	d001      	beq.n	8004d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8004d2a:	f7ff bfc3 	b.w	8004cb4 <_ZdlPv>
 8004d2e:	4770      	bx	lr

08004d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8004d30:	2a01      	cmp	r2, #1
 8004d32:	b510      	push	{r4, lr}
 8004d34:	d102      	bne.n	8004d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8004d36:	780a      	ldrb	r2, [r1, #0]
 8004d38:	7002      	strb	r2, [r0, #0]
 8004d3a:	bd10      	pop	{r4, pc}
 8004d3c:	f7ff ffc4 	bl	8004cc8 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8004d40:	e7fb      	b.n	8004d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08004d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8004d42:	b508      	push	{r3, lr}
 8004d44:	1a52      	subs	r2, r2, r1
 8004d46:	f7ff fff3 	bl	8004d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004d4a:	bd08      	pop	{r3, pc}

08004d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8004d4c:	b508      	push	{r3, lr}
 8004d4e:	1a52      	subs	r2, r2, r1
 8004d50:	f7ff ffee 	bl	8004d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004d54:	bd08      	pop	{r3, pc}

08004d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8004d56:	b510      	push	{r4, lr}
 8004d58:	4604      	mov	r4, r0
 8004d5a:	f7ff ffe1 	bl	8004d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004d5e:	4620      	mov	r0, r4
 8004d60:	bd10      	pop	{r4, pc}

08004d62 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8004d62:	6840      	ldr	r0, [r0, #4]
 8004d64:	4770      	bx	lr

08004d66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8004d66:	6800      	ldr	r0, [r0, #0]
 8004d68:	4408      	add	r0, r1
 8004d6a:	4770      	bx	lr

08004d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8004d6c:	6001      	str	r1, [r0, #0]
 8004d6e:	4770      	bx	lr

08004d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8004d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d72:	4604      	mov	r4, r0
 8004d74:	4616      	mov	r6, r2
 8004d76:	460d      	mov	r5, r1
 8004d78:	b919      	cbnz	r1, 8004d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8004d7a:	b112      	cbz	r2, 8004d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8004d7c:	480d      	ldr	r0, [pc, #52]	; (8004db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8004d7e:	f7ff ff9d 	bl	8004cbc <_ZSt19__throw_logic_errorPKc>
 8004d82:	1b73      	subs	r3, r6, r5
 8004d84:	2b0f      	cmp	r3, #15
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	d907      	bls.n	8004d9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	a901      	add	r1, sp, #4
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7ff ffac 	bl	8004cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004d94:	9b01      	ldr	r3, [sp, #4]
 8004d96:	6020      	str	r0, [r4, #0]
 8004d98:	60a3      	str	r3, [r4, #8]
 8004d9a:	4632      	mov	r2, r6
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	f7ff ffd4 	bl	8004d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8004da4:	9b01      	ldr	r3, [sp, #4]
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	2100      	movs	r1, #0
 8004dac:	54d1      	strb	r1, [r2, r3]
 8004dae:	b002      	add	sp, #8
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	bf00      	nop
 8004db4:	08005cf8 	.word	0x08005cf8

08004db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	f100 0308 	add.w	r3, r0, #8
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	6003      	str	r3, [r0, #0]
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	b159      	cbz	r1, 8004dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8004dc6:	4608      	mov	r0, r1
 8004dc8:	f7fb fa72 	bl	80002b0 <strlen>
 8004dcc:	182a      	adds	r2, r5, r0
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7ff ffcb 	bl	8004d70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8004dda:	4620      	mov	r0, r4
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	f04f 32ff 	mov.w	r2, #4294967295
 8004de2:	e7f4      	b.n	8004dce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08004de4 <_Znwj>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	2800      	cmp	r0, #0
 8004de8:	bf14      	ite	ne
 8004dea:	4604      	movne	r4, r0
 8004dec:	2401      	moveq	r4, #1
 8004dee:	4620      	mov	r0, r4
 8004df0:	f000 f844 	bl	8004e7c <malloc>
 8004df4:	b930      	cbnz	r0, 8004e04 <_Znwj+0x20>
 8004df6:	f000 f807 	bl	8004e08 <_ZSt15get_new_handlerv>
 8004dfa:	b908      	cbnz	r0, 8004e00 <_Znwj+0x1c>
 8004dfc:	f000 f80c 	bl	8004e18 <abort>
 8004e00:	4780      	blx	r0
 8004e02:	e7f4      	b.n	8004dee <_Znwj+0xa>
 8004e04:	bd10      	pop	{r4, pc}
	...

08004e08 <_ZSt15get_new_handlerv>:
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <_ZSt15get_new_handlerv+0xc>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	f3bf 8f5b 	dmb	ish
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20003968 	.word	0x20003968

08004e18 <abort>:
 8004e18:	b508      	push	{r3, lr}
 8004e1a:	2006      	movs	r0, #6
 8004e1c:	f000 f94a 	bl	80050b4 <raise>
 8004e20:	2001      	movs	r0, #1
 8004e22:	f7fc f9b3 	bl	800118c <_exit>
	...

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000018 	.word	0x20000018

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4e0d      	ldr	r6, [pc, #52]	; (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1ba4      	subs	r4, r4, r6
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2500      	movs	r5, #0
 8004e40:	42a5      	cmp	r5, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4e0b      	ldr	r6, [pc, #44]	; (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	; (8004e78 <__libc_init_array+0x44>)
 8004e48:	f000 fc94 	bl	8005774 <_init>
 8004e4c:	1ba4      	subs	r4, r4, r6
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2500      	movs	r5, #0
 8004e52:	42a5      	cmp	r5, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e5c:	4798      	blx	r3
 8004e5e:	3501      	adds	r5, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e66:	4798      	blx	r3
 8004e68:	3501      	adds	r5, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08005d78 	.word	0x08005d78
 8004e70:	08005d78 	.word	0x08005d78
 8004e74:	08005d78 	.word	0x08005d78
 8004e78:	08005d80 	.word	0x08005d80

08004e7c <malloc>:
 8004e7c:	4b02      	ldr	r3, [pc, #8]	; (8004e88 <malloc+0xc>)
 8004e7e:	4601      	mov	r1, r0
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	f000 b885 	b.w	8004f90 <_malloc_r>
 8004e86:	bf00      	nop
 8004e88:	20000018 	.word	0x20000018

08004e8c <free>:
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <free+0xc>)
 8004e8e:	4601      	mov	r1, r0
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f000 b82f 	b.w	8004ef4 <_free_r>
 8004e96:	bf00      	nop
 8004e98:	20000018 	.word	0x20000018

08004e9c <memcpy>:
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	1e43      	subs	r3, r0, #1
 8004ea0:	440a      	add	r2, r1
 8004ea2:	4291      	cmp	r1, r2
 8004ea4:	d100      	bne.n	8004ea8 <memcpy+0xc>
 8004ea6:	bd10      	pop	{r4, pc}
 8004ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb0:	e7f7      	b.n	8004ea2 <memcpy+0x6>

08004eb2 <memmove>:
 8004eb2:	4288      	cmp	r0, r1
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	eb01 0302 	add.w	r3, r1, r2
 8004eba:	d807      	bhi.n	8004ecc <memmove+0x1a>
 8004ebc:	1e42      	subs	r2, r0, #1
 8004ebe:	4299      	cmp	r1, r3
 8004ec0:	d00a      	beq.n	8004ed8 <memmove+0x26>
 8004ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ec6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004eca:	e7f8      	b.n	8004ebe <memmove+0xc>
 8004ecc:	4283      	cmp	r3, r0
 8004ece:	d9f5      	bls.n	8004ebc <memmove+0xa>
 8004ed0:	1881      	adds	r1, r0, r2
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	42d3      	cmn	r3, r2
 8004ed6:	d100      	bne.n	8004eda <memmove+0x28>
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ede:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ee2:	e7f7      	b.n	8004ed4 <memmove+0x22>

08004ee4 <memset>:
 8004ee4:	4402      	add	r2, r0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d100      	bne.n	8004eee <memset+0xa>
 8004eec:	4770      	bx	lr
 8004eee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef2:	e7f9      	b.n	8004ee8 <memset+0x4>

08004ef4 <_free_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	2900      	cmp	r1, #0
 8004efa:	d045      	beq.n	8004f88 <_free_r+0x94>
 8004efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f00:	1f0c      	subs	r4, r1, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bfb8      	it	lt
 8004f06:	18e4      	addlt	r4, r4, r3
 8004f08:	f000 f92a 	bl	8005160 <__malloc_lock>
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <_free_r+0x98>)
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	4610      	mov	r0, r2
 8004f12:	b933      	cbnz	r3, 8004f22 <_free_r+0x2e>
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	6014      	str	r4, [r2, #0]
 8004f18:	4628      	mov	r0, r5
 8004f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f1e:	f000 b920 	b.w	8005162 <__malloc_unlock>
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	d90c      	bls.n	8004f40 <_free_r+0x4c>
 8004f26:	6821      	ldr	r1, [r4, #0]
 8004f28:	1862      	adds	r2, r4, r1
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	bf04      	itt	eq
 8004f2e:	681a      	ldreq	r2, [r3, #0]
 8004f30:	685b      	ldreq	r3, [r3, #4]
 8004f32:	6063      	str	r3, [r4, #4]
 8004f34:	bf04      	itt	eq
 8004f36:	1852      	addeq	r2, r2, r1
 8004f38:	6022      	streq	r2, [r4, #0]
 8004f3a:	6004      	str	r4, [r0, #0]
 8004f3c:	e7ec      	b.n	8004f18 <_free_r+0x24>
 8004f3e:	4613      	mov	r3, r2
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	b10a      	cbz	r2, 8004f48 <_free_r+0x54>
 8004f44:	42a2      	cmp	r2, r4
 8004f46:	d9fa      	bls.n	8004f3e <_free_r+0x4a>
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	1858      	adds	r0, r3, r1
 8004f4c:	42a0      	cmp	r0, r4
 8004f4e:	d10b      	bne.n	8004f68 <_free_r+0x74>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	4401      	add	r1, r0
 8004f54:	1858      	adds	r0, r3, r1
 8004f56:	4282      	cmp	r2, r0
 8004f58:	6019      	str	r1, [r3, #0]
 8004f5a:	d1dd      	bne.n	8004f18 <_free_r+0x24>
 8004f5c:	6810      	ldr	r0, [r2, #0]
 8004f5e:	6852      	ldr	r2, [r2, #4]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	4401      	add	r1, r0
 8004f64:	6019      	str	r1, [r3, #0]
 8004f66:	e7d7      	b.n	8004f18 <_free_r+0x24>
 8004f68:	d902      	bls.n	8004f70 <_free_r+0x7c>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	e7d3      	b.n	8004f18 <_free_r+0x24>
 8004f70:	6820      	ldr	r0, [r4, #0]
 8004f72:	1821      	adds	r1, r4, r0
 8004f74:	428a      	cmp	r2, r1
 8004f76:	bf04      	itt	eq
 8004f78:	6811      	ldreq	r1, [r2, #0]
 8004f7a:	6852      	ldreq	r2, [r2, #4]
 8004f7c:	6062      	str	r2, [r4, #4]
 8004f7e:	bf04      	itt	eq
 8004f80:	1809      	addeq	r1, r1, r0
 8004f82:	6021      	streq	r1, [r4, #0]
 8004f84:	605c      	str	r4, [r3, #4]
 8004f86:	e7c7      	b.n	8004f18 <_free_r+0x24>
 8004f88:	bd38      	pop	{r3, r4, r5, pc}
 8004f8a:	bf00      	nop
 8004f8c:	2000396c 	.word	0x2000396c

08004f90 <_malloc_r>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	1ccd      	adds	r5, r1, #3
 8004f94:	f025 0503 	bic.w	r5, r5, #3
 8004f98:	3508      	adds	r5, #8
 8004f9a:	2d0c      	cmp	r5, #12
 8004f9c:	bf38      	it	cc
 8004f9e:	250c      	movcc	r5, #12
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	db01      	blt.n	8004faa <_malloc_r+0x1a>
 8004fa6:	42a9      	cmp	r1, r5
 8004fa8:	d903      	bls.n	8004fb2 <_malloc_r+0x22>
 8004faa:	230c      	movs	r3, #12
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	f000 f8d5 	bl	8005160 <__malloc_lock>
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <_malloc_r+0xac>)
 8004fb8:	6814      	ldr	r4, [r2, #0]
 8004fba:	4621      	mov	r1, r4
 8004fbc:	b991      	cbnz	r1, 8004fe4 <_malloc_r+0x54>
 8004fbe:	4c20      	ldr	r4, [pc, #128]	; (8005040 <_malloc_r+0xb0>)
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	b91b      	cbnz	r3, 8004fcc <_malloc_r+0x3c>
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f000 f83d 	bl	8005044 <_sbrk_r>
 8004fca:	6020      	str	r0, [r4, #0]
 8004fcc:	4629      	mov	r1, r5
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f000 f838 	bl	8005044 <_sbrk_r>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d124      	bne.n	8005022 <_malloc_r+0x92>
 8004fd8:	230c      	movs	r3, #12
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f000 f8c0 	bl	8005162 <__malloc_unlock>
 8004fe2:	e7e4      	b.n	8004fae <_malloc_r+0x1e>
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	1b5b      	subs	r3, r3, r5
 8004fe8:	d418      	bmi.n	800501c <_malloc_r+0x8c>
 8004fea:	2b0b      	cmp	r3, #11
 8004fec:	d90f      	bls.n	800500e <_malloc_r+0x7e>
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	50cd      	str	r5, [r1, r3]
 8004ff2:	18cc      	adds	r4, r1, r3
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f000 f8b4 	bl	8005162 <__malloc_unlock>
 8004ffa:	f104 000b 	add.w	r0, r4, #11
 8004ffe:	1d23      	adds	r3, r4, #4
 8005000:	f020 0007 	bic.w	r0, r0, #7
 8005004:	1ac3      	subs	r3, r0, r3
 8005006:	d0d3      	beq.n	8004fb0 <_malloc_r+0x20>
 8005008:	425a      	negs	r2, r3
 800500a:	50e2      	str	r2, [r4, r3]
 800500c:	e7d0      	b.n	8004fb0 <_malloc_r+0x20>
 800500e:	428c      	cmp	r4, r1
 8005010:	684b      	ldr	r3, [r1, #4]
 8005012:	bf16      	itet	ne
 8005014:	6063      	strne	r3, [r4, #4]
 8005016:	6013      	streq	r3, [r2, #0]
 8005018:	460c      	movne	r4, r1
 800501a:	e7eb      	b.n	8004ff4 <_malloc_r+0x64>
 800501c:	460c      	mov	r4, r1
 800501e:	6849      	ldr	r1, [r1, #4]
 8005020:	e7cc      	b.n	8004fbc <_malloc_r+0x2c>
 8005022:	1cc4      	adds	r4, r0, #3
 8005024:	f024 0403 	bic.w	r4, r4, #3
 8005028:	42a0      	cmp	r0, r4
 800502a:	d005      	beq.n	8005038 <_malloc_r+0xa8>
 800502c:	1a21      	subs	r1, r4, r0
 800502e:	4630      	mov	r0, r6
 8005030:	f000 f808 	bl	8005044 <_sbrk_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d0cf      	beq.n	8004fd8 <_malloc_r+0x48>
 8005038:	6025      	str	r5, [r4, #0]
 800503a:	e7db      	b.n	8004ff4 <_malloc_r+0x64>
 800503c:	2000396c 	.word	0x2000396c
 8005040:	20003970 	.word	0x20003970

08005044 <_sbrk_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4c06      	ldr	r4, [pc, #24]	; (8005060 <_sbrk_r+0x1c>)
 8005048:	2300      	movs	r3, #0
 800504a:	4605      	mov	r5, r0
 800504c:	4608      	mov	r0, r1
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	f7fc f8a6 	bl	80011a0 <_sbrk>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_sbrk_r+0x1a>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	b103      	cbz	r3, 800505e <_sbrk_r+0x1a>
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	20003978 	.word	0x20003978

08005064 <_raise_r>:
 8005064:	291f      	cmp	r1, #31
 8005066:	b538      	push	{r3, r4, r5, lr}
 8005068:	4604      	mov	r4, r0
 800506a:	460d      	mov	r5, r1
 800506c:	d904      	bls.n	8005078 <_raise_r+0x14>
 800506e:	2316      	movs	r3, #22
 8005070:	6003      	str	r3, [r0, #0]
 8005072:	f04f 30ff 	mov.w	r0, #4294967295
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800507a:	b112      	cbz	r2, 8005082 <_raise_r+0x1e>
 800507c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005080:	b94b      	cbnz	r3, 8005096 <_raise_r+0x32>
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f830 	bl	80050e8 <_getpid_r>
 8005088:	462a      	mov	r2, r5
 800508a:	4601      	mov	r1, r0
 800508c:	4620      	mov	r0, r4
 800508e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005092:	f000 b817 	b.w	80050c4 <_kill_r>
 8005096:	2b01      	cmp	r3, #1
 8005098:	d00a      	beq.n	80050b0 <_raise_r+0x4c>
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	d103      	bne.n	80050a6 <_raise_r+0x42>
 800509e:	2316      	movs	r3, #22
 80050a0:	6003      	str	r3, [r0, #0]
 80050a2:	2001      	movs	r0, #1
 80050a4:	e7e7      	b.n	8005076 <_raise_r+0x12>
 80050a6:	2400      	movs	r4, #0
 80050a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050ac:	4628      	mov	r0, r5
 80050ae:	4798      	blx	r3
 80050b0:	2000      	movs	r0, #0
 80050b2:	e7e0      	b.n	8005076 <_raise_r+0x12>

080050b4 <raise>:
 80050b4:	4b02      	ldr	r3, [pc, #8]	; (80050c0 <raise+0xc>)
 80050b6:	4601      	mov	r1, r0
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	f7ff bfd3 	b.w	8005064 <_raise_r>
 80050be:	bf00      	nop
 80050c0:	20000018 	.word	0x20000018

080050c4 <_kill_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4c07      	ldr	r4, [pc, #28]	; (80050e4 <_kill_r+0x20>)
 80050c8:	2300      	movs	r3, #0
 80050ca:	4605      	mov	r5, r0
 80050cc:	4608      	mov	r0, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	f7fc f84b 	bl	800116c <_kill>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d102      	bne.n	80050e0 <_kill_r+0x1c>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	b103      	cbz	r3, 80050e0 <_kill_r+0x1c>
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	bd38      	pop	{r3, r4, r5, pc}
 80050e2:	bf00      	nop
 80050e4:	20003978 	.word	0x20003978

080050e8 <_getpid_r>:
 80050e8:	f7fc b838 	b.w	800115c <_getpid>

080050ec <_vsniprintf_r>:
 80050ec:	b530      	push	{r4, r5, lr}
 80050ee:	1e14      	subs	r4, r2, #0
 80050f0:	4605      	mov	r5, r0
 80050f2:	b09b      	sub	sp, #108	; 0x6c
 80050f4:	4618      	mov	r0, r3
 80050f6:	da05      	bge.n	8005104 <_vsniprintf_r+0x18>
 80050f8:	238b      	movs	r3, #139	; 0x8b
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	b01b      	add	sp, #108	; 0x6c
 8005102:	bd30      	pop	{r4, r5, pc}
 8005104:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005108:	f8ad 300c 	strh.w	r3, [sp, #12]
 800510c:	bf14      	ite	ne
 800510e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005112:	4623      	moveq	r3, r4
 8005114:	9302      	str	r3, [sp, #8]
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800511c:	9100      	str	r1, [sp, #0]
 800511e:	9104      	str	r1, [sp, #16]
 8005120:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005124:	4602      	mov	r2, r0
 8005126:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005128:	4669      	mov	r1, sp
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f874 	bl	8005218 <_svfiprintf_r>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	bfbc      	itt	lt
 8005134:	238b      	movlt	r3, #139	; 0x8b
 8005136:	602b      	strlt	r3, [r5, #0]
 8005138:	2c00      	cmp	r4, #0
 800513a:	d0e1      	beq.n	8005100 <_vsniprintf_r+0x14>
 800513c:	9b00      	ldr	r3, [sp, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e7dd      	b.n	8005100 <_vsniprintf_r+0x14>

08005144 <vsniprintf>:
 8005144:	b507      	push	{r0, r1, r2, lr}
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	460a      	mov	r2, r1
 800514c:	4601      	mov	r1, r0
 800514e:	4803      	ldr	r0, [pc, #12]	; (800515c <vsniprintf+0x18>)
 8005150:	6800      	ldr	r0, [r0, #0]
 8005152:	f7ff ffcb 	bl	80050ec <_vsniprintf_r>
 8005156:	b003      	add	sp, #12
 8005158:	f85d fb04 	ldr.w	pc, [sp], #4
 800515c:	20000018 	.word	0x20000018

08005160 <__malloc_lock>:
 8005160:	4770      	bx	lr

08005162 <__malloc_unlock>:
 8005162:	4770      	bx	lr

08005164 <__ssputs_r>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	688e      	ldr	r6, [r1, #8]
 800516a:	429e      	cmp	r6, r3
 800516c:	4682      	mov	sl, r0
 800516e:	460c      	mov	r4, r1
 8005170:	4690      	mov	r8, r2
 8005172:	4699      	mov	r9, r3
 8005174:	d837      	bhi.n	80051e6 <__ssputs_r+0x82>
 8005176:	898a      	ldrh	r2, [r1, #12]
 8005178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800517c:	d031      	beq.n	80051e2 <__ssputs_r+0x7e>
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	6909      	ldr	r1, [r1, #16]
 8005182:	1a6f      	subs	r7, r5, r1
 8005184:	6965      	ldr	r5, [r4, #20]
 8005186:	2302      	movs	r3, #2
 8005188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800518c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005190:	f109 0301 	add.w	r3, r9, #1
 8005194:	443b      	add	r3, r7
 8005196:	429d      	cmp	r5, r3
 8005198:	bf38      	it	cc
 800519a:	461d      	movcc	r5, r3
 800519c:	0553      	lsls	r3, r2, #21
 800519e:	d530      	bpl.n	8005202 <__ssputs_r+0x9e>
 80051a0:	4629      	mov	r1, r5
 80051a2:	f7ff fef5 	bl	8004f90 <_malloc_r>
 80051a6:	4606      	mov	r6, r0
 80051a8:	b950      	cbnz	r0, 80051c0 <__ssputs_r+0x5c>
 80051aa:	230c      	movs	r3, #12
 80051ac:	f8ca 3000 	str.w	r3, [sl]
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	463a      	mov	r2, r7
 80051c2:	6921      	ldr	r1, [r4, #16]
 80051c4:	f7ff fe6a 	bl	8004e9c <memcpy>
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	6126      	str	r6, [r4, #16]
 80051d6:	6165      	str	r5, [r4, #20]
 80051d8:	443e      	add	r6, r7
 80051da:	1bed      	subs	r5, r5, r7
 80051dc:	6026      	str	r6, [r4, #0]
 80051de:	60a5      	str	r5, [r4, #8]
 80051e0:	464e      	mov	r6, r9
 80051e2:	454e      	cmp	r6, r9
 80051e4:	d900      	bls.n	80051e8 <__ssputs_r+0x84>
 80051e6:	464e      	mov	r6, r9
 80051e8:	4632      	mov	r2, r6
 80051ea:	4641      	mov	r1, r8
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	f7ff fe60 	bl	8004eb2 <memmove>
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	1b9b      	subs	r3, r3, r6
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	441e      	add	r6, r3
 80051fc:	6026      	str	r6, [r4, #0]
 80051fe:	2000      	movs	r0, #0
 8005200:	e7dc      	b.n	80051bc <__ssputs_r+0x58>
 8005202:	462a      	mov	r2, r5
 8005204:	f000 fa88 	bl	8005718 <_realloc_r>
 8005208:	4606      	mov	r6, r0
 800520a:	2800      	cmp	r0, #0
 800520c:	d1e2      	bne.n	80051d4 <__ssputs_r+0x70>
 800520e:	6921      	ldr	r1, [r4, #16]
 8005210:	4650      	mov	r0, sl
 8005212:	f7ff fe6f 	bl	8004ef4 <_free_r>
 8005216:	e7c8      	b.n	80051aa <__ssputs_r+0x46>

08005218 <_svfiprintf_r>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	461d      	mov	r5, r3
 800521e:	898b      	ldrh	r3, [r1, #12]
 8005220:	061f      	lsls	r7, r3, #24
 8005222:	b09d      	sub	sp, #116	; 0x74
 8005224:	4680      	mov	r8, r0
 8005226:	460c      	mov	r4, r1
 8005228:	4616      	mov	r6, r2
 800522a:	d50f      	bpl.n	800524c <_svfiprintf_r+0x34>
 800522c:	690b      	ldr	r3, [r1, #16]
 800522e:	b96b      	cbnz	r3, 800524c <_svfiprintf_r+0x34>
 8005230:	2140      	movs	r1, #64	; 0x40
 8005232:	f7ff fead 	bl	8004f90 <_malloc_r>
 8005236:	6020      	str	r0, [r4, #0]
 8005238:	6120      	str	r0, [r4, #16]
 800523a:	b928      	cbnz	r0, 8005248 <_svfiprintf_r+0x30>
 800523c:	230c      	movs	r3, #12
 800523e:	f8c8 3000 	str.w	r3, [r8]
 8005242:	f04f 30ff 	mov.w	r0, #4294967295
 8005246:	e0c8      	b.n	80053da <_svfiprintf_r+0x1c2>
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	6163      	str	r3, [r4, #20]
 800524c:	2300      	movs	r3, #0
 800524e:	9309      	str	r3, [sp, #36]	; 0x24
 8005250:	2320      	movs	r3, #32
 8005252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005256:	2330      	movs	r3, #48	; 0x30
 8005258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800525c:	9503      	str	r5, [sp, #12]
 800525e:	f04f 0b01 	mov.w	fp, #1
 8005262:	4637      	mov	r7, r6
 8005264:	463d      	mov	r5, r7
 8005266:	f815 3b01 	ldrb.w	r3, [r5], #1
 800526a:	b10b      	cbz	r3, 8005270 <_svfiprintf_r+0x58>
 800526c:	2b25      	cmp	r3, #37	; 0x25
 800526e:	d13e      	bne.n	80052ee <_svfiprintf_r+0xd6>
 8005270:	ebb7 0a06 	subs.w	sl, r7, r6
 8005274:	d00b      	beq.n	800528e <_svfiprintf_r+0x76>
 8005276:	4653      	mov	r3, sl
 8005278:	4632      	mov	r2, r6
 800527a:	4621      	mov	r1, r4
 800527c:	4640      	mov	r0, r8
 800527e:	f7ff ff71 	bl	8005164 <__ssputs_r>
 8005282:	3001      	adds	r0, #1
 8005284:	f000 80a4 	beq.w	80053d0 <_svfiprintf_r+0x1b8>
 8005288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800528a:	4453      	add	r3, sl
 800528c:	9309      	str	r3, [sp, #36]	; 0x24
 800528e:	783b      	ldrb	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 809d 	beq.w	80053d0 <_svfiprintf_r+0x1b8>
 8005296:	2300      	movs	r3, #0
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
 800529c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a0:	9304      	str	r3, [sp, #16]
 80052a2:	9307      	str	r3, [sp, #28]
 80052a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052a8:	931a      	str	r3, [sp, #104]	; 0x68
 80052aa:	462f      	mov	r7, r5
 80052ac:	2205      	movs	r2, #5
 80052ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80052b2:	4850      	ldr	r0, [pc, #320]	; (80053f4 <_svfiprintf_r+0x1dc>)
 80052b4:	f7fa ffac 	bl	8000210 <memchr>
 80052b8:	9b04      	ldr	r3, [sp, #16]
 80052ba:	b9d0      	cbnz	r0, 80052f2 <_svfiprintf_r+0xda>
 80052bc:	06d9      	lsls	r1, r3, #27
 80052be:	bf44      	itt	mi
 80052c0:	2220      	movmi	r2, #32
 80052c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052c6:	071a      	lsls	r2, r3, #28
 80052c8:	bf44      	itt	mi
 80052ca:	222b      	movmi	r2, #43	; 0x2b
 80052cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052d0:	782a      	ldrb	r2, [r5, #0]
 80052d2:	2a2a      	cmp	r2, #42	; 0x2a
 80052d4:	d015      	beq.n	8005302 <_svfiprintf_r+0xea>
 80052d6:	9a07      	ldr	r2, [sp, #28]
 80052d8:	462f      	mov	r7, r5
 80052da:	2000      	movs	r0, #0
 80052dc:	250a      	movs	r5, #10
 80052de:	4639      	mov	r1, r7
 80052e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e4:	3b30      	subs	r3, #48	; 0x30
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d94d      	bls.n	8005386 <_svfiprintf_r+0x16e>
 80052ea:	b1b8      	cbz	r0, 800531c <_svfiprintf_r+0x104>
 80052ec:	e00f      	b.n	800530e <_svfiprintf_r+0xf6>
 80052ee:	462f      	mov	r7, r5
 80052f0:	e7b8      	b.n	8005264 <_svfiprintf_r+0x4c>
 80052f2:	4a40      	ldr	r2, [pc, #256]	; (80053f4 <_svfiprintf_r+0x1dc>)
 80052f4:	1a80      	subs	r0, r0, r2
 80052f6:	fa0b f000 	lsl.w	r0, fp, r0
 80052fa:	4318      	orrs	r0, r3
 80052fc:	9004      	str	r0, [sp, #16]
 80052fe:	463d      	mov	r5, r7
 8005300:	e7d3      	b.n	80052aa <_svfiprintf_r+0x92>
 8005302:	9a03      	ldr	r2, [sp, #12]
 8005304:	1d11      	adds	r1, r2, #4
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	9103      	str	r1, [sp, #12]
 800530a:	2a00      	cmp	r2, #0
 800530c:	db01      	blt.n	8005312 <_svfiprintf_r+0xfa>
 800530e:	9207      	str	r2, [sp, #28]
 8005310:	e004      	b.n	800531c <_svfiprintf_r+0x104>
 8005312:	4252      	negs	r2, r2
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	9207      	str	r2, [sp, #28]
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	783b      	ldrb	r3, [r7, #0]
 800531e:	2b2e      	cmp	r3, #46	; 0x2e
 8005320:	d10c      	bne.n	800533c <_svfiprintf_r+0x124>
 8005322:	787b      	ldrb	r3, [r7, #1]
 8005324:	2b2a      	cmp	r3, #42	; 0x2a
 8005326:	d133      	bne.n	8005390 <_svfiprintf_r+0x178>
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	9203      	str	r2, [sp, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	bfb8      	it	lt
 8005334:	f04f 33ff 	movlt.w	r3, #4294967295
 8005338:	3702      	adds	r7, #2
 800533a:	9305      	str	r3, [sp, #20]
 800533c:	4d2e      	ldr	r5, [pc, #184]	; (80053f8 <_svfiprintf_r+0x1e0>)
 800533e:	7839      	ldrb	r1, [r7, #0]
 8005340:	2203      	movs	r2, #3
 8005342:	4628      	mov	r0, r5
 8005344:	f7fa ff64 	bl	8000210 <memchr>
 8005348:	b138      	cbz	r0, 800535a <_svfiprintf_r+0x142>
 800534a:	2340      	movs	r3, #64	; 0x40
 800534c:	1b40      	subs	r0, r0, r5
 800534e:	fa03 f000 	lsl.w	r0, r3, r0
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	4303      	orrs	r3, r0
 8005356:	3701      	adds	r7, #1
 8005358:	9304      	str	r3, [sp, #16]
 800535a:	7839      	ldrb	r1, [r7, #0]
 800535c:	4827      	ldr	r0, [pc, #156]	; (80053fc <_svfiprintf_r+0x1e4>)
 800535e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005362:	2206      	movs	r2, #6
 8005364:	1c7e      	adds	r6, r7, #1
 8005366:	f7fa ff53 	bl	8000210 <memchr>
 800536a:	2800      	cmp	r0, #0
 800536c:	d038      	beq.n	80053e0 <_svfiprintf_r+0x1c8>
 800536e:	4b24      	ldr	r3, [pc, #144]	; (8005400 <_svfiprintf_r+0x1e8>)
 8005370:	bb13      	cbnz	r3, 80053b8 <_svfiprintf_r+0x1a0>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	3307      	adds	r3, #7
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	3308      	adds	r3, #8
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	444b      	add	r3, r9
 8005382:	9309      	str	r3, [sp, #36]	; 0x24
 8005384:	e76d      	b.n	8005262 <_svfiprintf_r+0x4a>
 8005386:	fb05 3202 	mla	r2, r5, r2, r3
 800538a:	2001      	movs	r0, #1
 800538c:	460f      	mov	r7, r1
 800538e:	e7a6      	b.n	80052de <_svfiprintf_r+0xc6>
 8005390:	2300      	movs	r3, #0
 8005392:	3701      	adds	r7, #1
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	4619      	mov	r1, r3
 8005398:	250a      	movs	r5, #10
 800539a:	4638      	mov	r0, r7
 800539c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a0:	3a30      	subs	r2, #48	; 0x30
 80053a2:	2a09      	cmp	r2, #9
 80053a4:	d903      	bls.n	80053ae <_svfiprintf_r+0x196>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0c8      	beq.n	800533c <_svfiprintf_r+0x124>
 80053aa:	9105      	str	r1, [sp, #20]
 80053ac:	e7c6      	b.n	800533c <_svfiprintf_r+0x124>
 80053ae:	fb05 2101 	mla	r1, r5, r1, r2
 80053b2:	2301      	movs	r3, #1
 80053b4:	4607      	mov	r7, r0
 80053b6:	e7f0      	b.n	800539a <_svfiprintf_r+0x182>
 80053b8:	ab03      	add	r3, sp, #12
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	4622      	mov	r2, r4
 80053be:	4b11      	ldr	r3, [pc, #68]	; (8005404 <_svfiprintf_r+0x1ec>)
 80053c0:	a904      	add	r1, sp, #16
 80053c2:	4640      	mov	r0, r8
 80053c4:	f3af 8000 	nop.w
 80053c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053cc:	4681      	mov	r9, r0
 80053ce:	d1d6      	bne.n	800537e <_svfiprintf_r+0x166>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	065b      	lsls	r3, r3, #25
 80053d4:	f53f af35 	bmi.w	8005242 <_svfiprintf_r+0x2a>
 80053d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053da:	b01d      	add	sp, #116	; 0x74
 80053dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e0:	ab03      	add	r3, sp, #12
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	4622      	mov	r2, r4
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <_svfiprintf_r+0x1ec>)
 80053e8:	a904      	add	r1, sp, #16
 80053ea:	4640      	mov	r0, r8
 80053ec:	f000 f882 	bl	80054f4 <_printf_i>
 80053f0:	e7ea      	b.n	80053c8 <_svfiprintf_r+0x1b0>
 80053f2:	bf00      	nop
 80053f4:	08005d3a 	.word	0x08005d3a
 80053f8:	08005d40 	.word	0x08005d40
 80053fc:	08005d44 	.word	0x08005d44
 8005400:	00000000 	.word	0x00000000
 8005404:	08005165 	.word	0x08005165

08005408 <_printf_common>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	4691      	mov	r9, r2
 800540e:	461f      	mov	r7, r3
 8005410:	688a      	ldr	r2, [r1, #8]
 8005412:	690b      	ldr	r3, [r1, #16]
 8005414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005418:	4293      	cmp	r3, r2
 800541a:	bfb8      	it	lt
 800541c:	4613      	movlt	r3, r2
 800541e:	f8c9 3000 	str.w	r3, [r9]
 8005422:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005426:	4606      	mov	r6, r0
 8005428:	460c      	mov	r4, r1
 800542a:	b112      	cbz	r2, 8005432 <_printf_common+0x2a>
 800542c:	3301      	adds	r3, #1
 800542e:	f8c9 3000 	str.w	r3, [r9]
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	0699      	lsls	r1, r3, #26
 8005436:	bf42      	ittt	mi
 8005438:	f8d9 3000 	ldrmi.w	r3, [r9]
 800543c:	3302      	addmi	r3, #2
 800543e:	f8c9 3000 	strmi.w	r3, [r9]
 8005442:	6825      	ldr	r5, [r4, #0]
 8005444:	f015 0506 	ands.w	r5, r5, #6
 8005448:	d107      	bne.n	800545a <_printf_common+0x52>
 800544a:	f104 0a19 	add.w	sl, r4, #25
 800544e:	68e3      	ldr	r3, [r4, #12]
 8005450:	f8d9 2000 	ldr.w	r2, [r9]
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	42ab      	cmp	r3, r5
 8005458:	dc28      	bgt.n	80054ac <_printf_common+0xa4>
 800545a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	3300      	adds	r3, #0
 8005462:	bf18      	it	ne
 8005464:	2301      	movne	r3, #1
 8005466:	0692      	lsls	r2, r2, #26
 8005468:	d42d      	bmi.n	80054c6 <_printf_common+0xbe>
 800546a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800546e:	4639      	mov	r1, r7
 8005470:	4630      	mov	r0, r6
 8005472:	47c0      	blx	r8
 8005474:	3001      	adds	r0, #1
 8005476:	d020      	beq.n	80054ba <_printf_common+0xb2>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	68e5      	ldr	r5, [r4, #12]
 800547c:	f8d9 2000 	ldr.w	r2, [r9]
 8005480:	f003 0306 	and.w	r3, r3, #6
 8005484:	2b04      	cmp	r3, #4
 8005486:	bf08      	it	eq
 8005488:	1aad      	subeq	r5, r5, r2
 800548a:	68a3      	ldr	r3, [r4, #8]
 800548c:	6922      	ldr	r2, [r4, #16]
 800548e:	bf0c      	ite	eq
 8005490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005494:	2500      	movne	r5, #0
 8005496:	4293      	cmp	r3, r2
 8005498:	bfc4      	itt	gt
 800549a:	1a9b      	subgt	r3, r3, r2
 800549c:	18ed      	addgt	r5, r5, r3
 800549e:	f04f 0900 	mov.w	r9, #0
 80054a2:	341a      	adds	r4, #26
 80054a4:	454d      	cmp	r5, r9
 80054a6:	d11a      	bne.n	80054de <_printf_common+0xd6>
 80054a8:	2000      	movs	r0, #0
 80054aa:	e008      	b.n	80054be <_printf_common+0xb6>
 80054ac:	2301      	movs	r3, #1
 80054ae:	4652      	mov	r2, sl
 80054b0:	4639      	mov	r1, r7
 80054b2:	4630      	mov	r0, r6
 80054b4:	47c0      	blx	r8
 80054b6:	3001      	adds	r0, #1
 80054b8:	d103      	bne.n	80054c2 <_printf_common+0xba>
 80054ba:	f04f 30ff 	mov.w	r0, #4294967295
 80054be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c2:	3501      	adds	r5, #1
 80054c4:	e7c3      	b.n	800544e <_printf_common+0x46>
 80054c6:	18e1      	adds	r1, r4, r3
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	2030      	movs	r0, #48	; 0x30
 80054cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054d0:	4422      	add	r2, r4
 80054d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054da:	3302      	adds	r3, #2
 80054dc:	e7c5      	b.n	800546a <_printf_common+0x62>
 80054de:	2301      	movs	r3, #1
 80054e0:	4622      	mov	r2, r4
 80054e2:	4639      	mov	r1, r7
 80054e4:	4630      	mov	r0, r6
 80054e6:	47c0      	blx	r8
 80054e8:	3001      	adds	r0, #1
 80054ea:	d0e6      	beq.n	80054ba <_printf_common+0xb2>
 80054ec:	f109 0901 	add.w	r9, r9, #1
 80054f0:	e7d8      	b.n	80054a4 <_printf_common+0x9c>
	...

080054f4 <_printf_i>:
 80054f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054fc:	460c      	mov	r4, r1
 80054fe:	7e09      	ldrb	r1, [r1, #24]
 8005500:	b085      	sub	sp, #20
 8005502:	296e      	cmp	r1, #110	; 0x6e
 8005504:	4617      	mov	r7, r2
 8005506:	4606      	mov	r6, r0
 8005508:	4698      	mov	r8, r3
 800550a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800550c:	f000 80b3 	beq.w	8005676 <_printf_i+0x182>
 8005510:	d822      	bhi.n	8005558 <_printf_i+0x64>
 8005512:	2963      	cmp	r1, #99	; 0x63
 8005514:	d036      	beq.n	8005584 <_printf_i+0x90>
 8005516:	d80a      	bhi.n	800552e <_printf_i+0x3a>
 8005518:	2900      	cmp	r1, #0
 800551a:	f000 80b9 	beq.w	8005690 <_printf_i+0x19c>
 800551e:	2958      	cmp	r1, #88	; 0x58
 8005520:	f000 8083 	beq.w	800562a <_printf_i+0x136>
 8005524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005528:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800552c:	e032      	b.n	8005594 <_printf_i+0xa0>
 800552e:	2964      	cmp	r1, #100	; 0x64
 8005530:	d001      	beq.n	8005536 <_printf_i+0x42>
 8005532:	2969      	cmp	r1, #105	; 0x69
 8005534:	d1f6      	bne.n	8005524 <_printf_i+0x30>
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	6813      	ldr	r3, [r2, #0]
 800553a:	0605      	lsls	r5, r0, #24
 800553c:	f103 0104 	add.w	r1, r3, #4
 8005540:	d52a      	bpl.n	8005598 <_printf_i+0xa4>
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	da03      	bge.n	8005552 <_printf_i+0x5e>
 800554a:	222d      	movs	r2, #45	; 0x2d
 800554c:	425b      	negs	r3, r3
 800554e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005552:	486f      	ldr	r0, [pc, #444]	; (8005710 <_printf_i+0x21c>)
 8005554:	220a      	movs	r2, #10
 8005556:	e039      	b.n	80055cc <_printf_i+0xd8>
 8005558:	2973      	cmp	r1, #115	; 0x73
 800555a:	f000 809d 	beq.w	8005698 <_printf_i+0x1a4>
 800555e:	d808      	bhi.n	8005572 <_printf_i+0x7e>
 8005560:	296f      	cmp	r1, #111	; 0x6f
 8005562:	d020      	beq.n	80055a6 <_printf_i+0xb2>
 8005564:	2970      	cmp	r1, #112	; 0x70
 8005566:	d1dd      	bne.n	8005524 <_printf_i+0x30>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f043 0320 	orr.w	r3, r3, #32
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	e003      	b.n	800557a <_printf_i+0x86>
 8005572:	2975      	cmp	r1, #117	; 0x75
 8005574:	d017      	beq.n	80055a6 <_printf_i+0xb2>
 8005576:	2978      	cmp	r1, #120	; 0x78
 8005578:	d1d4      	bne.n	8005524 <_printf_i+0x30>
 800557a:	2378      	movs	r3, #120	; 0x78
 800557c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005580:	4864      	ldr	r0, [pc, #400]	; (8005714 <_printf_i+0x220>)
 8005582:	e055      	b.n	8005630 <_printf_i+0x13c>
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	1d19      	adds	r1, r3, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6011      	str	r1, [r2, #0]
 800558c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005594:	2301      	movs	r3, #1
 8005596:	e08c      	b.n	80056b2 <_printf_i+0x1be>
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6011      	str	r1, [r2, #0]
 800559c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055a0:	bf18      	it	ne
 80055a2:	b21b      	sxthne	r3, r3
 80055a4:	e7cf      	b.n	8005546 <_printf_i+0x52>
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	6825      	ldr	r5, [r4, #0]
 80055aa:	1d18      	adds	r0, r3, #4
 80055ac:	6010      	str	r0, [r2, #0]
 80055ae:	0628      	lsls	r0, r5, #24
 80055b0:	d501      	bpl.n	80055b6 <_printf_i+0xc2>
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	e002      	b.n	80055bc <_printf_i+0xc8>
 80055b6:	0668      	lsls	r0, r5, #25
 80055b8:	d5fb      	bpl.n	80055b2 <_printf_i+0xbe>
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	4854      	ldr	r0, [pc, #336]	; (8005710 <_printf_i+0x21c>)
 80055be:	296f      	cmp	r1, #111	; 0x6f
 80055c0:	bf14      	ite	ne
 80055c2:	220a      	movne	r2, #10
 80055c4:	2208      	moveq	r2, #8
 80055c6:	2100      	movs	r1, #0
 80055c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055cc:	6865      	ldr	r5, [r4, #4]
 80055ce:	60a5      	str	r5, [r4, #8]
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	f2c0 8095 	blt.w	8005700 <_printf_i+0x20c>
 80055d6:	6821      	ldr	r1, [r4, #0]
 80055d8:	f021 0104 	bic.w	r1, r1, #4
 80055dc:	6021      	str	r1, [r4, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d13d      	bne.n	800565e <_printf_i+0x16a>
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	f040 808e 	bne.w	8005704 <_printf_i+0x210>
 80055e8:	4665      	mov	r5, ip
 80055ea:	2a08      	cmp	r2, #8
 80055ec:	d10b      	bne.n	8005606 <_printf_i+0x112>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	07db      	lsls	r3, r3, #31
 80055f2:	d508      	bpl.n	8005606 <_printf_i+0x112>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	bfde      	ittt	le
 80055fc:	2330      	movle	r3, #48	; 0x30
 80055fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005602:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005606:	ebac 0305 	sub.w	r3, ip, r5
 800560a:	6123      	str	r3, [r4, #16]
 800560c:	f8cd 8000 	str.w	r8, [sp]
 8005610:	463b      	mov	r3, r7
 8005612:	aa03      	add	r2, sp, #12
 8005614:	4621      	mov	r1, r4
 8005616:	4630      	mov	r0, r6
 8005618:	f7ff fef6 	bl	8005408 <_printf_common>
 800561c:	3001      	adds	r0, #1
 800561e:	d14d      	bne.n	80056bc <_printf_i+0x1c8>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	b005      	add	sp, #20
 8005626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800562a:	4839      	ldr	r0, [pc, #228]	; (8005710 <_printf_i+0x21c>)
 800562c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005630:	6813      	ldr	r3, [r2, #0]
 8005632:	6821      	ldr	r1, [r4, #0]
 8005634:	1d1d      	adds	r5, r3, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6015      	str	r5, [r2, #0]
 800563a:	060a      	lsls	r2, r1, #24
 800563c:	d50b      	bpl.n	8005656 <_printf_i+0x162>
 800563e:	07ca      	lsls	r2, r1, #31
 8005640:	bf44      	itt	mi
 8005642:	f041 0120 	orrmi.w	r1, r1, #32
 8005646:	6021      	strmi	r1, [r4, #0]
 8005648:	b91b      	cbnz	r3, 8005652 <_printf_i+0x15e>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	f022 0220 	bic.w	r2, r2, #32
 8005650:	6022      	str	r2, [r4, #0]
 8005652:	2210      	movs	r2, #16
 8005654:	e7b7      	b.n	80055c6 <_printf_i+0xd2>
 8005656:	064d      	lsls	r5, r1, #25
 8005658:	bf48      	it	mi
 800565a:	b29b      	uxthmi	r3, r3
 800565c:	e7ef      	b.n	800563e <_printf_i+0x14a>
 800565e:	4665      	mov	r5, ip
 8005660:	fbb3 f1f2 	udiv	r1, r3, r2
 8005664:	fb02 3311 	mls	r3, r2, r1, r3
 8005668:	5cc3      	ldrb	r3, [r0, r3]
 800566a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800566e:	460b      	mov	r3, r1
 8005670:	2900      	cmp	r1, #0
 8005672:	d1f5      	bne.n	8005660 <_printf_i+0x16c>
 8005674:	e7b9      	b.n	80055ea <_printf_i+0xf6>
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	6961      	ldr	r1, [r4, #20]
 800567c:	1d18      	adds	r0, r3, #4
 800567e:	6010      	str	r0, [r2, #0]
 8005680:	0628      	lsls	r0, r5, #24
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	d501      	bpl.n	800568a <_printf_i+0x196>
 8005686:	6019      	str	r1, [r3, #0]
 8005688:	e002      	b.n	8005690 <_printf_i+0x19c>
 800568a:	066a      	lsls	r2, r5, #25
 800568c:	d5fb      	bpl.n	8005686 <_printf_i+0x192>
 800568e:	8019      	strh	r1, [r3, #0]
 8005690:	2300      	movs	r3, #0
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	4665      	mov	r5, ip
 8005696:	e7b9      	b.n	800560c <_printf_i+0x118>
 8005698:	6813      	ldr	r3, [r2, #0]
 800569a:	1d19      	adds	r1, r3, #4
 800569c:	6011      	str	r1, [r2, #0]
 800569e:	681d      	ldr	r5, [r3, #0]
 80056a0:	6862      	ldr	r2, [r4, #4]
 80056a2:	2100      	movs	r1, #0
 80056a4:	4628      	mov	r0, r5
 80056a6:	f7fa fdb3 	bl	8000210 <memchr>
 80056aa:	b108      	cbz	r0, 80056b0 <_printf_i+0x1bc>
 80056ac:	1b40      	subs	r0, r0, r5
 80056ae:	6060      	str	r0, [r4, #4]
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	2300      	movs	r3, #0
 80056b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ba:	e7a7      	b.n	800560c <_printf_i+0x118>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	462a      	mov	r2, r5
 80056c0:	4639      	mov	r1, r7
 80056c2:	4630      	mov	r0, r6
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d0aa      	beq.n	8005620 <_printf_i+0x12c>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	079b      	lsls	r3, r3, #30
 80056ce:	d413      	bmi.n	80056f8 <_printf_i+0x204>
 80056d0:	68e0      	ldr	r0, [r4, #12]
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	4298      	cmp	r0, r3
 80056d6:	bfb8      	it	lt
 80056d8:	4618      	movlt	r0, r3
 80056da:	e7a3      	b.n	8005624 <_printf_i+0x130>
 80056dc:	2301      	movs	r3, #1
 80056de:	464a      	mov	r2, r9
 80056e0:	4639      	mov	r1, r7
 80056e2:	4630      	mov	r0, r6
 80056e4:	47c0      	blx	r8
 80056e6:	3001      	adds	r0, #1
 80056e8:	d09a      	beq.n	8005620 <_printf_i+0x12c>
 80056ea:	3501      	adds	r5, #1
 80056ec:	68e3      	ldr	r3, [r4, #12]
 80056ee:	9a03      	ldr	r2, [sp, #12]
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	42ab      	cmp	r3, r5
 80056f4:	dcf2      	bgt.n	80056dc <_printf_i+0x1e8>
 80056f6:	e7eb      	b.n	80056d0 <_printf_i+0x1dc>
 80056f8:	2500      	movs	r5, #0
 80056fa:	f104 0919 	add.w	r9, r4, #25
 80056fe:	e7f5      	b.n	80056ec <_printf_i+0x1f8>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ac      	bne.n	800565e <_printf_i+0x16a>
 8005704:	7803      	ldrb	r3, [r0, #0]
 8005706:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800570a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800570e:	e76c      	b.n	80055ea <_printf_i+0xf6>
 8005710:	08005d4b 	.word	0x08005d4b
 8005714:	08005d5c 	.word	0x08005d5c

08005718 <_realloc_r>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	4607      	mov	r7, r0
 800571c:	4614      	mov	r4, r2
 800571e:	460e      	mov	r6, r1
 8005720:	b921      	cbnz	r1, 800572c <_realloc_r+0x14>
 8005722:	4611      	mov	r1, r2
 8005724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005728:	f7ff bc32 	b.w	8004f90 <_malloc_r>
 800572c:	b922      	cbnz	r2, 8005738 <_realloc_r+0x20>
 800572e:	f7ff fbe1 	bl	8004ef4 <_free_r>
 8005732:	4625      	mov	r5, r4
 8005734:	4628      	mov	r0, r5
 8005736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005738:	f000 f814 	bl	8005764 <_malloc_usable_size_r>
 800573c:	42a0      	cmp	r0, r4
 800573e:	d20f      	bcs.n	8005760 <_realloc_r+0x48>
 8005740:	4621      	mov	r1, r4
 8005742:	4638      	mov	r0, r7
 8005744:	f7ff fc24 	bl	8004f90 <_malloc_r>
 8005748:	4605      	mov	r5, r0
 800574a:	2800      	cmp	r0, #0
 800574c:	d0f2      	beq.n	8005734 <_realloc_r+0x1c>
 800574e:	4631      	mov	r1, r6
 8005750:	4622      	mov	r2, r4
 8005752:	f7ff fba3 	bl	8004e9c <memcpy>
 8005756:	4631      	mov	r1, r6
 8005758:	4638      	mov	r0, r7
 800575a:	f7ff fbcb 	bl	8004ef4 <_free_r>
 800575e:	e7e9      	b.n	8005734 <_realloc_r+0x1c>
 8005760:	4635      	mov	r5, r6
 8005762:	e7e7      	b.n	8005734 <_realloc_r+0x1c>

08005764 <_malloc_usable_size_r>:
 8005764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005768:	1f18      	subs	r0, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfbc      	itt	lt
 800576e:	580b      	ldrlt	r3, [r1, r0]
 8005770:	18c0      	addlt	r0, r0, r3
 8005772:	4770      	bx	lr

08005774 <_init>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr

08005780 <_fini>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr
