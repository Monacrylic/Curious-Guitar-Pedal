
Curious_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005548  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c94  08005c94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c9c  08005c9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a23c  20000070  08005d1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a2ac  08005d1c  0002a2ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e60b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034d7  00000000  00000000  0003e6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  00041b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00042ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028552  00000000  00000000  00044110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001016d  00000000  00000000  0006c662  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e34ab  00000000  00000000  0007c7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fc7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000696c  00000000  00000000  0015fcf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080056f4 	.word	0x080056f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	080056f4 	.word	0x080056f4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
OLED OLED1;

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
//First half of ADC buffer is now full
	inBufPtr =&adc_val[0];
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000520:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[DATA_SIZE];
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	2000827c 	.word	0x2000827c
 8000538:	2000027c 	.word	0x2000027c
 800053c:	20008280 	.word	0x20008280
 8000540:	2000627c 	.word	0x2000627c

08000544 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

	inBufPtr =&adc_val[DATA_SIZE];
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_ADC_ConvCpltCallback+0x20>)
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_ADC_ConvCpltCallback+0x24>)
 8000550:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[0];
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_ADC_ConvCpltCallback+0x28>)
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	2000827c 	.word	0x2000827c
 8000568:	2000227c 	.word	0x2000227c
 800056c:	20008280 	.word	0x20008280
 8000570:	2000427c 	.word	0x2000427c

08000574 <_Z10effectsDSPv>:

void effectsDSP(){
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0

	for (int n=0; n< DATA_SIZE; n++){
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000584:	da0f      	bge.n	80005a6 <_Z10effectsDSPv+0x32>
		outBufPtr[n]=inBufPtr[n];
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <_Z10effectsDSPv+0x40>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	441a      	add	r2, r3
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <_Z10effectsDSPv+0x44>)
 8000592:	6819      	ldr	r1, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	440b      	add	r3, r1
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	601a      	str	r2, [r3, #0]
	for (int n=0; n< DATA_SIZE; n++){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	e7eb      	b.n	800057e <_Z10effectsDSPv+0xa>
	}
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000827c 	.word	0x2000827c
 80005b8:	20008280 	.word	0x20008280

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b092      	sub	sp, #72	; 0x48
 80005c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fe09 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f8c7 	bl	8000758 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fac1 	bl	8000b50 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80005ce:	f000 fa89 	bl	8000ae4 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80005d2:	f000 fa59 	bl	8000a88 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80005d6:	f000 f9c7 	bl	8000968 <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 80005da:	f000 f935 	bl	8000848 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 80005de:	f000 f98f 	bl	8000900 <_ZL11MX_DAC_Initv>
  MX_TIM2_Init();
 80005e2:	f000 f9f5 	bl	80009d0 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80005e6:	4850      	ldr	r0, [pc, #320]	; (8000728 <main+0x16c>)
 80005e8:	f003 fd31 	bl	800404e <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, FULL_BUFFER_SIZE);
 80005ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f0:	494e      	ldr	r1, [pc, #312]	; (800072c <main+0x170>)
 80005f2:	484f      	ldr	r0, [pc, #316]	; (8000730 <main+0x174>)
 80005f4:	f000 fec8 	bl	8001388 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*) dac_val, FULL_BUFFER_SIZE, DAC_ALIGN_12B_R);
 80005f8:	2300      	movs	r3, #0
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	4a4c      	ldr	r2, [pc, #304]	; (8000734 <main+0x178>)
 8000602:	2100      	movs	r1, #0
 8000604:	484c      	ldr	r0, [pc, #304]	; (8000738 <main+0x17c>)
 8000606:	f001 fb9f 	bl	8001d48 <HAL_DAC_Start_DMA>
  /*-----------------ADC AND DAC START------------------------*/

  /*-----------------SECTION_END------------------------------*/

  if(HAL_I2C_IsDeviceReady(&hi2c1, OLED1.getCAddress(), 1, 10)== HAL_OK){
 800060a:	484c      	ldr	r0, [pc, #304]	; (800073c <main+0x180>)
 800060c:	f004 fcba 	bl	8004f84 <_ZN4OLED11getCAddressEv>
 8000610:	4603      	mov	r3, r0
 8000612:	b299      	uxth	r1, r3
 8000614:	230a      	movs	r3, #10
 8000616:	2201      	movs	r2, #1
 8000618:	4849      	ldr	r0, [pc, #292]	; (8000740 <main+0x184>)
 800061a:	f002 fca1 	bl	8002f60 <HAL_I2C_IsDeviceReady>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf0c      	ite	eq
 8000624:	2301      	moveq	r3, #1
 8000626:	2300      	movne	r3, #0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <main+0x7c>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2120      	movs	r1, #32
 8000632:	4844      	ldr	r0, [pc, #272]	; (8000744 <main+0x188>)
 8000634:	f002 fa44 	bl	8002ac0 <HAL_GPIO_WritePin>
  }

  OLED1.init(&hi2c1);
 8000638:	4941      	ldr	r1, [pc, #260]	; (8000740 <main+0x184>)
 800063a:	4840      	ldr	r0, [pc, #256]	; (800073c <main+0x180>)
 800063c:	f004 fb9d 	bl	8004d7a <_ZN4OLED4initEP19__I2C_HandleTypeDef>

  HAL_Delay(200);
 8000640:	20c8      	movs	r0, #200	; 0xc8
 8000642:	f000 fe3b 	bl	80012bc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
 8000646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064a:	483f      	ldr	r0, [pc, #252]	; (8000748 <main+0x18c>)
 800064c:	f002 fa20 	bl	8002a90 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf0c      	ite	eq
 8000656:	2301      	moveq	r3, #1
 8000658:	2300      	movne	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d060      	beq.n	8000722 <main+0x166>

	  OLED1.fill(0);
 8000660:	2100      	movs	r1, #0
 8000662:	4836      	ldr	r0, [pc, #216]	; (800073c <main+0x180>)
 8000664:	f004 fcd5 	bl	8005012 <_ZN4OLED4fillEb>
	  if(effectno== true){
 8000668:	4b38      	ldr	r3, [pc, #224]	; (800074c <main+0x190>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d022      	beq.n	80006b6 <main+0xfa>
	  OLED1.text(0,20, "Distortion", 1, 0, 2);
 8000670:	f107 0318 	add.w	r3, r7, #24
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fe4d 	bl	8005314 <_ZNSaIcEC1Ev>
 800067a:	f107 0218 	add.w	r2, r7, #24
 800067e:	463b      	mov	r3, r7
 8000680:	4933      	ldr	r1, [pc, #204]	; (8000750 <main+0x194>)
 8000682:	4618      	mov	r0, r3
 8000684:	f004 feac 	bl	80053e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000688:	463a      	mov	r2, r7
 800068a:	2302      	movs	r3, #2
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4613      	mov	r3, r2
 8000698:	2214      	movs	r2, #20
 800069a:	2100      	movs	r1, #0
 800069c:	4827      	ldr	r0, [pc, #156]	; (800073c <main+0x180>)
 800069e:	f004 fdf7 	bl	8005290 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 80006a2:	463b      	mov	r3, r7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fe6b 	bl	8005380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fe31 	bl	8005316 <_ZNSaIcED1Ev>
 80006b4:	e02b      	b.n	800070e <main+0x152>
	  }
	  else if(effectno ==false){
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <main+0x190>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f083 0301 	eor.w	r3, r3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d024      	beq.n	800070e <main+0x152>
	  OLED1.text(0,20, "Clean", 1, 0, 2);
 80006c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fe23 	bl	8005314 <_ZNSaIcEC1Ev>
 80006ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	491f      	ldr	r1, [pc, #124]	; (8000754 <main+0x198>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 fe81 	bl	80053e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006de:	f107 021c 	add.w	r2, r7, #28
 80006e2:	2302      	movs	r3, #2
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2300      	movs	r3, #0
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2301      	movs	r3, #1
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	4613      	mov	r3, r2
 80006f0:	2214      	movs	r2, #20
 80006f2:	2100      	movs	r1, #0
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <main+0x180>)
 80006f6:	f004 fdcb 	bl	8005290 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fe3e 	bl	8005380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fe04 	bl	8005316 <_ZNSaIcED1Ev>
	  }
	  effectno = !effectno;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <main+0x190>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <main+0x190>)
 800071a:	701a      	strb	r2, [r3, #0]
	  OLED1.drawFullscreen();
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <main+0x180>)
 800071e:	f004 fbe3 	bl	8004ee8 <_ZN4OLED14drawFullscreenEv>
}
effectsDSP();
 8000722:	f7ff ff27 	bl	8000574 <_Z10effectsDSPv>
if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
 8000726:	e78e      	b.n	8000646 <main+0x8a>
 8000728:	200001fc 	.word	0x200001fc
 800072c:	2000027c 	.word	0x2000027c
 8000730:	2000008c 	.word	0x2000008c
 8000734:	2000427c 	.word	0x2000427c
 8000738:	20000134 	.word	0x20000134
 800073c:	20008288 	.word	0x20008288
 8000740:	200001a8 	.word	0x200001a8
 8000744:	40020000 	.word	0x40020000
 8000748:	40020800 	.word	0x40020800
 800074c:	20008284 	.word	0x20008284
 8000750:	0800570c 	.word	0x0800570c
 8000754:	08005718 	.word	0x08005718

08000758 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 febd 	bl	80054e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <_Z18SystemClock_Configv+0xe8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <_Z18SystemClock_Configv+0xe8>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <_Z18SystemClock_Configv+0xe8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <_Z18SystemClock_Configv+0xec>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <_Z18SystemClock_Configv+0xec>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <_Z18SystemClock_Configv+0xec>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007d0:	2348      	movs	r3, #72	; 0x48
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 f9ad 	bl	8003b44 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80007fa:	f000 fa19 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2102      	movs	r1, #2
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fed7 	bl	80035d0 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf14      	ite	ne
 8000828:	2301      	movne	r3, #1
 800082a:	2300      	moveq	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000832:	f000 f9fd 	bl	8000c30 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 800085c:	4a27      	ldr	r2, [pc, #156]	; (80008fc <_ZL12MX_ADC1_Initv+0xb4>)
 800085e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000874:	2200      	movs	r2, #0
 8000876:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 800088a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000898:	2201      	movs	r2, #1
 800089a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 800089e:	2201      	movs	r2, #1
 80008a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 80008ac:	f000 fd28 	bl	8001300 <HAL_ADC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <_ZL12MX_ADC1_Initv+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f9b6 	bl	8000c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4808      	ldr	r0, [pc, #32]	; (80008f8 <_ZL12MX_ADC1_Initv+0xb0>)
 80008d6:	f000 fe53 	bl	8001580 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 80008ea:	f000 f9a1 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	40012000 	.word	0x40012000

08000900 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <_ZL11MX_DAC_Initv+0x60>)
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_ZL11MX_DAC_Initv+0x64>)
 8000912:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <_ZL11MX_DAC_Initv+0x60>)
 8000916:	f001 f9f4 	bl	8001d02 <HAL_DAC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	bf14      	ite	ne
 8000920:	2301      	movne	r3, #1
 8000922:	2300      	moveq	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 800092a:	f000 f981 	bl	8000c30 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800092e:	2324      	movs	r3, #36	; 0x24
 8000930:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	4619      	mov	r1, r3
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <_ZL11MX_DAC_Initv+0x60>)
 800093e:	f001 facf 	bl	8001ee0 <HAL_DAC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 8000952:	f000 f96d 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000134 	.word	0x20000134
 8000964:	40007400 	.word	0x40007400

08000968 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <_ZL12MX_I2C1_Initv+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <_ZL12MX_I2C1_Initv+0x64>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a4:	4807      	ldr	r0, [pc, #28]	; (80009c4 <_ZL12MX_I2C1_Initv+0x5c>)
 80009a6:	f002 f8a5 	bl	8002af4 <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80009ba:	f000 f939 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001a8 	.word	0x200001a8
 80009c8:	40005400 	.word	0x40005400
 80009cc:	00061a80 	.word	0x00061a80

080009d0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 80009ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1439;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a02:	f240 529f 	movw	r2, #1439	; 0x59f
 8000a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a14:	481b      	ldr	r0, [pc, #108]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a16:	f003 faef 	bl	8003ff8 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000a2a:	f000 f901 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a3c:	f003 fb2b 	bl	8004096 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf14      	ite	ne
 8000a46:	2301      	movne	r3, #1
 8000a48:	2300      	moveq	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000a50:	f000 f8ee 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a54:	2320      	movs	r3, #32
 8000a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <_ZL12MX_TIM2_Initv+0xb4>)
 8000a62:	f003 fd09 	bl	8004478 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000a76:	f000 f8db 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200001fc 	.word	0x200001fc

08000a88 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac0:	f003 fd56 	bl	8004570 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000ad4:	f000 f8ac 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000023c 	.word	0x2000023c
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <_ZL11MX_DMA_Initv+0x68>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <_ZL11MX_DMA_Initv+0x68>)
 8000af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <_ZL11MX_DMA_Initv+0x68>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_ZL11MX_DMA_Initv+0x68>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <_ZL11MX_DMA_Initv+0x68>)
 8000b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <_ZL11MX_DMA_Initv+0x68>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2010      	movs	r0, #16
 8000b28:	f001 f8b5 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	f001 f8ce 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2038      	movs	r0, #56	; 0x38
 8000b38:	f001 f8ad 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b3c:	2038      	movs	r0, #56	; 0x38
 8000b3e:	f001 f8c6 	bl	8001cce <HAL_NVIC_EnableIRQ>

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a2c      	ldr	r2, [pc, #176]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_ZL12MX_GPIO_Initv+0xd0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4812      	ldr	r0, [pc, #72]	; (8000c24 <_ZL12MX_GPIO_Initv+0xd4>)
 8000bdc:	f001 ff70 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_ZL12MX_GPIO_Initv+0xd8>)
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <_ZL12MX_GPIO_Initv+0xdc>)
 8000bf6:	f001 fdb9 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <_ZL12MX_GPIO_Initv+0xd4>)
 8000c12:	f001 fdab 	bl	800276c <HAL_GPIO_Init>

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	10210000 	.word	0x10210000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_Z41__static_initialization_and_destruction_0ii>:
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d107      	bne.n	8000c60 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d102      	bne.n	8000c60 <_Z41__static_initialization_and_destruction_0ii+0x20>
OLED OLED1;
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c5c:	f004 f852 	bl	8004d04 <_ZN4OLEDC1Ev>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d107      	bne.n	8000c76 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d102      	bne.n	8000c76 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c72:	f004 f861 	bl	8004d38 <_ZN4OLEDD1Ev>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20008288 	.word	0x20008288

08000c84 <_GLOBAL__sub_I_hadc1>:
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ffd7 	bl	8000c40 <_Z41__static_initialization_and_destruction_0ii>
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_GLOBAL__sub_D_hadc1>:
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff ffcf 	bl	8000c40 <_Z41__static_initialization_and_destruction_0ii>
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f000 ffcc 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <HAL_ADC_MspInit+0xdc>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d158      	bne.n	8000dc8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <HAL_ADC_MspInit+0xe0>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <HAL_ADC_MspInit+0xe0>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <HAL_ADC_MspInit+0xe0>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <HAL_ADC_MspInit+0xe0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <HAL_ADC_MspInit+0xe0>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <HAL_ADC_MspInit+0xe0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d52:	2303      	movs	r3, #3
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481d      	ldr	r0, [pc, #116]	; (8000dd8 <HAL_ADC_MspInit+0xe4>)
 8000d62:	f001 fd03 	bl	800276c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_ADC_MspInit+0xec>)
 8000d6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000da4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000dae:	f001 f96f 	bl	8002090 <HAL_DMA_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000db8:	f7ff ff3a 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_ADC_MspInit+0xe8>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40012000 	.word	0x40012000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	200000d4 	.word	0x200000d4
 8000de0:	40026410 	.word	0x40026410

08000de4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a30      	ldr	r2, [pc, #192]	; (8000ec4 <HAL_DAC_MspInit+0xe0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d159      	bne.n	8000eba <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <HAL_DAC_MspInit+0xe4>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ec8 <HAL_DAC_MspInit+0xe4>)
 8000e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <HAL_DAC_MspInit+0xe4>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <HAL_DAC_MspInit+0xe4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <HAL_DAC_MspInit+0xe4>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_DAC_MspInit+0xe4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481e      	ldr	r0, [pc, #120]	; (8000ecc <HAL_DAC_MspInit+0xe8>)
 8000e52:	f001 fc8b 	bl	800276c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_DAC_MspInit+0xf0>)
 8000e5a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e5e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000e62:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e66:	2240      	movs	r2, #64	; 0x40
 8000e68:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e76:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e7e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e86:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e8e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e96:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000ea0:	f001 f8f6 	bl	8002090 <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000eaa:	f7ff fec1 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_DAC_MspInit+0xec>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40007400 	.word	0x40007400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	20000148 	.word	0x20000148
 8000ed4:	40026088 	.word	0x40026088

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_I2C_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12c      	bne.n	8000f54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <HAL_I2C_MspInit+0x8c>)
 8000f34:	f001 fc1a 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d10d      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12b      	bne.n	8001022 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001002:	230c      	movs	r3, #12
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001012:	2307      	movs	r3, #7
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_UART_MspInit+0x8c>)
 800101e:	f001 fba5 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40004400 	.word	0x40004400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f8f6 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Stream5_IRQHandler+0x10>)
 800109a:	f001 f8ff 	bl	800229c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000148 	.word	0x20000148

080010a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA2_Stream0_IRQHandler+0x10>)
 80010ae:	f001 f8f5 	bl	800229c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000d4 	.word	0x200000d4

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010d6:	f004 f9c1 	bl	800545c <__errno>
 80010da:	4602      	mov	r2, r0
 80010dc:	2316      	movs	r3, #22
 80010de:	6013      	str	r3, [r2, #0]
	return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0x12>

08001100 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x50>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x16>
		heap_end = &end;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <_sbrk+0x50>)
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <_sbrk+0x54>)
 8001114:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <_sbrk+0x50>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <_sbrk+0x50>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	466a      	mov	r2, sp
 8001126:	4293      	cmp	r3, r2
 8001128:	d907      	bls.n	800113a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800112a:	f004 f997 	bl	800545c <__errno>
 800112e:	4602      	mov	r2, r0
 8001130:	230c      	movs	r3, #12
 8001132:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	e006      	b.n	8001148 <_sbrk+0x48>
	}

	heap_end += incr;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <_sbrk+0x50>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a03      	ldr	r2, [pc, #12]	; (8001150 <_sbrk+0x50>)
 8001144:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000a294 	.word	0x2000a294
 8001154:	2000a2b0 	.word	0x2000a2b0

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <SystemInit+0x28>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SystemInit+0x28>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SystemInit+0x28>)
 800116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001172:	609a      	str	r2, [r3, #8]
#endif
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001188:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800118a:	e003      	b.n	8001194 <LoopCopyDataInit>

0800118c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800118e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001190:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001192:	3104      	adds	r1, #4

08001194 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001198:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800119a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800119c:	d3f6      	bcc.n	800118c <CopyDataInit>
  ldr  r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011a0:	e002      	b.n	80011a8 <LoopFillZerobss>

080011a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011a4:	f842 3b04 	str.w	r3, [r2], #4

080011a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011ac:	d3f9      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ae:	f7ff ffd3 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 f959 	bl	8005468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff fa01 	bl	80005bc <main>
  bx  lr    
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011c0:	08005cac 	.word	0x08005cac
  ldr  r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011c8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80011cc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80011d0:	2000a2ac 	.word	0x2000a2ac

080011d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_Init+0x40>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_Init+0x40>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x40>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 fd3d 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fd4a 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fd55 	bl	8001cea <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 fd1d 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000000 	.word	0x20000000
 8001274:	20000008 	.word	0x20000008
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008
 80012a0:	2000a2a4 	.word	0x2000a2a4

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	2000a2a4 	.word	0x2000a2a4

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_Delay+0x40>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000008 	.word	0x20000008

08001300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e033      	b.n	800137e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fce8 	bl	8000cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001346:	f023 0302 	bic.w	r3, r3, #2
 800134a:	f043 0202 	orr.w	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 fa46 	bl	80017e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
 800136e:	e001      	b.n	8001374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1e>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e0cc      	b.n	8001540 <HAL_ADC_Start_DMA+0x1b8>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d018      	beq.n	80013ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_ADC_Start_DMA+0x1c0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5e      	ldr	r2, [pc, #376]	; (800154c <HAL_ADC_Start_DMA+0x1c4>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9a      	lsrs	r2, r3, #18
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 80a0 	bne.w	800153e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d007      	beq.n	8001430 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143c:	d106      	bne.n	800144c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f023 0206 	bic.w	r2, r3, #6
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	645a      	str	r2, [r3, #68]	; 0x44
 800144a:	e002      	b.n	8001452 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_ADC_Start_DMA+0x1c8>)
 800145c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a3c      	ldr	r2, [pc, #240]	; (8001554 <HAL_ADC_Start_DMA+0x1cc>)
 8001464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <HAL_ADC_Start_DMA+0x1d0>)
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	4a3a      	ldr	r2, [pc, #232]	; (800155c <HAL_ADC_Start_DMA+0x1d4>)
 8001474:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800147e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800148e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800149e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	334c      	adds	r3, #76	; 0x4c
 80014aa:	4619      	mov	r1, r3
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f000 fe9c 	bl	80021ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d12a      	bne.n	8001516 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <HAL_ADC_Start_DMA+0x1d8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d015      	beq.n	80014f6 <HAL_ADC_Start_DMA+0x16e>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_ADC_Start_DMA+0x1dc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d105      	bne.n	80014e0 <HAL_ADC_Start_DMA+0x158>
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_ADC_Start_DMA+0x1c8>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00a      	beq.n	80014f6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a20      	ldr	r2, [pc, #128]	; (8001568 <HAL_ADC_Start_DMA+0x1e0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d129      	bne.n	800153e <HAL_ADC_Start_DMA+0x1b6>
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_ADC_Start_DMA+0x1c8>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d823      	bhi.n	800153e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11c      	bne.n	800153e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e013      	b.n	800153e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_ADC_Start_DMA+0x1d8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d10e      	bne.n	800153e <HAL_ADC_Start_DMA+0x1b6>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d107      	bne.n	800153e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800153c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	431bde83 	.word	0x431bde83
 8001550:	40012300 	.word	0x40012300
 8001554:	080019dd 	.word	0x080019dd
 8001558:	08001a97 	.word	0x08001a97
 800155c:	08001ab3 	.word	0x08001ab3
 8001560:	40012000 	.word	0x40012000
 8001564:	40012100 	.word	0x40012100
 8001568:	40012200 	.word	0x40012200

0800156c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_ADC_ConfigChannel+0x1c>
 8001598:	2302      	movs	r3, #2
 800159a:	e113      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x244>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b09      	cmp	r3, #9
 80015aa:	d925      	bls.n	80015f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68d9      	ldr	r1, [r3, #12]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	3b1e      	subs	r3, #30
 80015c2:	2207      	movs	r2, #7
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43da      	mvns	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	400a      	ands	r2, r1
 80015d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68d9      	ldr	r1, [r3, #12]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	4603      	mov	r3, r0
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4403      	add	r3, r0
 80015ea:	3b1e      	subs	r3, #30
 80015ec:	409a      	lsls	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	e022      	b.n	800163e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6919      	ldr	r1, [r3, #16]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	2207      	movs	r2, #7
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	400a      	ands	r2, r1
 800161a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	4603      	mov	r3, r0
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4403      	add	r3, r0
 8001634:	409a      	lsls	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b06      	cmp	r3, #6
 8001644:	d824      	bhi.n	8001690 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b05      	subs	r3, #5
 8001658:	221f      	movs	r2, #31
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	400a      	ands	r2, r1
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b05      	subs	r3, #5
 8001682:	fa00 f203 	lsl.w	r2, r0, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	635a      	str	r2, [r3, #52]	; 0x34
 800168e:	e04c      	b.n	800172a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b0c      	cmp	r3, #12
 8001696:	d824      	bhi.n	80016e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	3b23      	subs	r3, #35	; 0x23
 80016aa:	221f      	movs	r2, #31
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43da      	mvns	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	400a      	ands	r2, r1
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	3b23      	subs	r3, #35	; 0x23
 80016d4:	fa00 f203 	lsl.w	r2, r0, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
 80016e0:	e023      	b.n	800172a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	3b41      	subs	r3, #65	; 0x41
 80016f4:	221f      	movs	r2, #31
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	400a      	ands	r2, r1
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b41      	subs	r3, #65	; 0x41
 800171e:	fa00 f203 	lsl.w	r2, r0, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <HAL_ADC_ConfigChannel+0x250>)
 800172c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a28      	ldr	r2, [pc, #160]	; (80017d4 <HAL_ADC_ConfigChannel+0x254>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d10f      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x1d8>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b12      	cmp	r3, #18
 800173e:	d10b      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_ADC_ConfigChannel+0x254>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x23a>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_ADC_ConfigChannel+0x258>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d003      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x1f4>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b11      	cmp	r3, #17
 8001772:	d122      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_ADC_ConfigChannel+0x258>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d111      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_ADC_ConfigChannel+0x25c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_ADC_ConfigChannel+0x260>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0c9a      	lsrs	r2, r3, #18
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f9      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40012300 	.word	0x40012300
 80017d4:	40012000 	.word	0x40012000
 80017d8:	10000012 	.word	0x10000012
 80017dc:	20000000 	.word	0x20000000
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ec:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <ADC_Init+0x1f0>)
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	431a      	orrs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	021a      	lsls	r2, r3, #8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6899      	ldr	r1, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <ADC_Init+0x1f4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d022      	beq.n	80018c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800188a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e00f      	b.n	80018e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0202 	bic.w	r2, r2, #2
 80018f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7e1b      	ldrb	r3, [r3, #24]
 80018fc:	005a      	lsls	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01b      	beq.n	8001948 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800192e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6859      	ldr	r1, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	3b01      	subs	r3, #1
 800193c:	035a      	lsls	r2, r3, #13
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	e007      	b.n	8001958 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001956:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	3b01      	subs	r3, #1
 8001974:	051a      	lsls	r2, r3, #20
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800198c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199a:	025a      	lsls	r2, r3, #9
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	029a      	lsls	r2, r3, #10
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40012300 	.word	0x40012300
 80019d8:	0f000001 	.word	0x0f000001

080019dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d13c      	bne.n	8001a70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d12b      	bne.n	8001a68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d127      	bne.n	8001a68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d119      	bne.n	8001a68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0220 	bic.w	r2, r2, #32
 8001a42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7fe fd6b 	bl	8000544 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a6e:	e00e      	b.n	8001a8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff fd75 	bl	800156c <HAL_ADC_ErrorCallback>
}
 8001a82:	e004      	b.n	8001a8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f7fe fd35 	bl	8000514 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f043 0204 	orr.w	r2, r3, #4
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff fd4a 	bl	800156c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e014      	b.n	8001d3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff f85d 	bl	8000de4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	795b      	ldrb	r3, [r3, #5]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_DAC_Start_DMA+0x1e>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e08e      	b.n	8001e84 <HAL_DAC_Start_DMA+0x13c>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d12a      	bne.n	8001dce <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <HAL_DAC_Start_DMA+0x144>)
 8001d7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a42      	ldr	r2, [pc, #264]	; (8001e90 <HAL_DAC_Start_DMA+0x148>)
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a41      	ldr	r2, [pc, #260]	; (8001e94 <HAL_DAC_Start_DMA+0x14c>)
 8001d8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d9e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d009      	beq.n	8001dba <HAL_DAC_Start_DMA+0x72>
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d00c      	beq.n	8001dc4 <HAL_DAC_Start_DMA+0x7c>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d000      	beq.n	8001db0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001dae:	e039      	b.n	8001e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3308      	adds	r3, #8
 8001db6:	617b      	str	r3, [r7, #20]
        break;
 8001db8:	e034      	b.n	8001e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	330c      	adds	r3, #12
 8001dc0:	617b      	str	r3, [r7, #20]
        break;
 8001dc2:	e02f      	b.n	8001e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3310      	adds	r3, #16
 8001dca:	617b      	str	r3, [r7, #20]
        break;
 8001dcc:	e02a      	b.n	8001e24 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <HAL_DAC_Start_DMA+0x150>)
 8001dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <HAL_DAC_Start_DMA+0x154>)
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <HAL_DAC_Start_DMA+0x158>)
 8001de4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001df4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d009      	beq.n	8001e10 <HAL_DAC_Start_DMA+0xc8>
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d00c      	beq.n	8001e1a <HAL_DAC_Start_DMA+0xd2>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d000      	beq.n	8001e06 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001e04:	e00e      	b.n	8001e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	617b      	str	r3, [r7, #20]
        break;
 8001e0e:	e009      	b.n	8001e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3318      	adds	r3, #24
 8001e16:	617b      	str	r3, [r7, #20]
        break;
 8001e18:	e004      	b.n	8001e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	331c      	adds	r3, #28
 8001e20:	617b      	str	r3, [r7, #20]
        break;
 8001e22:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10f      	bne.n	8001e4a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e38:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6898      	ldr	r0, [r3, #8]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	f000 f9d2 	bl	80021ec <HAL_DMA_Start_IT>
 8001e48:	e00e      	b.n	8001e68 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e58:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68d8      	ldr	r0, [r3, #12]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	f000 f9c2 	bl	80021ec <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	08001f7b 	.word	0x08001f7b
 8001e90:	08001f9d 	.word	0x08001f9d
 8001e94:	08001fb9 	.word	0x08001fb9
 8001e98:	08002023 	.word	0x08002023
 8001e9c:	08002045 	.word	0x08002045
 8001ea0:	08002061 	.word	0x08002061

08001ea4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	795b      	ldrb	r3, [r3, #5]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_DAC_ConfigChannel+0x20>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e036      	b.n	8001f6e <HAL_DAC_ConfigChannel+0x8e>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f14:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4013      	ands	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	22c0      	movs	r2, #192	; 0xc0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f7ff ff8b 	bl	8001ea4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	711a      	strb	r2, [r3, #4]
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff ff84 	bl	8001eb8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f043 0204 	orr.w	r2, r3, #4
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff ff7a 	bl	8001ecc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	711a      	strb	r2, [r3, #4]
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7ff ffd8 	bl	8001fe6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	711a      	strb	r2, [r3, #4]
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f7ff ffd1 	bl	8001ffa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f043 0204 	orr.w	r2, r3, #4
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff ffc7 	bl	800200e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	711a      	strb	r2, [r3, #4]
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff f902 	bl	80012a4 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e099      	b.n	80021e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	e00f      	b.n	80020ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ce:	f7ff f8e9 	bl	80012a4 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d908      	bls.n	80020ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e078      	b.n	80021e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e8      	bne.n	80020ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_DMA_Init+0x158>)
 8002108:	4013      	ands	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4313      	orrs	r3, r2
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0307 	bic.w	r3, r3, #7
 800216e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2b04      	cmp	r3, #4
 8002180:	d117      	bne.n	80021b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fa6f 	bl	8002678 <DMA_CheckFifoParam>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ae:	2301      	movs	r3, #1
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa26 	bl	800260c <DMA_CalcBaseAndBitshift>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	f010803f 	.word	0xf010803f

080021ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_DMA_Start_IT+0x26>
 800220e:	2302      	movs	r3, #2
 8002210:	e040      	b.n	8002294 <HAL_DMA_Start_IT+0xa8>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d12f      	bne.n	8002286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f9b8 	bl	80025b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	223f      	movs	r2, #63	; 0x3f
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0216 	orr.w	r2, r2, #22
 800225a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0208 	orr.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e005      	b.n	8002292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a8:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_DMA_IRQHandler+0x258>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a92      	ldr	r2, [pc, #584]	; (80024f8 <HAL_DMA_IRQHandler+0x25c>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0a9b      	lsrs	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2208      	movs	r2, #8
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01a      	beq.n	8002308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0204 	bic.w	r2, r2, #4
 80022ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2208      	movs	r2, #8
 80022f6:	409a      	lsls	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	2201      	movs	r2, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d012      	beq.n	800233e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2201      	movs	r2, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2204      	movs	r2, #4
 8002344:	409a      	lsls	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d012      	beq.n	8002374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00b      	beq.n	8002374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	2204      	movs	r2, #4
 8002362:	409a      	lsls	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f043 0204 	orr.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2210      	movs	r2, #16
 800237a:	409a      	lsls	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d043      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03c      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	2210      	movs	r2, #16
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d018      	beq.n	80023de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d024      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
 80023ca:	e01f      	b.n	800240c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e016      	b.n	800240c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0208 	bic.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2220      	movs	r2, #32
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 808e 	beq.w	800253a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8086 	beq.w	800253a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2220      	movs	r2, #32
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b05      	cmp	r3, #5
 8002444:	d136      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0216 	bic.w	r2, r2, #22
 8002454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_DMA_IRQHandler+0x1da>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0208 	bic.w	r2, r2, #8
 8002484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	223f      	movs	r2, #63	; 0x3f
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d07d      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
        }
        return;
 80024b2:	e078      	b.n	80025a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01c      	beq.n	80024fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d108      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d030      	beq.n	800253a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
 80024e0:	e02b      	b.n	800253a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d027      	beq.n	800253a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
 80024f2:	e022      	b.n	800253a <HAL_DMA_IRQHandler+0x29e>
 80024f4:	20000000 	.word	0x20000000
 80024f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0210 	bic.w	r2, r2, #16
 8002518:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	2b00      	cmp	r3, #0
 8002540:	d032      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d022      	beq.n	8002594 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2205      	movs	r2, #5
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	429a      	cmp	r2, r3
 8002570:	d307      	bcc.n	8002582 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f2      	bne.n	8002566 <HAL_DMA_IRQHandler+0x2ca>
 8002580:	e000      	b.n	8002584 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002582:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e000      	b.n	80025a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025a6:	bf00      	nop
    }
  }
}
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop

080025b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b40      	cmp	r3, #64	; 0x40
 80025dc:	d108      	bne.n	80025f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ee:	e007      	b.n	8002600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3b10      	subs	r3, #16
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <DMA_CalcBaseAndBitshift+0x64>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <DMA_CalcBaseAndBitshift+0x68>)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d909      	bls.n	800264e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	659a      	str	r2, [r3, #88]	; 0x58
 800264c:	e007      	b.n	800265e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	aaaaaaab 	.word	0xaaaaaaab
 8002674:	08005738 	.word	0x08005738

08002678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11f      	bne.n	80026d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d855      	bhi.n	8002744 <DMA_CheckFifoParam+0xcc>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <DMA_CheckFifoParam+0x28>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026c3 	.word	0x080026c3
 80026a8:	080026b1 	.word	0x080026b1
 80026ac:	08002745 	.word	0x08002745
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d045      	beq.n	8002748 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c0:	e042      	b.n	8002748 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ca:	d13f      	bne.n	800274c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d0:	e03c      	b.n	800274c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026da:	d121      	bne.n	8002720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d836      	bhi.n	8002750 <DMA_CheckFifoParam+0xd8>
 80026e2:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <DMA_CheckFifoParam+0x70>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	080026f9 	.word	0x080026f9
 80026ec:	080026ff 	.word	0x080026ff
 80026f0:	080026f9 	.word	0x080026f9
 80026f4:	08002711 	.word	0x08002711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      break;
 80026fc:	e02f      	b.n	800275e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d024      	beq.n	8002754 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270e:	e021      	b.n	8002754 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002718:	d11e      	bne.n	8002758 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271e:	e01b      	b.n	8002758 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d902      	bls.n	800272c <DMA_CheckFifoParam+0xb4>
 8002726:	2b03      	cmp	r3, #3
 8002728:	d003      	beq.n	8002732 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800272a:	e018      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e015      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00e      	beq.n	800275c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
      break;
 8002742:	e00b      	b.n	800275c <DMA_CheckFifoParam+0xe4>
      break;
 8002744:	bf00      	nop
 8002746:	e00a      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      break;
 8002748:	bf00      	nop
 800274a:	e008      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      break;
 800274c:	bf00      	nop
 800274e:	e006      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      break;
 8002750:	bf00      	nop
 8002752:	e004      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      break;
 8002754:	bf00      	nop
 8002756:	e002      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      break;   
 8002758:	bf00      	nop
 800275a:	e000      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      break;
 800275c:	bf00      	nop
    }
  } 
  
  return status; 
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e165      	b.n	8002a54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8154 	bne.w	8002a4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00b      	beq.n	80027c6 <HAL_GPIO_Init+0x5a>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d007      	beq.n	80027c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ba:	2b11      	cmp	r3, #17
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b12      	cmp	r3, #18
 80027c4:	d130      	bne.n	8002828 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fc:	2201      	movs	r2, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 0201 	and.w	r2, r3, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0xfc>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80ae 	beq.w	8002a4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_GPIO_Init+0x2fc>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_GPIO_Init+0x2fc>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_GPIO_Init+0x2fc>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_GPIO_Init+0x300>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4e      	ldr	r2, [pc, #312]	; (8002a70 <HAL_GPIO_Init+0x304>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d025      	beq.n	8002986 <HAL_GPIO_Init+0x21a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_GPIO_Init+0x308>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01f      	beq.n	8002982 <HAL_GPIO_Init+0x216>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4c      	ldr	r2, [pc, #304]	; (8002a78 <HAL_GPIO_Init+0x30c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d019      	beq.n	800297e <HAL_GPIO_Init+0x212>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4b      	ldr	r2, [pc, #300]	; (8002a7c <HAL_GPIO_Init+0x310>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0x20e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_GPIO_Init+0x314>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00d      	beq.n	8002976 <HAL_GPIO_Init+0x20a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a49      	ldr	r2, [pc, #292]	; (8002a84 <HAL_GPIO_Init+0x318>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x206>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a48      	ldr	r2, [pc, #288]	; (8002a88 <HAL_GPIO_Init+0x31c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_GPIO_Init+0x202>
 800296a:	2306      	movs	r3, #6
 800296c:	e00c      	b.n	8002988 <HAL_GPIO_Init+0x21c>
 800296e:	2307      	movs	r3, #7
 8002970:	e00a      	b.n	8002988 <HAL_GPIO_Init+0x21c>
 8002972:	2305      	movs	r3, #5
 8002974:	e008      	b.n	8002988 <HAL_GPIO_Init+0x21c>
 8002976:	2304      	movs	r3, #4
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x21c>
 800297a:	2303      	movs	r3, #3
 800297c:	e004      	b.n	8002988 <HAL_GPIO_Init+0x21c>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <HAL_GPIO_Init+0x21c>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x21c>
 8002986:	2300      	movs	r3, #0
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f002 0203 	and.w	r2, r2, #3
 800298e:	0092      	lsls	r2, r2, #2
 8002990:	4093      	lsls	r3, r2
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002998:	4934      	ldr	r1, [pc, #208]	; (8002a6c <HAL_GPIO_Init+0x300>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a6:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_GPIO_Init+0x320>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ca:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_GPIO_Init+0x320>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_GPIO_Init+0x320>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <HAL_GPIO_Init+0x320>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_GPIO_Init+0x320>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_GPIO_Init+0x320>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_GPIO_Init+0x320>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a48:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_GPIO_Init+0x320>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	f67f ae96 	bls.w	8002788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3724      	adds	r7, #36	; 0x24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40020400 	.word	0x40020400
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40021400 	.word	0x40021400
 8002a88:	40021800 	.word	0x40021800
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e001      	b.n	8002ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002adc:	e003      	b.n	8002ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e11f      	b.n	8002d46 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f9dc 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b58:	f000 fe2c 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8002b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a7b      	ldr	r2, [pc, #492]	; (8002d50 <HAL_I2C_Init+0x25c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d807      	bhi.n	8002b78 <HAL_I2C_Init+0x84>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a7a      	ldr	r2, [pc, #488]	; (8002d54 <HAL_I2C_Init+0x260>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e006      	b.n	8002b86 <HAL_I2C_Init+0x92>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a77      	ldr	r2, [pc, #476]	; (8002d58 <HAL_I2C_Init+0x264>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0db      	b.n	8002d46 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a72      	ldr	r2, [pc, #456]	; (8002d5c <HAL_I2C_Init+0x268>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a64      	ldr	r2, [pc, #400]	; (8002d50 <HAL_I2C_Init+0x25c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d802      	bhi.n	8002bc8 <HAL_I2C_Init+0xd4>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	e009      	b.n	8002bdc <HAL_I2C_Init+0xe8>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a63      	ldr	r2, [pc, #396]	; (8002d60 <HAL_I2C_Init+0x26c>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	3301      	adds	r3, #1
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4956      	ldr	r1, [pc, #344]	; (8002d50 <HAL_I2C_Init+0x25c>)
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	d80d      	bhi.n	8002c18 <HAL_I2C_Init+0x124>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e59      	subs	r1, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	bf38      	it	cc
 8002c14:	2304      	movcc	r3, #4
 8002c16:	e04f      	b.n	8002cb8 <HAL_I2C_Init+0x1c4>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <HAL_I2C_Init+0x150>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1e58      	subs	r0, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e012      	b.n	8002c6a <HAL_I2C_Init+0x176>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e58      	subs	r0, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	0099      	lsls	r1, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Init+0x17e>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e022      	b.n	8002cb8 <HAL_I2C_Init+0x1c4>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_I2C_Init+0x1a4>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e58      	subs	r0, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	440b      	add	r3, r1
 8002c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	e00f      	b.n	8002cb8 <HAL_I2C_Init+0x1c4>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e58      	subs	r0, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	0099      	lsls	r1, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6809      	ldr	r1, [r1, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6911      	ldr	r1, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	000186a0 	.word	0x000186a0
 8002d54:	001e847f 	.word	0x001e847f
 8002d58:	003d08ff 	.word	0x003d08ff
 8002d5c:	431bde83 	.word	0x431bde83
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	460b      	mov	r3, r1
 8002d72:	817b      	strh	r3, [r7, #10]
 8002d74:	4613      	mov	r3, r2
 8002d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7fe fa94 	bl	80012a4 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f040 80e0 	bne.w	8002f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2319      	movs	r3, #25
 8002d92:	2201      	movs	r2, #1
 8002d94:	4970      	ldr	r1, [pc, #448]	; (8002f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa92 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	e0d3      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_I2C_Master_Transmit+0x50>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0cc      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d007      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0201 	orr.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2221      	movs	r2, #33	; 0x21
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2210      	movs	r2, #16
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	893a      	ldrh	r2, [r7, #8]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e1c:	8979      	ldrh	r1, [r7, #10]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6a3a      	ldr	r2, [r7, #32]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f9ca 	bl	80031bc <I2C_MasterRequestWrite>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e08d      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e48:	e066      	b.n	8002f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	6a39      	ldr	r1, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fb0c 	bl	800346c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11b      	bne.n	8002eec <HAL_I2C_Master_Transmit+0x188>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	6a39      	ldr	r1, [r7, #32]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fafc 	bl	80034ee <I2C_WaitOnBTFFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e01a      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d194      	bne.n	8002e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f70:	f7fe f998 	bl	80012a4 <HAL_GetTick>
 8002f74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	f040 8110 	bne.w	80031a8 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2319      	movs	r3, #25
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4988      	ldr	r1, [pc, #544]	; (80031b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f994 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e103      	b.n	80031aa <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2C_IsDeviceReady+0x50>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0fc      	b.n	80031aa <HAL_I2C_IsDeviceReady+0x24a>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d007      	beq.n	8002fd6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2224      	movs	r2, #36	; 0x24
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4a70      	ldr	r2, [pc, #448]	; (80031b8 <HAL_I2C_IsDeviceReady+0x258>)
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003008:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f952 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0b6      	b.n	80031aa <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303c:	897b      	ldrh	r3, [r7, #10]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800304a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe f92a 	bl	80012a4 <HAL_GetTick>
 8003050:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003080:	e025      	b.n	80030ce <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe f90f 	bl	80012a4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <HAL_I2C_IsDeviceReady+0x138>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	22a0      	movs	r2, #160	; 0xa0
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2ba0      	cmp	r3, #160	; 0xa0
 80030d8:	d005      	beq.n	80030e6 <HAL_I2C_IsDeviceReady+0x186>
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <HAL_I2C_IsDeviceReady+0x186>
 80030e0:	7dbb      	ldrb	r3, [r7, #22]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0cd      	beq.n	8003082 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d129      	bne.n	8003150 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2319      	movs	r3, #25
 8003128:	2201      	movs	r2, #1
 800312a:	4922      	ldr	r1, [pc, #136]	; (80031b4 <HAL_I2C_IsDeviceReady+0x254>)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f8c7 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e036      	b.n	80031aa <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e02c      	b.n	80031aa <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003168:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2319      	movs	r3, #25
 8003170:	2201      	movs	r2, #1
 8003172:	4910      	ldr	r1, [pc, #64]	; (80031b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f8a3 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e012      	b.n	80031aa <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	3301      	adds	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	f4ff af33 	bcc.w	8002ffa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	00100002 	.word	0x00100002
 80031b8:	ffff0000 	.word	0xffff0000

080031bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d006      	beq.n	80031e6 <I2C_MasterRequestWrite+0x2a>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d003      	beq.n	80031e6 <I2C_MasterRequestWrite+0x2a>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031e4:	d108      	bne.n	80031f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e00b      	b.n	8003210 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d107      	bne.n	8003210 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f84f 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00c      	beq.n	8003242 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e035      	b.n	80032ae <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324a:	d108      	bne.n	800325e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800325a:	611a      	str	r2, [r3, #16]
 800325c:	e01b      	b.n	8003296 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	11db      	asrs	r3, r3, #7
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 0306 	and.w	r3, r3, #6
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f063 030f 	orn	r3, r3, #15
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	490f      	ldr	r1, [pc, #60]	; (80032b8 <I2C_MasterRequestWrite+0xfc>)
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f876 	bl	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e010      	b.n	80032ae <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800328c:	897b      	ldrh	r3, [r7, #10]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4908      	ldr	r1, [pc, #32]	; (80032bc <I2C_MasterRequestWrite+0x100>)
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f866 	bl	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00010008 	.word	0x00010008
 80032bc:	00010002 	.word	0x00010002

080032c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d0:	e025      	b.n	800331e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d021      	beq.n	800331e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fd ffe3 	bl	80012a4 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e023      	b.n	8003366 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10d      	bne.n	8003344 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	e00c      	b.n	800335e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	429a      	cmp	r2, r3
 8003362:	d0b6      	beq.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800337c:	e051      	b.n	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338c:	d123      	bne.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0204 	orr.w	r2, r3, #4
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e046      	b.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fd ff61 	bl	80012a4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e020      	b.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10c      	bne.n	8003446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	e00b      	b.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	43da      	mvns	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4013      	ands	r3, r2
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d18d      	bne.n	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003478:	e02d      	b.n	80034d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f878 	bl	8003570 <I2C_IsAcknowledgeFailed>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e02d      	b.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d021      	beq.n	80034d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7fd ff07 	bl	80012a4 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d116      	bne.n	80034d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e007      	b.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d1ca      	bne.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034fa:	e02d      	b.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f837 	bl	8003570 <I2C_IsAcknowledgeFailed>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e02d      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d021      	beq.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fd fec6 	bl	80012a4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d116      	bne.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d1ca      	bne.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d11b      	bne.n	80035c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003590:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fd fdf0 	bl	80012a4 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fd fdec 	bl	80012a4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f855 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 800375a:	4601      	mov	r1, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5cd3      	ldrb	r3, [r2, r3]
 800376a:	fa21 f303 	lsr.w	r3, r1, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fd50 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	08005720 	.word	0x08005720
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b8:	f7ff fff0 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037bc:	4601      	mov	r1, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4a03      	ldr	r2, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08005730 	.word	0x08005730

080037dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037e0:	f7ff ffdc 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037e4:	4601      	mov	r1, r0
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	0b5b      	lsrs	r3, r3, #13
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4a03      	ldr	r2, [pc, #12]	; (8003800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	08005730 	.word	0x08005730

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381e:	4bc6      	ldr	r3, [pc, #792]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b0c      	cmp	r3, #12
 8003828:	f200 817e 	bhi.w	8003b28 <HAL_RCC_GetSysClockFreq+0x324>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCC_GetSysClockFreq+0x30>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003869 	.word	0x08003869
 8003838:	08003b29 	.word	0x08003b29
 800383c:	08003b29 	.word	0x08003b29
 8003840:	08003b29 	.word	0x08003b29
 8003844:	0800386f 	.word	0x0800386f
 8003848:	08003b29 	.word	0x08003b29
 800384c:	08003b29 	.word	0x08003b29
 8003850:	08003b29 	.word	0x08003b29
 8003854:	08003875 	.word	0x08003875
 8003858:	08003b29 	.word	0x08003b29
 800385c:	08003b29 	.word	0x08003b29
 8003860:	08003b29 	.word	0x08003b29
 8003864:	080039d1 	.word	0x080039d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4bb4      	ldr	r3, [pc, #720]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x338>)
 800386a:	613b      	str	r3, [r7, #16]
       break;
 800386c:	e15f      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800386e:	4bb4      	ldr	r3, [pc, #720]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003870:	613b      	str	r3, [r7, #16]
      break;
 8003872:	e15c      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003874:	4bb0      	ldr	r3, [pc, #704]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800387e:	4bae      	ldr	r3, [pc, #696]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d04a      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4bab      	ldr	r3, [pc, #684]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	ea03 0501 	and.w	r5, r3, r1
 80038a0:	ea04 0602 	and.w	r6, r4, r2
 80038a4:	4629      	mov	r1, r5
 80038a6:	4632      	mov	r2, r6
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	0154      	lsls	r4, r2, #5
 80038b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038b6:	014b      	lsls	r3, r1, #5
 80038b8:	4619      	mov	r1, r3
 80038ba:	4622      	mov	r2, r4
 80038bc:	1b49      	subs	r1, r1, r5
 80038be:	eb62 0206 	sbc.w	r2, r2, r6
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f04f 0400 	mov.w	r4, #0
 80038ca:	0194      	lsls	r4, r2, #6
 80038cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038d0:	018b      	lsls	r3, r1, #6
 80038d2:	1a5b      	subs	r3, r3, r1
 80038d4:	eb64 0402 	sbc.w	r4, r4, r2
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	00e2      	lsls	r2, r4, #3
 80038e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038e6:	00d9      	lsls	r1, r3, #3
 80038e8:	460b      	mov	r3, r1
 80038ea:	4614      	mov	r4, r2
 80038ec:	195b      	adds	r3, r3, r5
 80038ee:	eb44 0406 	adc.w	r4, r4, r6
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	0262      	lsls	r2, r4, #9
 80038fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003900:	0259      	lsls	r1, r3, #9
 8003902:	460b      	mov	r3, r1
 8003904:	4614      	mov	r4, r2
 8003906:	4618      	mov	r0, r3
 8003908:	4621      	mov	r1, r4
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f04f 0400 	mov.w	r4, #0
 8003910:	461a      	mov	r2, r3
 8003912:	4623      	mov	r3, r4
 8003914:	f7fc fc7e 	bl	8000214 <__aeabi_uldivmod>
 8003918:	4603      	mov	r3, r0
 800391a:	460c      	mov	r4, r1
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e049      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003920:	4b85      	ldr	r3, [pc, #532]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	f04f 0400 	mov.w	r4, #0
 800392a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	ea03 0501 	and.w	r5, r3, r1
 8003936:	ea04 0602 	and.w	r6, r4, r2
 800393a:	4629      	mov	r1, r5
 800393c:	4632      	mov	r2, r6
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	f04f 0400 	mov.w	r4, #0
 8003946:	0154      	lsls	r4, r2, #5
 8003948:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800394c:	014b      	lsls	r3, r1, #5
 800394e:	4619      	mov	r1, r3
 8003950:	4622      	mov	r2, r4
 8003952:	1b49      	subs	r1, r1, r5
 8003954:	eb62 0206 	sbc.w	r2, r2, r6
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	f04f 0400 	mov.w	r4, #0
 8003960:	0194      	lsls	r4, r2, #6
 8003962:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003966:	018b      	lsls	r3, r1, #6
 8003968:	1a5b      	subs	r3, r3, r1
 800396a:	eb64 0402 	sbc.w	r4, r4, r2
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800397c:	00d9      	lsls	r1, r3, #3
 800397e:	460b      	mov	r3, r1
 8003980:	4614      	mov	r4, r2
 8003982:	195b      	adds	r3, r3, r5
 8003984:	eb44 0406 	adc.w	r4, r4, r6
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	02a2      	lsls	r2, r4, #10
 8003992:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003996:	0299      	lsls	r1, r3, #10
 8003998:	460b      	mov	r3, r1
 800399a:	4614      	mov	r4, r2
 800399c:	4618      	mov	r0, r3
 800399e:	4621      	mov	r1, r4
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f04f 0400 	mov.w	r4, #0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4623      	mov	r3, r4
 80039aa:	f7fc fc33 	bl	8000214 <__aeabi_uldivmod>
 80039ae:	4603      	mov	r3, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039b4:	4b60      	ldr	r3, [pc, #384]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	3301      	adds	r3, #1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	613b      	str	r3, [r7, #16]
      break;
 80039ce:	e0ae      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	4b59      	ldr	r3, [pc, #356]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d04a      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	f04f 0400 	mov.w	r4, #0
 80039f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	ea03 0501 	and.w	r5, r3, r1
 80039fc:	ea04 0602 	and.w	r6, r4, r2
 8003a00:	4629      	mov	r1, r5
 8003a02:	4632      	mov	r2, r6
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	f04f 0400 	mov.w	r4, #0
 8003a0c:	0154      	lsls	r4, r2, #5
 8003a0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a12:	014b      	lsls	r3, r1, #5
 8003a14:	4619      	mov	r1, r3
 8003a16:	4622      	mov	r2, r4
 8003a18:	1b49      	subs	r1, r1, r5
 8003a1a:	eb62 0206 	sbc.w	r2, r2, r6
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	f04f 0400 	mov.w	r4, #0
 8003a26:	0194      	lsls	r4, r2, #6
 8003a28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a2c:	018b      	lsls	r3, r1, #6
 8003a2e:	1a5b      	subs	r3, r3, r1
 8003a30:	eb64 0402 	sbc.w	r4, r4, r2
 8003a34:	f04f 0100 	mov.w	r1, #0
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	00e2      	lsls	r2, r4, #3
 8003a3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a42:	00d9      	lsls	r1, r3, #3
 8003a44:	460b      	mov	r3, r1
 8003a46:	4614      	mov	r4, r2
 8003a48:	195b      	adds	r3, r3, r5
 8003a4a:	eb44 0406 	adc.w	r4, r4, r6
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	0262      	lsls	r2, r4, #9
 8003a58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a5c:	0259      	lsls	r1, r3, #9
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4614      	mov	r4, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	4621      	mov	r1, r4
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f04f 0400 	mov.w	r4, #0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4623      	mov	r3, r4
 8003a70:	f7fc fbd0 	bl	8000214 <__aeabi_uldivmod>
 8003a74:	4603      	mov	r3, r0
 8003a76:	460c      	mov	r4, r1
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e049      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7c:	4b2e      	ldr	r3, [pc, #184]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	f04f 0400 	mov.w	r4, #0
 8003a86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	ea03 0501 	and.w	r5, r3, r1
 8003a92:	ea04 0602 	and.w	r6, r4, r2
 8003a96:	4629      	mov	r1, r5
 8003a98:	4632      	mov	r2, r6
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	f04f 0400 	mov.w	r4, #0
 8003aa2:	0154      	lsls	r4, r2, #5
 8003aa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aa8:	014b      	lsls	r3, r1, #5
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4622      	mov	r2, r4
 8003aae:	1b49      	subs	r1, r1, r5
 8003ab0:	eb62 0206 	sbc.w	r2, r2, r6
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	0194      	lsls	r4, r2, #6
 8003abe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ac2:	018b      	lsls	r3, r1, #6
 8003ac4:	1a5b      	subs	r3, r3, r1
 8003ac6:	eb64 0402 	sbc.w	r4, r4, r2
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	00e2      	lsls	r2, r4, #3
 8003ad4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ad8:	00d9      	lsls	r1, r3, #3
 8003ada:	460b      	mov	r3, r1
 8003adc:	4614      	mov	r4, r2
 8003ade:	195b      	adds	r3, r3, r5
 8003ae0:	eb44 0406 	adc.w	r4, r4, r6
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	02a2      	lsls	r2, r4, #10
 8003aee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003af2:	0299      	lsls	r1, r3, #10
 8003af4:	460b      	mov	r3, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	4621      	mov	r1, r4
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f04f 0400 	mov.w	r4, #0
 8003b02:	461a      	mov	r2, r3
 8003b04:	4623      	mov	r3, r4
 8003b06:	f7fc fb85 	bl	8000214 <__aeabi_uldivmod>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	0f1b      	lsrs	r3, r3, #28
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	613b      	str	r3, [r7, #16]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x338>)
 8003b2a:	613b      	str	r3, [r7, #16]
      break;
 8003b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2e:	693b      	ldr	r3, [r7, #16]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	00f42400 	.word	0x00f42400
 8003b40:	007a1200 	.word	0x007a1200

08003b44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8083 	beq.w	8003c64 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b5e:	4b95      	ldr	r3, [pc, #596]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d019      	beq.n	8003b9e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b6a:	4b92      	ldr	r3, [pc, #584]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d106      	bne.n	8003b84 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b76:	4b8f      	ldr	r3, [pc, #572]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d00c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b84:	4b8b      	ldr	r3, [pc, #556]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	d112      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b90:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d05b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x11e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d157      	bne.n	8003c62 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e216      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x8a>
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7b      	ldr	r2, [pc, #492]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e01d      	b.n	8003c0a <HAL_RCC_OscConfig+0xc6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0xae>
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a75      	ldr	r2, [pc, #468]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b73      	ldr	r3, [pc, #460]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a72      	ldr	r2, [pc, #456]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e00b      	b.n	8003c0a <HAL_RCC_OscConfig+0xc6>
 8003bf2:	4b70      	ldr	r3, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6f      	ldr	r2, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6c      	ldr	r2, [pc, #432]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d013      	beq.n	8003c3a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fd fb47 	bl	80012a4 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fb43 	bl	80012a4 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b64      	cmp	r3, #100	; 0x64
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1db      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2c:	4b61      	ldr	r3, [pc, #388]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0xd6>
 8003c38:	e014      	b.n	8003c64 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fd fb33 	bl	80012a4 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c42:	f7fd fb2f 	bl	80012a4 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1c7      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c54:	4b57      	ldr	r3, [pc, #348]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0xfe>
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d06f      	beq.n	8003d50 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d017      	beq.n	8003cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c7c:	4b4d      	ldr	r3, [pc, #308]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c88:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d11c      	bne.n	8003cda <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca0:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d116      	bne.n	8003cda <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cac:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x180>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e18f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4938      	ldr	r1, [pc, #224]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd8:	e03a      	b.n	8003d50 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d020      	beq.n	8003d24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce2:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fadc 	bl	80012a4 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fd fad8 	bl	80012a4 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e170      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4925      	ldr	r1, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
 8003d22:	e015      	b.n	8003d50 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fabb 	bl	80012a4 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fab7 	bl	80012a4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e14f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d037      	beq.n	8003dcc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d016      	beq.n	8003d92 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCC_OscConfig+0x278>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fa9b 	bl	80012a4 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d72:	f7fd fa97 	bl	80012a4 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e12f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x22e>
 8003d90:	e01c      	b.n	8003dcc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_RCC_OscConfig+0x278>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fd fa84 	bl	80012a4 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9e:	e00f      	b.n	8003dc0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da0:	f7fd fa80 	bl	80012a4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d908      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e118      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470000 	.word	0x42470000
 8003dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	4b8a      	ldr	r3, [pc, #552]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e9      	bne.n	8003da0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dde:	4b83      	ldr	r3, [pc, #524]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b7f      	ldr	r3, [pc, #508]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a7e      	ldr	r2, [pc, #504]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b7c      	ldr	r3, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b79      	ldr	r3, [pc, #484]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a75      	ldr	r2, [pc, #468]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fd fa3f 	bl	80012a4 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fd fa3b 	bl	80012a4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0d3      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x31a>
 8003e50:	4b66      	ldr	r3, [pc, #408]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a65      	ldr	r2, [pc, #404]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x354>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x33c>
 8003e66:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a60      	ldr	r2, [pc, #384]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	4b5e      	ldr	r3, [pc, #376]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x354>
 8003e80:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a59      	ldr	r2, [pc, #356]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	4b57      	ldr	r3, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a56      	ldr	r2, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd fa00 	bl	80012a4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd f9fc 	bl	80012a4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e092      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x364>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd f9ea 	bl	80012a4 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fd f9e6 	bl	80012a4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e07c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	4b40      	ldr	r3, [pc, #256]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4a3a      	ldr	r2, [pc, #232]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d068      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f10:	4b36      	ldr	r3, [pc, #216]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d060      	beq.n	8003fde <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d145      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd f9bb 	bl	80012a4 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fd f9b7 	bl	80012a4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e04f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	019b      	lsls	r3, r3, #6
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	071b      	lsls	r3, r3, #28
 8003f7c:	491b      	ldr	r1, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f82:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd f98c 	bl	80012a4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd f988 	bl	80012a4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e020      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x44c>
 8003fae:	e018      	b.n	8003fe2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd f975 	bl	80012a4 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7fd f971 	bl	80012a4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e009      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_OscConfig+0x4a8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <HAL_RCC_OscConfig+0x47a>
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470060 	.word	0x42470060

08003ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e01d      	b.n	8004046 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ffa2 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 f8e4 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d007      	beq.n	8004080 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_ConfigClockSource+0x18>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0a6      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x166>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d067      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x120>
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d80b      	bhi.n	8004102 <HAL_TIM_ConfigClockSource+0x6c>
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d073      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x140>
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d802      	bhi.n	80040f8 <HAL_TIM_ConfigClockSource+0x62>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d06f      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040f6:	e078      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d06c      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x140>
 80040fc:	2b30      	cmp	r3, #48	; 0x30
 80040fe:	d06a      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004100:	e073      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004102:	2b70      	cmp	r3, #112	; 0x70
 8004104:	d00d      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x8c>
 8004106:	2b70      	cmp	r3, #112	; 0x70
 8004108:	d804      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x7e>
 800410a:	2b50      	cmp	r3, #80	; 0x50
 800410c:	d033      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0xe0>
 800410e:	2b60      	cmp	r3, #96	; 0x60
 8004110:	d041      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004112:	e06a      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d066      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0x152>
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411e:	d017      	beq.n	8004150 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004120:	e063      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6899      	ldr	r1, [r3, #8]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f000 f981 	bl	8004438 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004144:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	609a      	str	r2, [r3, #8]
      break;
 800414e:	e04c      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6899      	ldr	r1, [r3, #8]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f000 f96a 	bl	8004438 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004172:	609a      	str	r2, [r3, #8]
      break;
 8004174:	e039      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	461a      	mov	r2, r3
 8004184:	f000 f8de 	bl	8004344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2150      	movs	r1, #80	; 0x50
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f937 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8004194:	e029      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f000 f8fd 	bl	80043a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2160      	movs	r1, #96	; 0x60
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f927 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 80041b4:	e019      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 f8be 	bl	8004344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2140      	movs	r1, #64	; 0x40
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f917 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 80041d4:	e009      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f000 f90e 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 80041e6:	e000      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a40      	ldr	r2, [pc, #256]	; (8004318 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3d      	ldr	r2, [pc, #244]	; (800431c <TIM_Base_SetConfig+0x118>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <TIM_Base_SetConfig+0x120>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <TIM_Base_SetConfig+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d027      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <TIM_Base_SetConfig+0x118>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d023      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01f      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <TIM_Base_SetConfig+0x120>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d017      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a28      	ldr	r2, [pc, #160]	; (800432c <TIM_Base_SetConfig+0x128>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00f      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_Base_SetConfig+0x130>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a25      	ldr	r2, [pc, #148]	; (8004338 <TIM_Base_SetConfig+0x134>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a24      	ldr	r2, [pc, #144]	; (800433c <TIM_Base_SetConfig+0x138>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a23      	ldr	r2, [pc, #140]	; (8004340 <TIM_Base_SetConfig+0x13c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <TIM_Base_SetConfig+0x114>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <TIM_Base_SetConfig+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40010400 	.word	0x40010400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	40001800 	.word	0x40001800
 800433c:	40001c00 	.word	0x40001c00
 8004340:	40002000 	.word	0x40002000

08004344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0201 	bic.w	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 030a 	bic.w	r3, r3, #10
 8004380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b087      	sub	sp, #28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f023 0210 	bic.w	r2, r3, #16
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	031b      	lsls	r3, r3, #12
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	f043 0307 	orr.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	021a      	lsls	r2, r3, #8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	431a      	orrs	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4313      	orrs	r3, r2
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800448c:	2302      	movs	r3, #2
 800448e:	e05a      	b.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d01d      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10c      	bne.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40010400 	.word	0x40010400
 8004568:	40014000 	.word	0x40014000
 800456c:	40001800 	.word	0x40001800

08004570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e03f      	b.n	8004602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fc fd06 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f829 	bl	800460c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800464e:	f023 030c 	bic.w	r3, r3, #12
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	430b      	orrs	r3, r1
 800465a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467a:	f040 818b 	bne.w	8004994 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4ac1      	ldr	r2, [pc, #772]	; (8004988 <UART_SetConfig+0x37c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d005      	beq.n	8004694 <UART_SetConfig+0x88>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4abf      	ldr	r2, [pc, #764]	; (800498c <UART_SetConfig+0x380>)
 800468e:	4293      	cmp	r3, r2
 8004690:	f040 80bd 	bne.w	800480e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7ff f8a2 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 8004698:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	461d      	mov	r5, r3
 800469e:	f04f 0600 	mov.w	r6, #0
 80046a2:	46a8      	mov	r8, r5
 80046a4:	46b1      	mov	r9, r6
 80046a6:	eb18 0308 	adds.w	r3, r8, r8
 80046aa:	eb49 0409 	adc.w	r4, r9, r9
 80046ae:	4698      	mov	r8, r3
 80046b0:	46a1      	mov	r9, r4
 80046b2:	eb18 0805 	adds.w	r8, r8, r5
 80046b6:	eb49 0906 	adc.w	r9, r9, r6
 80046ba:	f04f 0100 	mov.w	r1, #0
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046ce:	4688      	mov	r8, r1
 80046d0:	4691      	mov	r9, r2
 80046d2:	eb18 0005 	adds.w	r0, r8, r5
 80046d6:	eb49 0106 	adc.w	r1, r9, r6
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	461d      	mov	r5, r3
 80046e0:	f04f 0600 	mov.w	r6, #0
 80046e4:	196b      	adds	r3, r5, r5
 80046e6:	eb46 0406 	adc.w	r4, r6, r6
 80046ea:	461a      	mov	r2, r3
 80046ec:	4623      	mov	r3, r4
 80046ee:	f7fb fd91 	bl	8000214 <__aeabi_uldivmod>
 80046f2:	4603      	mov	r3, r0
 80046f4:	460c      	mov	r4, r1
 80046f6:	461a      	mov	r2, r3
 80046f8:	4ba5      	ldr	r3, [pc, #660]	; (8004990 <UART_SetConfig+0x384>)
 80046fa:	fba3 2302 	umull	r2, r3, r3, r2
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	461d      	mov	r5, r3
 8004708:	f04f 0600 	mov.w	r6, #0
 800470c:	46a9      	mov	r9, r5
 800470e:	46b2      	mov	sl, r6
 8004710:	eb19 0309 	adds.w	r3, r9, r9
 8004714:	eb4a 040a 	adc.w	r4, sl, sl
 8004718:	4699      	mov	r9, r3
 800471a:	46a2      	mov	sl, r4
 800471c:	eb19 0905 	adds.w	r9, r9, r5
 8004720:	eb4a 0a06 	adc.w	sl, sl, r6
 8004724:	f04f 0100 	mov.w	r1, #0
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004730:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004734:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004738:	4689      	mov	r9, r1
 800473a:	4692      	mov	sl, r2
 800473c:	eb19 0005 	adds.w	r0, r9, r5
 8004740:	eb4a 0106 	adc.w	r1, sl, r6
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	461d      	mov	r5, r3
 800474a:	f04f 0600 	mov.w	r6, #0
 800474e:	196b      	adds	r3, r5, r5
 8004750:	eb46 0406 	adc.w	r4, r6, r6
 8004754:	461a      	mov	r2, r3
 8004756:	4623      	mov	r3, r4
 8004758:	f7fb fd5c 	bl	8000214 <__aeabi_uldivmod>
 800475c:	4603      	mov	r3, r0
 800475e:	460c      	mov	r4, r1
 8004760:	461a      	mov	r2, r3
 8004762:	4b8b      	ldr	r3, [pc, #556]	; (8004990 <UART_SetConfig+0x384>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a86      	ldr	r2, [pc, #536]	; (8004990 <UART_SetConfig+0x384>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004784:	4498      	add	r8, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	461d      	mov	r5, r3
 800478a:	f04f 0600 	mov.w	r6, #0
 800478e:	46a9      	mov	r9, r5
 8004790:	46b2      	mov	sl, r6
 8004792:	eb19 0309 	adds.w	r3, r9, r9
 8004796:	eb4a 040a 	adc.w	r4, sl, sl
 800479a:	4699      	mov	r9, r3
 800479c:	46a2      	mov	sl, r4
 800479e:	eb19 0905 	adds.w	r9, r9, r5
 80047a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047ba:	4689      	mov	r9, r1
 80047bc:	4692      	mov	sl, r2
 80047be:	eb19 0005 	adds.w	r0, r9, r5
 80047c2:	eb4a 0106 	adc.w	r1, sl, r6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	461d      	mov	r5, r3
 80047cc:	f04f 0600 	mov.w	r6, #0
 80047d0:	196b      	adds	r3, r5, r5
 80047d2:	eb46 0406 	adc.w	r4, r6, r6
 80047d6:	461a      	mov	r2, r3
 80047d8:	4623      	mov	r3, r4
 80047da:	f7fb fd1b 	bl	8000214 <__aeabi_uldivmod>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	461a      	mov	r2, r3
 80047e4:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <UART_SetConfig+0x384>)
 80047e6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2164      	movs	r1, #100	; 0x64
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	3332      	adds	r3, #50	; 0x32
 80047f8:	4a65      	ldr	r2, [pc, #404]	; (8004990 <UART_SetConfig+0x384>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	f003 0207 	and.w	r2, r3, #7
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4442      	add	r2, r8
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	e26f      	b.n	8004cee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800480e:	f7fe ffd1 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004812:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	461d      	mov	r5, r3
 8004818:	f04f 0600 	mov.w	r6, #0
 800481c:	46a8      	mov	r8, r5
 800481e:	46b1      	mov	r9, r6
 8004820:	eb18 0308 	adds.w	r3, r8, r8
 8004824:	eb49 0409 	adc.w	r4, r9, r9
 8004828:	4698      	mov	r8, r3
 800482a:	46a1      	mov	r9, r4
 800482c:	eb18 0805 	adds.w	r8, r8, r5
 8004830:	eb49 0906 	adc.w	r9, r9, r6
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004840:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004844:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004848:	4688      	mov	r8, r1
 800484a:	4691      	mov	r9, r2
 800484c:	eb18 0005 	adds.w	r0, r8, r5
 8004850:	eb49 0106 	adc.w	r1, r9, r6
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	461d      	mov	r5, r3
 800485a:	f04f 0600 	mov.w	r6, #0
 800485e:	196b      	adds	r3, r5, r5
 8004860:	eb46 0406 	adc.w	r4, r6, r6
 8004864:	461a      	mov	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	f7fb fcd4 	bl	8000214 <__aeabi_uldivmod>
 800486c:	4603      	mov	r3, r0
 800486e:	460c      	mov	r4, r1
 8004870:	461a      	mov	r2, r3
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <UART_SetConfig+0x384>)
 8004874:	fba3 2302 	umull	r2, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	461d      	mov	r5, r3
 8004882:	f04f 0600 	mov.w	r6, #0
 8004886:	46a9      	mov	r9, r5
 8004888:	46b2      	mov	sl, r6
 800488a:	eb19 0309 	adds.w	r3, r9, r9
 800488e:	eb4a 040a 	adc.w	r4, sl, sl
 8004892:	4699      	mov	r9, r3
 8004894:	46a2      	mov	sl, r4
 8004896:	eb19 0905 	adds.w	r9, r9, r5
 800489a:	eb4a 0a06 	adc.w	sl, sl, r6
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048b2:	4689      	mov	r9, r1
 80048b4:	4692      	mov	sl, r2
 80048b6:	eb19 0005 	adds.w	r0, r9, r5
 80048ba:	eb4a 0106 	adc.w	r1, sl, r6
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	461d      	mov	r5, r3
 80048c4:	f04f 0600 	mov.w	r6, #0
 80048c8:	196b      	adds	r3, r5, r5
 80048ca:	eb46 0406 	adc.w	r4, r6, r6
 80048ce:	461a      	mov	r2, r3
 80048d0:	4623      	mov	r3, r4
 80048d2:	f7fb fc9f 	bl	8000214 <__aeabi_uldivmod>
 80048d6:	4603      	mov	r3, r0
 80048d8:	460c      	mov	r4, r1
 80048da:	461a      	mov	r2, r3
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <UART_SetConfig+0x384>)
 80048de:	fba3 1302 	umull	r1, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2164      	movs	r1, #100	; 0x64
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	3332      	adds	r3, #50	; 0x32
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <UART_SetConfig+0x384>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048fe:	4498      	add	r8, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	461d      	mov	r5, r3
 8004904:	f04f 0600 	mov.w	r6, #0
 8004908:	46a9      	mov	r9, r5
 800490a:	46b2      	mov	sl, r6
 800490c:	eb19 0309 	adds.w	r3, r9, r9
 8004910:	eb4a 040a 	adc.w	r4, sl, sl
 8004914:	4699      	mov	r9, r3
 8004916:	46a2      	mov	sl, r4
 8004918:	eb19 0905 	adds.w	r9, r9, r5
 800491c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800492c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004930:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004934:	4689      	mov	r9, r1
 8004936:	4692      	mov	sl, r2
 8004938:	eb19 0005 	adds.w	r0, r9, r5
 800493c:	eb4a 0106 	adc.w	r1, sl, r6
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	461d      	mov	r5, r3
 8004946:	f04f 0600 	mov.w	r6, #0
 800494a:	196b      	adds	r3, r5, r5
 800494c:	eb46 0406 	adc.w	r4, r6, r6
 8004950:	461a      	mov	r2, r3
 8004952:	4623      	mov	r3, r4
 8004954:	f7fb fc5e 	bl	8000214 <__aeabi_uldivmod>
 8004958:	4603      	mov	r3, r0
 800495a:	460c      	mov	r4, r1
 800495c:	461a      	mov	r2, r3
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <UART_SetConfig+0x384>)
 8004960:	fba3 1302 	umull	r1, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	2164      	movs	r1, #100	; 0x64
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	3332      	adds	r3, #50	; 0x32
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <UART_SetConfig+0x384>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	f003 0207 	and.w	r2, r3, #7
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4442      	add	r2, r8
 8004984:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004986:	e1b2      	b.n	8004cee <UART_SetConfig+0x6e2>
 8004988:	40011000 	.word	0x40011000
 800498c:	40011400 	.word	0x40011400
 8004990:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4ad7      	ldr	r2, [pc, #860]	; (8004cf8 <UART_SetConfig+0x6ec>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d005      	beq.n	80049aa <UART_SetConfig+0x39e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4ad6      	ldr	r2, [pc, #856]	; (8004cfc <UART_SetConfig+0x6f0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	f040 80d1 	bne.w	8004b4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049aa:	f7fe ff17 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 80049ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	469a      	mov	sl, r3
 80049b4:	f04f 0b00 	mov.w	fp, #0
 80049b8:	46d0      	mov	r8, sl
 80049ba:	46d9      	mov	r9, fp
 80049bc:	eb18 0308 	adds.w	r3, r8, r8
 80049c0:	eb49 0409 	adc.w	r4, r9, r9
 80049c4:	4698      	mov	r8, r3
 80049c6:	46a1      	mov	r9, r4
 80049c8:	eb18 080a 	adds.w	r8, r8, sl
 80049cc:	eb49 090b 	adc.w	r9, r9, fp
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049e4:	4688      	mov	r8, r1
 80049e6:	4691      	mov	r9, r2
 80049e8:	eb1a 0508 	adds.w	r5, sl, r8
 80049ec:	eb4b 0609 	adc.w	r6, fp, r9
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4619      	mov	r1, r3
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f04f 0400 	mov.w	r4, #0
 8004a02:	0094      	lsls	r4, r2, #2
 8004a04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a08:	008b      	lsls	r3, r1, #2
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	4628      	mov	r0, r5
 8004a10:	4631      	mov	r1, r6
 8004a12:	f7fb fbff 	bl	8000214 <__aeabi_uldivmod>
 8004a16:	4603      	mov	r3, r0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4bb8      	ldr	r3, [pc, #736]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	469b      	mov	fp, r3
 8004a2c:	f04f 0c00 	mov.w	ip, #0
 8004a30:	46d9      	mov	r9, fp
 8004a32:	46e2      	mov	sl, ip
 8004a34:	eb19 0309 	adds.w	r3, r9, r9
 8004a38:	eb4a 040a 	adc.w	r4, sl, sl
 8004a3c:	4699      	mov	r9, r3
 8004a3e:	46a2      	mov	sl, r4
 8004a40:	eb19 090b 	adds.w	r9, r9, fp
 8004a44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a5c:	4689      	mov	r9, r1
 8004a5e:	4692      	mov	sl, r2
 8004a60:	eb1b 0509 	adds.w	r5, fp, r9
 8004a64:	eb4c 060a 	adc.w	r6, ip, sl
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	f04f 0400 	mov.w	r4, #0
 8004a7a:	0094      	lsls	r4, r2, #2
 8004a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a80:	008b      	lsls	r3, r1, #2
 8004a82:	461a      	mov	r2, r3
 8004a84:	4623      	mov	r3, r4
 8004a86:	4628      	mov	r0, r5
 8004a88:	4631      	mov	r1, r6
 8004a8a:	f7fb fbc3 	bl	8000214 <__aeabi_uldivmod>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	460c      	mov	r4, r1
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b9a      	ldr	r3, [pc, #616]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004a96:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2164      	movs	r1, #100	; 0x64
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	; 0x32
 8004aa8:	4a95      	ldr	r2, [pc, #596]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab4:	4498      	add	r8, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	469b      	mov	fp, r3
 8004aba:	f04f 0c00 	mov.w	ip, #0
 8004abe:	46d9      	mov	r9, fp
 8004ac0:	46e2      	mov	sl, ip
 8004ac2:	eb19 0309 	adds.w	r3, r9, r9
 8004ac6:	eb4a 040a 	adc.w	r4, sl, sl
 8004aca:	4699      	mov	r9, r3
 8004acc:	46a2      	mov	sl, r4
 8004ace:	eb19 090b 	adds.w	r9, r9, fp
 8004ad2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ae6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004aea:	4689      	mov	r9, r1
 8004aec:	4692      	mov	sl, r2
 8004aee:	eb1b 0509 	adds.w	r5, fp, r9
 8004af2:	eb4c 060a 	adc.w	r6, ip, sl
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4619      	mov	r1, r3
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	f04f 0400 	mov.w	r4, #0
 8004b08:	0094      	lsls	r4, r2, #2
 8004b0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b0e:	008b      	lsls	r3, r1, #2
 8004b10:	461a      	mov	r2, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	4628      	mov	r0, r5
 8004b16:	4631      	mov	r1, r6
 8004b18:	f7fb fb7c 	bl	8000214 <__aeabi_uldivmod>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	461a      	mov	r2, r3
 8004b22:	4b77      	ldr	r3, [pc, #476]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004b24:	fba3 1302 	umull	r1, r3, r3, r2
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	2164      	movs	r1, #100	; 0x64
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	3332      	adds	r3, #50	; 0x32
 8004b36:	4a72      	ldr	r2, [pc, #456]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4442      	add	r2, r8
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	e0d0      	b.n	8004cee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7fe fe32 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004b50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	469a      	mov	sl, r3
 8004b56:	f04f 0b00 	mov.w	fp, #0
 8004b5a:	46d0      	mov	r8, sl
 8004b5c:	46d9      	mov	r9, fp
 8004b5e:	eb18 0308 	adds.w	r3, r8, r8
 8004b62:	eb49 0409 	adc.w	r4, r9, r9
 8004b66:	4698      	mov	r8, r3
 8004b68:	46a1      	mov	r9, r4
 8004b6a:	eb18 080a 	adds.w	r8, r8, sl
 8004b6e:	eb49 090b 	adc.w	r9, r9, fp
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b86:	4688      	mov	r8, r1
 8004b88:	4691      	mov	r9, r2
 8004b8a:	eb1a 0508 	adds.w	r5, sl, r8
 8004b8e:	eb4b 0609 	adc.w	r6, fp, r9
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4619      	mov	r1, r3
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	f04f 0400 	mov.w	r4, #0
 8004ba4:	0094      	lsls	r4, r2, #2
 8004ba6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004baa:	008b      	lsls	r3, r1, #2
 8004bac:	461a      	mov	r2, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	f7fb fb2e 	bl	8000214 <__aeabi_uldivmod>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	469b      	mov	fp, r3
 8004bce:	f04f 0c00 	mov.w	ip, #0
 8004bd2:	46d9      	mov	r9, fp
 8004bd4:	46e2      	mov	sl, ip
 8004bd6:	eb19 0309 	adds.w	r3, r9, r9
 8004bda:	eb4a 040a 	adc.w	r4, sl, sl
 8004bde:	4699      	mov	r9, r3
 8004be0:	46a2      	mov	sl, r4
 8004be2:	eb19 090b 	adds.w	r9, r9, fp
 8004be6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bfe:	4689      	mov	r9, r1
 8004c00:	4692      	mov	sl, r2
 8004c02:	eb1b 0509 	adds.w	r5, fp, r9
 8004c06:	eb4c 060a 	adc.w	r6, ip, sl
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	f04f 0400 	mov.w	r4, #0
 8004c1c:	0094      	lsls	r4, r2, #2
 8004c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c22:	008b      	lsls	r3, r1, #2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	4628      	mov	r0, r5
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	f7fb faf2 	bl	8000214 <__aeabi_uldivmod>
 8004c30:	4603      	mov	r3, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b32      	ldr	r3, [pc, #200]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004c38:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	2164      	movs	r1, #100	; 0x64
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	3332      	adds	r3, #50	; 0x32
 8004c4a:	4a2d      	ldr	r2, [pc, #180]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c56:	4498      	add	r8, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	469b      	mov	fp, r3
 8004c5c:	f04f 0c00 	mov.w	ip, #0
 8004c60:	46d9      	mov	r9, fp
 8004c62:	46e2      	mov	sl, ip
 8004c64:	eb19 0309 	adds.w	r3, r9, r9
 8004c68:	eb4a 040a 	adc.w	r4, sl, sl
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	46a2      	mov	sl, r4
 8004c70:	eb19 090b 	adds.w	r9, r9, fp
 8004c74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c8c:	4689      	mov	r9, r1
 8004c8e:	4692      	mov	sl, r2
 8004c90:	eb1b 0509 	adds.w	r5, fp, r9
 8004c94:	eb4c 060a 	adc.w	r6, ip, sl
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	f04f 0400 	mov.w	r4, #0
 8004caa:	0094      	lsls	r4, r2, #2
 8004cac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cb0:	008b      	lsls	r3, r1, #2
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	4631      	mov	r1, r6
 8004cba:	f7fb faab 	bl	8000214 <__aeabi_uldivmod>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2164      	movs	r1, #100	; 0x64
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	3332      	adds	r3, #50	; 0x32
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <UART_SetConfig+0x6f4>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4442      	add	r2, r8
 8004cea:	609a      	str	r2, [r3, #8]
}
 8004cec:	e7ff      	b.n	8004cee <UART_SetConfig+0x6e2>
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	40011000 	.word	0x40011000
 8004cfc:	40011400 	.word	0x40011400
 8004d00:	51eb851f 	.word	0x51eb851f

08004d04 <_ZN4OLEDC1Ev>:

#include "RJA_SSD1306.h"

constexpr unsigned char OLED::font1[];

OLED::OLED()
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <_ZN4OLEDC1Ev+0x30>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2278      	movs	r2, #120	; 0x78
 8004d16:	711a      	strb	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	227a      	movs	r2, #122	; 0x7a
 8004d1c:	715a      	strb	r2, [r3, #5]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	719a      	strb	r2, [r3, #6]
{
	// TODO Auto-generated constructor stub

}
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	08005c48 	.word	0x08005c48

08004d38 <_ZN4OLEDD1Ev>:

OLED::~OLED()
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <_ZN4OLEDD1Ev+0x1c>)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	08005c48 	.word	0x08005c48

08004d58 <_ZN4OLEDD0Ev>:
OLED::~OLED()
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
}
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ffe9 	bl	8004d38 <_ZN4OLEDD1Ev>
 8004d66:	f242 010c 	movw	r1, #8204	; 0x200c
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 face 	bl	800530c <_ZdlPvj>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <_ZN4OLED4initEP19__I2C_HandleTypeDef>:

void OLED::init(I2C_HandleTypeDef *hi2c1)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b088      	sub	sp, #32
 8004d7e:	af02      	add	r7, sp, #8
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
	uint8_t I2CBuff[2];
		//uint16_t OLEDCAddress = 0x78;
		hi2cI = hi2c1;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	609a      	str	r2, [r3, #8]

		//display off
		I2CBuff[0] = 0x00;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 8004d8e:	23ae      	movs	r3, #174	; 0xae
 8004d90:	737b      	strb	r3, [r7, #13]
		//memory mode: horizontal addressing
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6898      	ldr	r0, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	791b      	ldrb	r3, [r3, #4]
 8004d9a:	b299      	uxth	r1, r3
 8004d9c:	f107 020c 	add.w	r2, r7, #12
 8004da0:	230a      	movs	r3, #10
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2302      	movs	r3, #2
 8004da6:	f7fd ffdd 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004daa:	2300      	movs	r3, #0
 8004dac:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x20;	//memory mode
 8004dae:	2320      	movs	r3, #32
 8004db0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6898      	ldr	r0, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	791b      	ldrb	r3, [r3, #4]
 8004dba:	b299      	uxth	r1, r3
 8004dbc:	f107 020c 	add.w	r2, r7, #12
 8004dc0:	230a      	movs	r3, #10
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f7fd ffcd 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00;	//horizontal addressing
 8004dce:	2300      	movs	r3, #0
 8004dd0:	737b      	strb	r3, [r7, #13]
		//scan starting line
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6898      	ldr	r0, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	791b      	ldrb	r3, [r3, #4]
 8004dda:	b299      	uxth	r1, r3
 8004ddc:	f107 020c 	add.w	r2, r7, #12
 8004de0:	230a      	movs	r3, #10
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2302      	movs	r3, #2
 8004de6:	f7fd ffbd 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004dea:	2300      	movs	r3, #0
 8004dec:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 8004dee:	2340      	movs	r3, #64	; 0x40
 8004df0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6898      	ldr	r0, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	b299      	uxth	r1, r3
 8004dfc:	f107 020c 	add.w	r2, r7, #12
 8004e00:	230a      	movs	r3, #10
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2302      	movs	r3, #2
 8004e06:	f7fd ffad 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 8004e0e:	2300      	movs	r3, #0
 8004e10:	737b      	strb	r3, [r7, #13]
		//charge pump on (2 commands)
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6898      	ldr	r0, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	791b      	ldrb	r3, [r3, #4]
 8004e1a:	b299      	uxth	r1, r3
 8004e1c:	f107 020c 	add.w	r2, r7, #12
 8004e20:	230a      	movs	r3, #10
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2302      	movs	r3, #2
 8004e26:	f7fd ff9d 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x8D;
 8004e2e:	238d      	movs	r3, #141	; 0x8d
 8004e30:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6898      	ldr	r0, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	791b      	ldrb	r3, [r3, #4]
 8004e3a:	b299      	uxth	r1, r3
 8004e3c:	f107 020c 	add.w	r2, r7, #12
 8004e40:	230a      	movs	r3, #10
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2302      	movs	r3, #2
 8004e46:	f7fd ff8d 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x14;
 8004e4e:	2314      	movs	r3, #20
 8004e50:	737b      	strb	r3, [r7, #13]
		//entire display on, from RAM content
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6898      	ldr	r0, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	791b      	ldrb	r3, [r3, #4]
 8004e5a:	b299      	uxth	r1, r3
 8004e5c:	f107 020c 	add.w	r2, r7, #12
 8004e60:	230a      	movs	r3, #10
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	2302      	movs	r3, #2
 8004e66:	f7fd ff7d 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 8004e6e:	23a4      	movs	r3, #164	; 0xa4
 8004e70:	737b      	strb	r3, [r7, #13]
		//display on
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6898      	ldr	r0, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	791b      	ldrb	r3, [r3, #4]
 8004e7a:	b299      	uxth	r1, r3
 8004e7c:	f107 020c 	add.w	r2, r7, #12
 8004e80:	230a      	movs	r3, #10
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2302      	movs	r3, #2
 8004e86:	f7fd ff6d 	bl	8002d64 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 8004e8e:	23af      	movs	r3, #175	; 0xaf
 8004e90:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6898      	ldr	r0, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	b299      	uxth	r1, r3
 8004e9c:	f107 020c 	add.w	r2, r7, #12
 8004ea0:	230a      	movs	r3, #10
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f7fd ff5d 	bl	8002d64 <HAL_I2C_Master_Transmit>

		//initialise frame to zeros i.e. "empty" GDDRAM
		for(int r = 0; r < 64; r++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b3f      	cmp	r3, #63	; 0x3f
 8004eb2:	dc15      	bgt.n	8004ee0 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x166>
		{
			for(int c = 0; c < 128; c++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b7f      	cmp	r3, #127	; 0x7f
 8004ebc:	dc0c      	bgt.n	8004ed8 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x15e>
			{
				//pixel(c,r,0);	//problem!
				frame[c][r] = 0;
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	019b      	lsls	r3, r3, #6
 8004ec4:	441a      	add	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	330c      	adds	r3, #12
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
			for(int c = 0; c < 128; c++)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	e7ef      	b.n	8004eb8 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x13e>
		for(int r = 0; r < 64; r++)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3301      	adds	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e7e6      	b.n	8004eae <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x134>
			}
		}
}
 8004ee0:	bf00      	nop
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_ZN4OLED14drawFullscreenEv>:

void OLED::drawFullscreen() //I2C_HandleTypeDef *hi2c1
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	; 0x30
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
	uint8_t I2CBuff[2];
	int r, c, b, row, col;
	for (r = 0; r < 8; r++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	2b07      	cmp	r3, #7
 8004ef8:	dc40      	bgt.n	8004f7c <_ZN4OLED14drawFullscreenEv+0x94>
	{
		for (c = 0; c < 128; c++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	2b7f      	cmp	r3, #127	; 0x7f
 8004f02:	dc37      	bgt.n	8004f74 <_ZN4OLED14drawFullscreenEv+0x8c>
		{
			uint8_t temp = 0x00;
 8004f04:	2300      	movs	r3, #0
 8004f06:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	2b07      	cmp	r3, #7
 8004f10:	dc1c      	bgt.n	8004f4c <_ZN4OLED14drawFullscreenEv+0x64>
			{
				row = r*8 + b;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
				col = c;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	613b      	str	r3, [r7, #16]
				temp |= (frame[col][row]) << b;
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	441a      	add	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	b25a      	sxtb	r2, r3
 8004f3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b25b      	sxtb	r3, r3
 8004f42:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e7df      	b.n	8004f0c <_ZN4OLED14drawFullscreenEv+0x24>
			}
			//
			I2CBuff[0] = 0x40;	//to write data
 8004f4c:	2340      	movs	r3, #64	; 0x40
 8004f4e:	733b      	strb	r3, [r7, #12]
			I2CBuff[1] = temp;
 8004f50:	7efb      	ldrb	r3, [r7, #27]
 8004f52:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6898      	ldr	r0, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	791b      	ldrb	r3, [r3, #4]
 8004f5c:	b299      	uxth	r1, r3
 8004f5e:	f107 020c 	add.w	r2, r7, #12
 8004f62:	2305      	movs	r3, #5
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2302      	movs	r3, #2
 8004f68:	f7fd fefc 	bl	8002d64 <HAL_I2C_Master_Transmit>
		for (c = 0; c < 128; c++)
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	e7c4      	b.n	8004efe <_ZN4OLED14drawFullscreenEv+0x16>
	for (r = 0; r < 8; r++)
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	3301      	adds	r3, #1
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	e7bb      	b.n	8004ef4 <_ZN4OLED14drawFullscreenEv+0xc>
		}
	}
}
 8004f7c:	bf00      	nop
 8004f7e:	3728      	adds	r7, #40	; 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_ZN4OLED11getCAddressEv>:
	}
	HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
}

uint8_t OLED::getCAddress()
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	return CAddress;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <_ZN4OLED5pixelEiibb>:
{
	return DAddress;
}

void OLED::pixel(int x, int y, bool colour, bool locked)	//use locked when inconvenient to lock from outside
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	70fb      	strb	r3, [r7, #3]
	if(locked)
 8004faa:	7e3b      	ldrb	r3, [r7, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <_ZN4OLED5pixelEiibb+0x2c>
	{
		if(x < 0 || y < 0 || x >= width || y >= height)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	db12      	blt.n	8004fdc <_ZN4OLED5pixelEiibb+0x40>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	db0f      	blt.n	8004fdc <_ZN4OLED5pixelEiibb+0x40>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc0:	dc0c      	bgt.n	8004fdc <_ZN4OLED5pixelEiibb+0x40>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8004fc6:	dc09      	bgt.n	8004fdc <_ZN4OLED5pixelEiibb+0x40>
		{
			return;
		}
	}
	frame[x][y] = colour;
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	441a      	add	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e000      	b.n	8004fde <_ZN4OLED5pixelEiibb+0x42>
			return;
 8004fdc:	bf00      	nop
}
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <_ZN4OLED8fillRectEiiiib>:
	line(x0, y0, x0, y0+rectHeight, colour, lineWidth);
	line(x1, y1-rectHeight, x1, y1, colour, lineWidth);
}

void OLED::fillRect(int x0, int y0, int x1, int y1, bool colour)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
	fill(x0, y0, x1, y1, colour);
 8004ff6:	7f3b      	ldrb	r3, [r7, #28]
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f829 	bl	800505c <_ZN4OLED4fillEiiiib>
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <_ZN4OLED4fillEb>:
	connectPoints(X, Y, pointsNum, colour, lineWidth);
	line(X[pointsNum - 1], Y[pointsNum - 1], X[0], Y[0], colour, lineWidth);
}

void OLED::fill(bool colour)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af02      	add	r7, sp, #8
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	70fb      	strb	r3, [r7, #3]
	for(int r = 0; r < 64; r++)
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b3f      	cmp	r3, #63	; 0x3f
 8005026:	dc15      	bgt.n	8005054 <_ZN4OLED4fillEb+0x42>
	{
		for(int c = 0; c < 128; c++)
 8005028:	2300      	movs	r3, #0
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b7f      	cmp	r3, #127	; 0x7f
 8005030:	dc0c      	bgt.n	800504c <_ZN4OLED4fillEb+0x3a>
		{
			pixel(c,r,colour);	//frame[c][r] = colour;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	2300      	movs	r3, #0
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff ffac 	bl	8004f9c <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	3301      	adds	r3, #1
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	e7ef      	b.n	800502c <_ZN4OLED4fillEb+0x1a>
	for(int r = 0; r < 64; r++)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e7e6      	b.n	8005022 <_ZN4OLED4fillEb+0x10>
		}
	}
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <_ZN4OLED4fillEiiiib>:
void OLED::fill(int x0, int y0, int x1, int y1, bool colour)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
	for(int r = y0; r <= y1; r++)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	429a      	cmp	r2, r3
 8005074:	dc17      	bgt.n	80050a6 <_ZN4OLED4fillEiiiib+0x4a>
	{
		for(int c = x0; c <= x1; c++)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	dc0d      	bgt.n	800509e <_ZN4OLED4fillEiiiib+0x42>
		{
			pixel(c, r, colour, 1);	//frame[c][r] = colour;
 8005082:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005086:	2301      	movs	r3, #1
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	6939      	ldr	r1, [r7, #16]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff ff83 	bl	8004f9c <_ZN4OLED5pixelEiibb>
		for(int c = x0; c <= x1; c++)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3301      	adds	r3, #1
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e7ed      	b.n	800507a <_ZN4OLED4fillEiiiib+0x1e>
	for(int r = y0; r <= y1; r++)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	3301      	adds	r3, #1
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e7e3      	b.n	800506e <_ZN4OLED4fillEiiiib+0x12>
		}
	}
}
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <_ZN4OLED9characterEiihbbi>:
		}
	}
}

void OLED::character(int x, int y, unsigned char c, bool colour, bool bg, int size)
{
 80050b0:	b5b0      	push	{r4, r5, r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	70fb      	strb	r3, [r7, #3]
	if((x >= width)            || // Clip right
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b7f      	cmp	r3, #127	; 0x7f
 80050c2:	f300 80df 	bgt.w	8005284 <_ZN4OLED9characterEiihbbi+0x1d4>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b3f      	cmp	r3, #63	; 0x3f
 80050ca:	f300 80db 	bgt.w	8005284 <_ZN4OLED9characterEiihbbi+0x1d4>
	 (y >= height)           || // Clip bottom
	 ((x + 6 * size - 1) < 0) || // Clip left
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	461a      	mov	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4413      	add	r3, r2
 80050de:	3b01      	subs	r3, #1
	 (y >= height)           || // Clip bottom
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f2c0 80cf 	blt.w	8005284 <_ZN4OLED9characterEiihbbi+0x1d4>
	 ((y + 8 * size - 1) < 0))   // Clip top
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	00da      	lsls	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	3b01      	subs	r3, #1
	 ((x + 6 * size - 1) < 0) || // Clip left
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f2c0 80c7 	blt.w	8005284 <_ZN4OLED9characterEiihbbi+0x1d4>
	return;

	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	799b      	ldrb	r3, [r3, #6]
 80050fa:	f083 0301 	eor.w	r3, r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <_ZN4OLED9characterEiihbbi+0x60>
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	2baf      	cmp	r3, #175	; 0xaf
 8005108:	d902      	bls.n	8005110 <_ZN4OLED9characterEiihbbi+0x60>
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	3301      	adds	r3, #1
 800510e:	70fb      	strb	r3, [r7, #3]

	for (int8_t i=0; i<6; i++ )
 8005110:	2300      	movs	r3, #0
 8005112:	75fb      	strb	r3, [r7, #23]
 8005114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005118:	2b05      	cmp	r3, #5
 800511a:	f300 80b4 	bgt.w	8005286 <_ZN4OLED9characterEiihbbi+0x1d6>
	{
		uint8_t line;
		if (i == 5)
 800511e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d102      	bne.n	800512c <_ZN4OLED9characterEiihbbi+0x7c>
			line = 0x0;
 8005126:	2300      	movs	r3, #0
 8005128:	75bb      	strb	r3, [r7, #22]
 800512a:	e009      	b.n	8005140 <_ZN4OLED9characterEiihbbi+0x90>
		else
		{
			line = pgm_read_byte(&font1[(c*5)+i]);
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005138:	4413      	add	r3, r2
 800513a:	4a54      	ldr	r2, [pc, #336]	; (800528c <_ZN4OLED9characterEiihbbi+0x1dc>)
 800513c:	5cd3      	ldrb	r3, [r2, r3]
 800513e:	75bb      	strb	r3, [r7, #22]
		}
		for (int8_t j = 0; j<8; j++)
 8005140:	2300      	movs	r3, #0
 8005142:	757b      	strb	r3, [r7, #21]
 8005144:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005148:	2b07      	cmp	r3, #7
 800514a:	f300 8094 	bgt.w	8005276 <_ZN4OLED9characterEiihbbi+0x1c6>
		{
			if (line & 0x1)
 800514e:	7dbb      	ldrb	r3, [r7, #22]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d03f      	beq.n	80051d8 <_ZN4OLED9characterEiihbbi+0x128>
			{
				if (size == 1) // default size
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2b01      	cmp	r3, #1
 800515c:	d110      	bne.n	8005180 <_ZN4OLED9characterEiihbbi+0xd0>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = colour;
 800515e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	18d1      	adds	r1, r2, r3
 8005166:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	441a      	add	r2, r3
 800516e:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8005172:	2301      	movs	r3, #1
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	4603      	mov	r3, r0
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff ff0f 	bl	8004f9c <_ZN4OLED5pixelEiibb>
 800517e:	e070      	b.n	8005262 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), colour);
 8005180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005186:	fb02 f203 	mul.w	r2, r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	18d0      	adds	r0, r2, r3
 800518e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005194:	fb02 f203 	mul.w	r2, r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	18d4      	adds	r4, r2, r3
 800519c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	441a      	add	r2, r3
 80051a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	18d5      	adds	r5, r2, r3
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	441a      	add	r2, r3
 80051b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80051ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	4413      	add	r3, r2
 80051c2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80051c6:	9201      	str	r2, [sp, #4]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	462b      	mov	r3, r5
 80051cc:	4622      	mov	r2, r4
 80051ce:	4601      	mov	r1, r0
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff ff09 	bl	8004fe8 <_ZN4OLED8fillRectEiiiib>
 80051d6:	e044      	b.n	8005262 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
			}
			else if (bg != colour)
 80051d8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80051dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d03e      	beq.n	8005262 <_ZN4OLED9characterEiihbbi+0x1b2>
			{
				if (size == 1) // default size
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d110      	bne.n	800520c <_ZN4OLED9characterEiihbbi+0x15c>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = bg;
 80051ea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	18d1      	adds	r1, r2, r3
 80051f2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	441a      	add	r2, r3
 80051fa:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 80051fe:	2301      	movs	r3, #1
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4603      	mov	r3, r0
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff fec9 	bl	8004f9c <_ZN4OLED5pixelEiibb>
 800520a:	e02a      	b.n	8005262 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800520c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005212:	fb02 f203 	mul.w	r2, r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	18d0      	adds	r0, r2, r3
 800521a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800521e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005220:	fb02 f203 	mul.w	r2, r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	18d4      	adds	r4, r2, r3
 8005228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	441a      	add	r2, r3
 800522e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	18d5      	adds	r5, r2, r3
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	441a      	add	r2, r3
 8005242:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	4413      	add	r3, r2
 800524e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005252:	9201      	str	r2, [sp, #4]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	462b      	mov	r3, r5
 8005258:	4622      	mov	r2, r4
 800525a:	4601      	mov	r1, r0
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff fec3 	bl	8004fe8 <_ZN4OLED8fillRectEiiiib>
				}
			}
			line >>= 1;
 8005262:	7dbb      	ldrb	r3, [r7, #22]
 8005264:	105b      	asrs	r3, r3, #1
 8005266:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j<8; j++)
 8005268:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	3301      	adds	r3, #1
 8005270:	b2db      	uxtb	r3, r3
 8005272:	757b      	strb	r3, [r7, #21]
 8005274:	e766      	b.n	8005144 <_ZN4OLED9characterEiihbbi+0x94>
	for (int8_t i=0; i<6; i++ )
 8005276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	3301      	adds	r3, #1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	75fb      	strb	r3, [r7, #23]
 8005282:	e747      	b.n	8005114 <_ZN4OLED9characterEiihbbi+0x64>
	return;
 8005284:	bf00      	nop
		}
	}
}
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bdb0      	pop	{r4, r5, r7, pc}
 800528c:	08005740 	.word	0x08005740

08005290 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>:

void OLED::text(int x, int y, string s, bool colour, bool bg, int size)
{
 8005290:	b590      	push	{r4, r7, lr}
 8005292:	b08b      	sub	sp, #44	; 0x2c
 8005294:	af04      	add	r7, sp, #16
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
	int offset = size*6;
 800529e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a0:	4613      	mov	r3, r2
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	4413      	add	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
	for(string::size_type i = 0; i < s.size(); i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	6838      	ldr	r0, [r7, #0]
 80052b0:	f000 f86c 	bl	800538c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80052b4:	4602      	mov	r2, r0
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bf34      	ite	cc
 80052bc:	2301      	movcc	r3, #1
 80052be:	2300      	movcs	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01e      	beq.n	8005304 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x74>
	{
		character(x+(offset*i), y, s[i], colour, bg, size);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	fb02 f203 	mul.w	r2, r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4413      	add	r3, r2
 80052d2:	461c      	mov	r4, r3
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f000 f85a 	bl	8005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80052dc:	4603      	mov	r3, r0
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4621      	mov	r1, r4
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff feda 	bl	80050b0 <_ZN4OLED9characterEiihbbi>
	for(string::size_type i = 0; i < s.size(); i++)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3301      	adds	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e7d4      	b.n	80052ae <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x1e>
	}
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd90      	pop	{r4, r7, pc}

0800530c <_ZdlPvj>:
 800530c:	f000 b800 	b.w	8005310 <_ZdlPv>

08005310 <_ZdlPv>:
 8005310:	f000 b8d6 	b.w	80054c0 <free>

08005314 <_ZNSaIcEC1Ev>:
 8005314:	4770      	bx	lr

08005316 <_ZNSaIcED1Ev>:
 8005316:	4770      	bx	lr

08005318 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005318:	b10a      	cbz	r2, 800531e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800531a:	f000 b8d9 	b.w	80054d0 <memcpy>
 800531e:	4770      	bx	lr

08005320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005320:	b508      	push	{r3, lr}
 8005322:	680b      	ldr	r3, [r1, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	da02      	bge.n	800532e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005328:	4809      	ldr	r0, [pc, #36]	; (8005350 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800532a:	f000 f88c 	bl	8005446 <_ZSt20__throw_length_errorPKc>
 800532e:	4293      	cmp	r3, r2
 8005330:	d908      	bls.n	8005344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005332:	0052      	lsls	r2, r2, #1
 8005334:	4293      	cmp	r3, r2
 8005336:	d205      	bcs.n	8005344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005338:	2a00      	cmp	r2, #0
 800533a:	bfb6      	itet	lt
 800533c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8005340:	600a      	strge	r2, [r1, #0]
 8005342:	600b      	strlt	r3, [r1, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800534a:	3001      	adds	r0, #1
 800534c:	f000 b85e 	b.w	800540c <_Znwj>
 8005350:	08005c7a 	.word	0x08005c7a

08005354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005354:	4603      	mov	r3, r0
 8005356:	f853 0b08 	ldr.w	r0, [r3], #8
 800535a:	4298      	cmp	r0, r3
 800535c:	d001      	beq.n	8005362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800535e:	f7ff bfd7 	b.w	8005310 <_ZdlPv>
 8005362:	4770      	bx	lr

08005364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005364:	2a01      	cmp	r2, #1
 8005366:	b510      	push	{r4, lr}
 8005368:	d102      	bne.n	8005370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800536a:	780a      	ldrb	r2, [r1, #0]
 800536c:	7002      	strb	r2, [r0, #0]
 800536e:	bd10      	pop	{r4, pc}
 8005370:	f7ff ffd2 	bl	8005318 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005374:	e7fb      	b.n	800536e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005376:	b508      	push	{r3, lr}
 8005378:	1a52      	subs	r2, r2, r1
 800537a:	f7ff fff3 	bl	8005364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800537e:	bd08      	pop	{r3, pc}

08005380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005380:	b510      	push	{r4, lr}
 8005382:	4604      	mov	r4, r0
 8005384:	f7ff ffe6 	bl	8005354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005388:	4620      	mov	r0, r4
 800538a:	bd10      	pop	{r4, pc}

0800538c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800538c:	6840      	ldr	r0, [r0, #4]
 800538e:	4770      	bx	lr

08005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8005390:	6800      	ldr	r0, [r0, #0]
 8005392:	4408      	add	r0, r1
 8005394:	4770      	bx	lr
	...

08005398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005398:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800539a:	4604      	mov	r4, r0
 800539c:	4616      	mov	r6, r2
 800539e:	460d      	mov	r5, r1
 80053a0:	b919      	cbnz	r1, 80053aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80053a2:	b112      	cbz	r2, 80053aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80053a4:	480d      	ldr	r0, [pc, #52]	; (80053dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80053a6:	f000 f84b 	bl	8005440 <_ZSt19__throw_logic_errorPKc>
 80053aa:	1b73      	subs	r3, r6, r5
 80053ac:	2b0f      	cmp	r3, #15
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	d907      	bls.n	80053c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80053b2:	2200      	movs	r2, #0
 80053b4:	a901      	add	r1, sp, #4
 80053b6:	4620      	mov	r0, r4
 80053b8:	f7ff ffb2 	bl	8005320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	6020      	str	r0, [r4, #0]
 80053c0:	60a3      	str	r3, [r4, #8]
 80053c2:	4632      	mov	r2, r6
 80053c4:	4629      	mov	r1, r5
 80053c6:	6820      	ldr	r0, [r4, #0]
 80053c8:	f7ff ffd5 	bl	8005376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80053cc:	9b01      	ldr	r3, [sp, #4]
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	6063      	str	r3, [r4, #4]
 80053d2:	2100      	movs	r1, #0
 80053d4:	54d1      	strb	r1, [r2, r3]
 80053d6:	b002      	add	sp, #8
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	bf00      	nop
 80053dc:	08005c50 	.word	0x08005c50

080053e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	f100 0308 	add.w	r3, r0, #8
 80053e6:	4604      	mov	r4, r0
 80053e8:	6003      	str	r3, [r0, #0]
 80053ea:	460d      	mov	r5, r1
 80053ec:	b159      	cbz	r1, 8005406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80053ee:	4608      	mov	r0, r1
 80053f0:	f7fa ff08 	bl	8000204 <strlen>
 80053f4:	182a      	adds	r2, r5, r0
 80053f6:	4620      	mov	r0, r4
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	4629      	mov	r1, r5
 80053fe:	f7ff ffcb 	bl	8005398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8005402:	4620      	mov	r0, r4
 8005404:	bd38      	pop	{r3, r4, r5, pc}
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
 800540a:	e7f4      	b.n	80053f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800540c <_Znwj>:
 800540c:	b510      	push	{r4, lr}
 800540e:	2800      	cmp	r0, #0
 8005410:	bf14      	ite	ne
 8005412:	4604      	movne	r4, r0
 8005414:	2401      	moveq	r4, #1
 8005416:	4620      	mov	r0, r4
 8005418:	f000 f84a 	bl	80054b0 <malloc>
 800541c:	b930      	cbnz	r0, 800542c <_Znwj+0x20>
 800541e:	f000 f807 	bl	8005430 <_ZSt15get_new_handlerv>
 8005422:	b908      	cbnz	r0, 8005428 <_Znwj+0x1c>
 8005424:	f000 f812 	bl	800544c <abort>
 8005428:	4780      	blx	r0
 800542a:	e7f4      	b.n	8005416 <_Znwj+0xa>
 800542c:	bd10      	pop	{r4, pc}
	...

08005430 <_ZSt15get_new_handlerv>:
 8005430:	4b02      	ldr	r3, [pc, #8]	; (800543c <_ZSt15get_new_handlerv+0xc>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	f3bf 8f5b 	dmb	ish
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000a298 	.word	0x2000a298

08005440 <_ZSt19__throw_logic_errorPKc>:
 8005440:	b508      	push	{r3, lr}
 8005442:	f000 f803 	bl	800544c <abort>

08005446 <_ZSt20__throw_length_errorPKc>:
 8005446:	b508      	push	{r3, lr}
 8005448:	f000 f800 	bl	800544c <abort>

0800544c <abort>:
 800544c:	b508      	push	{r3, lr}
 800544e:	2006      	movs	r0, #6
 8005450:	f000 f932 	bl	80056b8 <raise>
 8005454:	2001      	movs	r0, #1
 8005456:	f7fb fe49 	bl	80010ec <_exit>
	...

0800545c <__errno>:
 800545c:	4b01      	ldr	r3, [pc, #4]	; (8005464 <__errno+0x8>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c

08005468 <__libc_init_array>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0d      	ldr	r6, [pc, #52]	; (80054a0 <__libc_init_array+0x38>)
 800546c:	4c0d      	ldr	r4, [pc, #52]	; (80054a4 <__libc_init_array+0x3c>)
 800546e:	1ba4      	subs	r4, r4, r6
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	2500      	movs	r5, #0
 8005474:	42a5      	cmp	r5, r4
 8005476:	d109      	bne.n	800548c <__libc_init_array+0x24>
 8005478:	4e0b      	ldr	r6, [pc, #44]	; (80054a8 <__libc_init_array+0x40>)
 800547a:	4c0c      	ldr	r4, [pc, #48]	; (80054ac <__libc_init_array+0x44>)
 800547c:	f000 f93a 	bl	80056f4 <_init>
 8005480:	1ba4      	subs	r4, r4, r6
 8005482:	10a4      	asrs	r4, r4, #2
 8005484:	2500      	movs	r5, #0
 8005486:	42a5      	cmp	r5, r4
 8005488:	d105      	bne.n	8005496 <__libc_init_array+0x2e>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005490:	4798      	blx	r3
 8005492:	3501      	adds	r5, #1
 8005494:	e7ee      	b.n	8005474 <__libc_init_array+0xc>
 8005496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800549a:	4798      	blx	r3
 800549c:	3501      	adds	r5, #1
 800549e:	e7f2      	b.n	8005486 <__libc_init_array+0x1e>
 80054a0:	08005c9c 	.word	0x08005c9c
 80054a4:	08005c9c 	.word	0x08005c9c
 80054a8:	08005c9c 	.word	0x08005c9c
 80054ac:	08005ca4 	.word	0x08005ca4

080054b0 <malloc>:
 80054b0:	4b02      	ldr	r3, [pc, #8]	; (80054bc <malloc+0xc>)
 80054b2:	4601      	mov	r1, r0
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	f000 b86d 	b.w	8005594 <_malloc_r>
 80054ba:	bf00      	nop
 80054bc:	2000000c 	.word	0x2000000c

080054c0 <free>:
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <free+0xc>)
 80054c2:	4601      	mov	r1, r0
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f000 b817 	b.w	80054f8 <_free_r>
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <memcpy>:
 80054d0:	b510      	push	{r4, lr}
 80054d2:	1e43      	subs	r3, r0, #1
 80054d4:	440a      	add	r2, r1
 80054d6:	4291      	cmp	r1, r2
 80054d8:	d100      	bne.n	80054dc <memcpy+0xc>
 80054da:	bd10      	pop	{r4, pc}
 80054dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e4:	e7f7      	b.n	80054d6 <memcpy+0x6>

080054e6 <memset>:
 80054e6:	4402      	add	r2, r0
 80054e8:	4603      	mov	r3, r0
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d100      	bne.n	80054f0 <memset+0xa>
 80054ee:	4770      	bx	lr
 80054f0:	f803 1b01 	strb.w	r1, [r3], #1
 80054f4:	e7f9      	b.n	80054ea <memset+0x4>
	...

080054f8 <_free_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4605      	mov	r5, r0
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d045      	beq.n	800558c <_free_r+0x94>
 8005500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005504:	1f0c      	subs	r4, r1, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	bfb8      	it	lt
 800550a:	18e4      	addlt	r4, r4, r3
 800550c:	f000 f8f0 	bl	80056f0 <__malloc_lock>
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <_free_r+0x98>)
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	4610      	mov	r0, r2
 8005516:	b933      	cbnz	r3, 8005526 <_free_r+0x2e>
 8005518:	6063      	str	r3, [r4, #4]
 800551a:	6014      	str	r4, [r2, #0]
 800551c:	4628      	mov	r0, r5
 800551e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005522:	f000 b8e6 	b.w	80056f2 <__malloc_unlock>
 8005526:	42a3      	cmp	r3, r4
 8005528:	d90c      	bls.n	8005544 <_free_r+0x4c>
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	1862      	adds	r2, r4, r1
 800552e:	4293      	cmp	r3, r2
 8005530:	bf04      	itt	eq
 8005532:	681a      	ldreq	r2, [r3, #0]
 8005534:	685b      	ldreq	r3, [r3, #4]
 8005536:	6063      	str	r3, [r4, #4]
 8005538:	bf04      	itt	eq
 800553a:	1852      	addeq	r2, r2, r1
 800553c:	6022      	streq	r2, [r4, #0]
 800553e:	6004      	str	r4, [r0, #0]
 8005540:	e7ec      	b.n	800551c <_free_r+0x24>
 8005542:	4613      	mov	r3, r2
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	b10a      	cbz	r2, 800554c <_free_r+0x54>
 8005548:	42a2      	cmp	r2, r4
 800554a:	d9fa      	bls.n	8005542 <_free_r+0x4a>
 800554c:	6819      	ldr	r1, [r3, #0]
 800554e:	1858      	adds	r0, r3, r1
 8005550:	42a0      	cmp	r0, r4
 8005552:	d10b      	bne.n	800556c <_free_r+0x74>
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	4401      	add	r1, r0
 8005558:	1858      	adds	r0, r3, r1
 800555a:	4282      	cmp	r2, r0
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	d1dd      	bne.n	800551c <_free_r+0x24>
 8005560:	6810      	ldr	r0, [r2, #0]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	4401      	add	r1, r0
 8005568:	6019      	str	r1, [r3, #0]
 800556a:	e7d7      	b.n	800551c <_free_r+0x24>
 800556c:	d902      	bls.n	8005574 <_free_r+0x7c>
 800556e:	230c      	movs	r3, #12
 8005570:	602b      	str	r3, [r5, #0]
 8005572:	e7d3      	b.n	800551c <_free_r+0x24>
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	1821      	adds	r1, r4, r0
 8005578:	428a      	cmp	r2, r1
 800557a:	bf04      	itt	eq
 800557c:	6811      	ldreq	r1, [r2, #0]
 800557e:	6852      	ldreq	r2, [r2, #4]
 8005580:	6062      	str	r2, [r4, #4]
 8005582:	bf04      	itt	eq
 8005584:	1809      	addeq	r1, r1, r0
 8005586:	6021      	streq	r1, [r4, #0]
 8005588:	605c      	str	r4, [r3, #4]
 800558a:	e7c7      	b.n	800551c <_free_r+0x24>
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	bf00      	nop
 8005590:	2000a29c 	.word	0x2000a29c

08005594 <_malloc_r>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	1ccd      	adds	r5, r1, #3
 8005598:	f025 0503 	bic.w	r5, r5, #3
 800559c:	3508      	adds	r5, #8
 800559e:	2d0c      	cmp	r5, #12
 80055a0:	bf38      	it	cc
 80055a2:	250c      	movcc	r5, #12
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	4606      	mov	r6, r0
 80055a8:	db01      	blt.n	80055ae <_malloc_r+0x1a>
 80055aa:	42a9      	cmp	r1, r5
 80055ac:	d903      	bls.n	80055b6 <_malloc_r+0x22>
 80055ae:	230c      	movs	r3, #12
 80055b0:	6033      	str	r3, [r6, #0]
 80055b2:	2000      	movs	r0, #0
 80055b4:	bd70      	pop	{r4, r5, r6, pc}
 80055b6:	f000 f89b 	bl	80056f0 <__malloc_lock>
 80055ba:	4a21      	ldr	r2, [pc, #132]	; (8005640 <_malloc_r+0xac>)
 80055bc:	6814      	ldr	r4, [r2, #0]
 80055be:	4621      	mov	r1, r4
 80055c0:	b991      	cbnz	r1, 80055e8 <_malloc_r+0x54>
 80055c2:	4c20      	ldr	r4, [pc, #128]	; (8005644 <_malloc_r+0xb0>)
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	b91b      	cbnz	r3, 80055d0 <_malloc_r+0x3c>
 80055c8:	4630      	mov	r0, r6
 80055ca:	f000 f83d 	bl	8005648 <_sbrk_r>
 80055ce:	6020      	str	r0, [r4, #0]
 80055d0:	4629      	mov	r1, r5
 80055d2:	4630      	mov	r0, r6
 80055d4:	f000 f838 	bl	8005648 <_sbrk_r>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d124      	bne.n	8005626 <_malloc_r+0x92>
 80055dc:	230c      	movs	r3, #12
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	4630      	mov	r0, r6
 80055e2:	f000 f886 	bl	80056f2 <__malloc_unlock>
 80055e6:	e7e4      	b.n	80055b2 <_malloc_r+0x1e>
 80055e8:	680b      	ldr	r3, [r1, #0]
 80055ea:	1b5b      	subs	r3, r3, r5
 80055ec:	d418      	bmi.n	8005620 <_malloc_r+0x8c>
 80055ee:	2b0b      	cmp	r3, #11
 80055f0:	d90f      	bls.n	8005612 <_malloc_r+0x7e>
 80055f2:	600b      	str	r3, [r1, #0]
 80055f4:	50cd      	str	r5, [r1, r3]
 80055f6:	18cc      	adds	r4, r1, r3
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f87a 	bl	80056f2 <__malloc_unlock>
 80055fe:	f104 000b 	add.w	r0, r4, #11
 8005602:	1d23      	adds	r3, r4, #4
 8005604:	f020 0007 	bic.w	r0, r0, #7
 8005608:	1ac3      	subs	r3, r0, r3
 800560a:	d0d3      	beq.n	80055b4 <_malloc_r+0x20>
 800560c:	425a      	negs	r2, r3
 800560e:	50e2      	str	r2, [r4, r3]
 8005610:	e7d0      	b.n	80055b4 <_malloc_r+0x20>
 8005612:	428c      	cmp	r4, r1
 8005614:	684b      	ldr	r3, [r1, #4]
 8005616:	bf16      	itet	ne
 8005618:	6063      	strne	r3, [r4, #4]
 800561a:	6013      	streq	r3, [r2, #0]
 800561c:	460c      	movne	r4, r1
 800561e:	e7eb      	b.n	80055f8 <_malloc_r+0x64>
 8005620:	460c      	mov	r4, r1
 8005622:	6849      	ldr	r1, [r1, #4]
 8005624:	e7cc      	b.n	80055c0 <_malloc_r+0x2c>
 8005626:	1cc4      	adds	r4, r0, #3
 8005628:	f024 0403 	bic.w	r4, r4, #3
 800562c:	42a0      	cmp	r0, r4
 800562e:	d005      	beq.n	800563c <_malloc_r+0xa8>
 8005630:	1a21      	subs	r1, r4, r0
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f808 	bl	8005648 <_sbrk_r>
 8005638:	3001      	adds	r0, #1
 800563a:	d0cf      	beq.n	80055dc <_malloc_r+0x48>
 800563c:	6025      	str	r5, [r4, #0]
 800563e:	e7db      	b.n	80055f8 <_malloc_r+0x64>
 8005640:	2000a29c 	.word	0x2000a29c
 8005644:	2000a2a0 	.word	0x2000a2a0

08005648 <_sbrk_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4c06      	ldr	r4, [pc, #24]	; (8005664 <_sbrk_r+0x1c>)
 800564c:	2300      	movs	r3, #0
 800564e:	4605      	mov	r5, r0
 8005650:	4608      	mov	r0, r1
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	f7fb fd54 	bl	8001100 <_sbrk>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_sbrk_r+0x1a>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	b103      	cbz	r3, 8005662 <_sbrk_r+0x1a>
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	2000a2a8 	.word	0x2000a2a8

08005668 <_raise_r>:
 8005668:	291f      	cmp	r1, #31
 800566a:	b538      	push	{r3, r4, r5, lr}
 800566c:	4604      	mov	r4, r0
 800566e:	460d      	mov	r5, r1
 8005670:	d904      	bls.n	800567c <_raise_r+0x14>
 8005672:	2316      	movs	r3, #22
 8005674:	6003      	str	r3, [r0, #0]
 8005676:	f04f 30ff 	mov.w	r0, #4294967295
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800567e:	b112      	cbz	r2, 8005686 <_raise_r+0x1e>
 8005680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005684:	b94b      	cbnz	r3, 800569a <_raise_r+0x32>
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f830 	bl	80056ec <_getpid_r>
 800568c:	462a      	mov	r2, r5
 800568e:	4601      	mov	r1, r0
 8005690:	4620      	mov	r0, r4
 8005692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005696:	f000 b817 	b.w	80056c8 <_kill_r>
 800569a:	2b01      	cmp	r3, #1
 800569c:	d00a      	beq.n	80056b4 <_raise_r+0x4c>
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	d103      	bne.n	80056aa <_raise_r+0x42>
 80056a2:	2316      	movs	r3, #22
 80056a4:	6003      	str	r3, [r0, #0]
 80056a6:	2001      	movs	r0, #1
 80056a8:	e7e7      	b.n	800567a <_raise_r+0x12>
 80056aa:	2400      	movs	r4, #0
 80056ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80056b0:	4628      	mov	r0, r5
 80056b2:	4798      	blx	r3
 80056b4:	2000      	movs	r0, #0
 80056b6:	e7e0      	b.n	800567a <_raise_r+0x12>

080056b8 <raise>:
 80056b8:	4b02      	ldr	r3, [pc, #8]	; (80056c4 <raise+0xc>)
 80056ba:	4601      	mov	r1, r0
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f7ff bfd3 	b.w	8005668 <_raise_r>
 80056c2:	bf00      	nop
 80056c4:	2000000c 	.word	0x2000000c

080056c8 <_kill_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4c07      	ldr	r4, [pc, #28]	; (80056e8 <_kill_r+0x20>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4605      	mov	r5, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	f7fb fcf9 	bl	80010cc <_kill>
 80056da:	1c43      	adds	r3, r0, #1
 80056dc:	d102      	bne.n	80056e4 <_kill_r+0x1c>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	b103      	cbz	r3, 80056e4 <_kill_r+0x1c>
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	bd38      	pop	{r3, r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	2000a2a8 	.word	0x2000a2a8

080056ec <_getpid_r>:
 80056ec:	f7fb bce6 	b.w	80010bc <_getpid>

080056f0 <__malloc_lock>:
 80056f0:	4770      	bx	lr

080056f2 <__malloc_unlock>:
 80056f2:	4770      	bx	lr

080056f4 <_init>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr

08005700 <_fini>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr
