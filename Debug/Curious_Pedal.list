
Curious_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076f8  080076f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007700  08007700  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007700  08007700  00017700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a40  20000074  08007784  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ab4  08007784  00022ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edde  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003569  00000000  00000000  0003ee82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  000423f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a0  00000000  00000000  000437b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002856a  00000000  00000000  00044a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000102d7  00000000  00000000  0006cfc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3c4e  00000000  00000000  0007d299  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb0  00000000  00000000  00160f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007014 	.word	0x08007014

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007014 	.word	0x08007014

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b972 	b.w	8000f08 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9e08      	ldr	r6, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	4688      	mov	r8, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14b      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4615      	mov	r5, r2
 8000c4e:	d967      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0720 	rsb	r7, r2, #32
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c62:	4095      	lsls	r5, r2
 8000c64:	ea47 0803 	orr.w	r8, r7, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c74:	fa1f fc85 	uxth.w	ip, r5
 8000c78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c80:	fb07 f10c 	mul.w	r1, r7, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8e:	f080 811b 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8118 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000c98:	3f02      	subs	r7, #2
 8000c9a:	442b      	add	r3, r5
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb0:	45a4      	cmp	ip, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	192c      	adds	r4, r5, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x290>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x290>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	442c      	add	r4, r5
 8000cc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ccc:	eba4 040c 	sub.w	r4, r4, ip
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	b11e      	cbz	r6, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cdc:	4639      	mov	r1, r7
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xbe>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f000 80eb 	beq.w	8000ec2 <__udivmoddi4+0x286>
 8000cec:	2700      	movs	r7, #0
 8000cee:	e9c6 0100 	strd	r0, r1, [r6]
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f783 	clz	r7, r3
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	d147      	bne.n	8000d92 <__udivmoddi4+0x156>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd0>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2c4>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	4698      	mov	r8, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xe8>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 808f 	bne.w	8000e4c <__udivmoddi4+0x210>
 8000d2e:	1b49      	subs	r1, r1, r5
 8000d30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d34:	fa1f f885 	uxth.w	r8, r5
 8000d38:	2701      	movs	r7, #1
 8000d3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb08 f10c 	mul.w	r1, r8, ip
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x124>
 8000d50:	18eb      	adds	r3, r5, r3
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x122>
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	f200 80cd 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1a59      	subs	r1, r3, r1
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x14c>
 8000d78:	192c      	adds	r4, r5, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x14a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80b6 	bhi.w	8000ef2 <__udivmoddi4+0x2b6>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e79f      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d92:	f1c7 0c20 	rsb	ip, r7, #32
 8000d96:	40bb      	lsls	r3, r7
 8000d98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000da0:	fa01 f407 	lsl.w	r4, r1, r7
 8000da4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000db0:	4325      	orrs	r5, r4
 8000db2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db6:	0c2c      	lsrs	r4, r5, #16
 8000db8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dbc:	fa1f fa8e 	uxth.w	sl, lr
 8000dc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	fa02 f207 	lsl.w	r2, r2, r7
 8000dce:	fa00 f107 	lsl.w	r1, r0, r7
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b0>
 8000dd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	f080 8087 	bcs.w	8000eee <__udivmoddi4+0x2b2>
 8000de0:	429c      	cmp	r4, r3
 8000de2:	f240 8084 	bls.w	8000eee <__udivmoddi4+0x2b2>
 8000de6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dea:	4473      	add	r3, lr
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	b2ad      	uxth	r5, r5
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e00:	45a2      	cmp	sl, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1da>
 8000e04:	eb1e 0404 	adds.w	r4, lr, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0c:	d26b      	bcs.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e0e:	45a2      	cmp	sl, r4
 8000e10:	d969      	bls.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4474      	add	r4, lr
 8000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	eba4 040a 	sub.w	r4, r4, sl
 8000e22:	454c      	cmp	r4, r9
 8000e24:	46c2      	mov	sl, r8
 8000e26:	464b      	mov	r3, r9
 8000e28:	d354      	bcc.n	8000ed4 <__udivmoddi4+0x298>
 8000e2a:	d051      	beq.n	8000ed0 <__udivmoddi4+0x294>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d069      	beq.n	8000f04 <__udivmoddi4+0x2c8>
 8000e30:	ebb1 050a 	subs.w	r5, r1, sl
 8000e34:	eb64 0403 	sbc.w	r4, r4, r3
 8000e38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e3c:	40fd      	lsrs	r5, r7
 8000e3e:	40fc      	lsrs	r4, r7
 8000e40:	ea4c 0505 	orr.w	r5, ip, r5
 8000e44:	e9c6 5400 	strd	r5, r4, [r6]
 8000e48:	2700      	movs	r7, #0
 8000e4a:	e747      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f703 	lsr.w	r7, r0, r3
 8000e54:	4095      	lsls	r5, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e62:	4338      	orrs	r0, r7
 8000e64:	0c01      	lsrs	r1, r0, #16
 8000e66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e6a:	fa1f f885 	uxth.w	r8, r5
 8000e6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb07 f308 	mul.w	r3, r7, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x256>
 8000e82:	1869      	adds	r1, r5, r1
 8000e84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e88:	d22f      	bcs.n	8000eea <__udivmoddi4+0x2ae>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d92d      	bls.n	8000eea <__udivmoddi4+0x2ae>
 8000e8e:	3f02      	subs	r7, #2
 8000e90:	4429      	add	r1, r5
 8000e92:	1acb      	subs	r3, r1, r3
 8000e94:	b281      	uxth	r1, r0
 8000e96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb00 f308 	mul.w	r3, r0, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x27e>
 8000eaa:	1869      	adds	r1, r5, r1
 8000eac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb0:	d217      	bcs.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d915      	bls.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4429      	add	r1, r5
 8000eba:	1ac9      	subs	r1, r1, r3
 8000ebc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ec0:	e73b      	b.n	8000d3a <__udivmoddi4+0xfe>
 8000ec2:	4637      	mov	r7, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e709      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec8:	4607      	mov	r7, r0
 8000eca:	e6e7      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ed0:	4541      	cmp	r1, r8
 8000ed2:	d2ab      	bcs.n	8000e2c <__udivmoddi4+0x1f0>
 8000ed4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed8:	eb69 020e 	sbc.w	r2, r9, lr
 8000edc:	3801      	subs	r0, #1
 8000ede:	4613      	mov	r3, r2
 8000ee0:	e7a4      	b.n	8000e2c <__udivmoddi4+0x1f0>
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	e7e9      	b.n	8000eba <__udivmoddi4+0x27e>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	e795      	b.n	8000e16 <__udivmoddi4+0x1da>
 8000eea:	4667      	mov	r7, ip
 8000eec:	e7d1      	b.n	8000e92 <__udivmoddi4+0x256>
 8000eee:	4681      	mov	r9, r0
 8000ef0:	e77c      	b.n	8000dec <__udivmoddi4+0x1b0>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	442c      	add	r4, r5
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0x14c>
 8000ef8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000efc:	442b      	add	r3, r5
 8000efe:	e72f      	b.n	8000d60 <__udivmoddi4+0x124>
 8000f00:	4638      	mov	r0, r7
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xda>
 8000f04:	4637      	mov	r7, r6
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0xa0>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <_ZNSt7__cxx119to_stringEi+0x24>)
 8000f1e:	2210      	movs	r2, #16
 8000f20:	4904      	ldr	r1, [pc, #16]	; (8000f34 <_ZNSt7__cxx119to_stringEi+0x28>)
 8000f22:	f000 fce2 	bl	80018ea <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800702c 	.word	0x0800702c
 8000f34:	080069e5 	.word	0x080069e5

08000f38 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <_ZNSt7__cxx119to_stringEm+0x24>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	4904      	ldr	r1, [pc, #16]	; (8000f60 <_ZNSt7__cxx119to_stringEm+0x28>)
 8000f4e:	f000 fccc 	bl	80018ea <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08007030 	.word	0x08007030
 8000f60:	080069e5 	.word	0x080069e5

08000f64 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
OLED OLED1;

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
//First half of ADC buffer is now full
	inBufPtr =&adc_val[0];
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000f6e:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000f70:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[DATA_SIZE];
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000a80 	.word	0x20000a80
 8000f88:	20000280 	.word	0x20000280
 8000f8c:	20000a84 	.word	0x20000a84
 8000f90:	20000880 	.word	0x20000880

08000f94 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	inBufPtr =&adc_val[DATA_SIZE];
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0x24>)
 8000fa0:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[0];
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x28>)
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000a80 	.word	0x20000a80
 8000fb8:	20000480 	.word	0x20000480
 8000fbc:	20000a84 	.word	0x20000a84
 8000fc0:	20000680 	.word	0x20000680
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <_Z10effectsDSPv>:

/*
 * _________________UTILITY FUNCTIONS END_______________________________________
 */

void effectsDSP(){
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	// No -effect, just copy input to output
	for (int n=0; n< DATA_SIZE; n++){
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd6:	f300 8092 	bgt.w	80010fe <_Z10effectsDSPv+0x136>
		adc_sample = inBufPtr[n] / 4096.0f ;
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <_Z10effectsDSPv+0x150>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fee:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800111c <_Z10effectsDSPv+0x154>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <_Z10effectsDSPv+0x158>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
		adc_sample += 0.0126953f;
 8000ffc:	4b48      	ldr	r3, [pc, #288]	; (8001120 <_Z10effectsDSPv+0x158>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001124 <_Z10effectsDSPv+0x15c>
 8001006:	ee77 7a87 	vadd.f32	s15, s15, s14
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <_Z10effectsDSPv+0x158>)
 800100c:	edc3 7a00 	vstr	s15, [r3]
		if(adc_sample< 0.501 && adc_sample >  0.499)
 8001010:	4b43      	ldr	r3, [pc, #268]	; (8001120 <_Z10effectsDSPv+0x158>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fab7 	bl	8000588 <__aeabi_f2d>
 800101a:	a33b      	add	r3, pc, #236	; (adr r3, 8001108 <_Z10effectsDSPv+0x140>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff fd7c 	bl	8000b1c <__aeabi_dcmplt>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d010      	beq.n	800104c <_Z10effectsDSPv+0x84>
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <_Z10effectsDSPv+0x158>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff faaa 	bl	8000588 <__aeabi_f2d>
 8001034:	a336      	add	r3, pc, #216	; (adr r3, 8001110 <_Z10effectsDSPv+0x148>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fd8d 	bl	8000b58 <__aeabi_dcmpgt>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <_Z10effectsDSPv+0x84>
				adc_sample = 0.5;
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <_Z10effectsDSPv+0x158>)
 8001046:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800104a:	601a      	str	r2, [r3, #0]
		modified_sample= (adc_sample-0.5) / prescaler;
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <_Z10effectsDSPv+0x158>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa99 	bl	8000588 <__aeabi_f2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <_Z10effectsDSPv+0x160>)
 800105c:	f7ff f934 	bl	80002c8 <__aeabi_dsub>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4625      	mov	r5, r4
 8001066:	461c      	mov	r4, r3
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <_Z10effectsDSPv+0x164>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa79 	bl	8000564 <__aeabi_i2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff fc07 	bl	800088c <__aeabi_ddiv>
 800107e:	4603      	mov	r3, r0
 8001080:	460c      	mov	r4, r1
 8001082:	4618      	mov	r0, r3
 8001084:	4621      	mov	r1, r4
 8001086:	f7ff fd71 	bl	8000b6c <__aeabi_d2f>
 800108a:	4602      	mov	r2, r0
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <_Z10effectsDSPv+0x168>)
 800108e:	601a      	str	r2, [r3, #0]
		modified_sample -= 0.0126953f;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <_Z10effectsDSPv+0x168>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001124 <_Z10effectsDSPv+0x15c>
 800109a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <_Z10effectsDSPv+0x168>)
 80010a0:	edc3 7a00 	vstr	s15, [r3]
		modified_sample= (modified_sample+ 0.5) * 4096.0f;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <_Z10effectsDSPv+0x168>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa6d 	bl	8000588 <__aeabi_f2d>
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <_Z10effectsDSPv+0x160>)
 80010b4:	f7ff f90a 	bl	80002cc <__adddf3>
 80010b8:	4603      	mov	r3, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	4618      	mov	r0, r3
 80010be:	4621      	mov	r1, r4
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <_Z10effectsDSPv+0x16c>)
 80010c6:	f7ff fab7 	bl	8000638 <__aeabi_dmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	f7ff fd4b 	bl	8000b6c <__aeabi_d2f>
 80010d6:	4602      	mov	r2, r0
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_Z10effectsDSPv+0x168>)
 80010da:	601a      	str	r2, [r3, #0]
	    outBufPtr[n] =uint32_t( modified_sample);
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <_Z10effectsDSPv+0x168>)
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_Z10effectsDSPv+0x170>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f0:	ee17 2a90 	vmov	r2, s15
 80010f4:	601a      	str	r2, [r3, #0]
	for (int n=0; n< DATA_SIZE; n++){
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e769      	b.n	8000fd2 <_Z10effectsDSPv+0xa>
		}


}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bdb0      	pop	{r4, r5, r7, pc}
 8001106:	bf00      	nop
 8001108:	26e978d5 	.word	0x26e978d5
 800110c:	3fe00831 	.word	0x3fe00831
 8001110:	b22d0e56 	.word	0xb22d0e56
 8001114:	3fdfef9d 	.word	0x3fdfef9d
 8001118:	20000a80 	.word	0x20000a80
 800111c:	45800000 	.word	0x45800000
 8001120:	20000a88 	.word	0x20000a88
 8001124:	3c4ffff3 	.word	0x3c4ffff3
 8001128:	3fe00000 	.word	0x3fe00000
 800112c:	20000000 	.word	0x20000000
 8001130:	20000a8c 	.word	0x20000a8c
 8001134:	40b00000 	.word	0x40b00000
 8001138:	20000a84 	.word	0x20000a84

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0b0      	sub	sp, #192	; 0xc0
 8001140:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f000 ffbb 	bl	80020bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f94f 	bl	80013e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 fb49 	bl	80017e0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800114e:	f000 fb11 	bl	8001774 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001152:	f000 fae1 	bl	8001718 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001156:	f000 fa4f 	bl	80015f8 <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 800115a:	f000 f9bd 	bl	80014d8 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 800115e:	f000 fa17 	bl	8001590 <_ZL11MX_DAC_Initv>
  MX_TIM2_Init();
 8001162:	f000 fa7d 	bl	8001660 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001166:	4892      	ldr	r0, [pc, #584]	; (80013b0 <main+0x274>)
 8001168:	f003 fee3 	bl	8004f32 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, FULL_BUFFER_SIZE);
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	4990      	ldr	r1, [pc, #576]	; (80013b4 <main+0x278>)
 8001172:	4891      	ldr	r0, [pc, #580]	; (80013b8 <main+0x27c>)
 8001174:	f001 f87a 	bl	800226c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*) dac_val, FULL_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001178:	2300      	movs	r3, #0
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001180:	4a8e      	ldr	r2, [pc, #568]	; (80013bc <main+0x280>)
 8001182:	2100      	movs	r1, #0
 8001184:	488e      	ldr	r0, [pc, #568]	; (80013c0 <main+0x284>)
 8001186:	f001 fd51 	bl	8002c2c <HAL_DAC_Start_DMA>
  /*-----------------ADC AND DAC START------------------------*/

  /*-----------------SECTION_END------------------------------*/

  if(HAL_I2C_IsDeviceReady(&hi2c1, OLED1.getCAddress(), 1, 10)== HAL_OK){
 800118a:	488e      	ldr	r0, [pc, #568]	; (80013c4 <main+0x288>)
 800118c:	f004 fe6c 	bl	8005e68 <_ZN4OLED11getCAddressEv>
 8001190:	4603      	mov	r3, r0
 8001192:	b299      	uxth	r1, r3
 8001194:	230a      	movs	r3, #10
 8001196:	2201      	movs	r2, #1
 8001198:	488b      	ldr	r0, [pc, #556]	; (80013c8 <main+0x28c>)
 800119a:	f002 fe53 	bl	8003e44 <HAL_I2C_IsDeviceReady>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <main+0x8c>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2120      	movs	r1, #32
 80011b2:	4886      	ldr	r0, [pc, #536]	; (80013cc <main+0x290>)
 80011b4:	f002 fbf6 	bl	80039a4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	; 0x64
 80011ba:	f000 fff1 	bl	80021a0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	4882      	ldr	r0, [pc, #520]	; (80013cc <main+0x290>)
 80011c4:	f002 fbee 	bl	80039a4 <HAL_GPIO_WritePin>
  }

  OLED1.init(&hi2c1);
 80011c8:	497f      	ldr	r1, [pc, #508]	; (80013c8 <main+0x28c>)
 80011ca:	487e      	ldr	r0, [pc, #504]	; (80013c4 <main+0x288>)
 80011cc:	f004 fd47 	bl	8005c5e <_ZN4OLED4initEP19__I2C_HandleTypeDef>

  HAL_Delay(200);
 80011d0:	20c8      	movs	r0, #200	; 0xc8
 80011d2:	f000 ffe5 	bl	80021a0 <HAL_Delay>
    /* USER CODE BEGIN 3 */

/*-------------------------------------USER INTERFACE-------------------------------
 * All buttons and OLED updates happen in this block
 ***********************************************************************************/
	  if (HAL_GPIO_ReadPin(BRIGHT_GPIO_Port, BRIGHT_Pin) == GPIO_PIN_SET){
 80011d6:	2120      	movs	r1, #32
 80011d8:	487d      	ldr	r0, [pc, #500]	; (80013d0 <main+0x294>)
 80011da:	f002 fbcb 	bl	8003974 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d037      	beq.n	800125e <main+0x122>
		  if(prescaler<3000){
 80011ee:	4b79      	ldr	r3, [pc, #484]	; (80013d4 <main+0x298>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80011f6:	4293      	cmp	r3, r2
 80011f8:	f300 80d6 	bgt.w	80013a8 <main+0x26c>
		  prescaler+=10;
 80011fc:	4b75      	ldr	r3, [pc, #468]	; (80013d4 <main+0x298>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	330a      	adds	r3, #10
 8001202:	4a74      	ldr	r2, [pc, #464]	; (80013d4 <main+0x298>)
 8001204:	6013      	str	r3, [r2, #0]

		  OLED1.text(0,20, "PS: " + to_string(prescaler), 1, 0, 2);
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <main+0x298>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe7b 	bl	8000f0c <_ZNSt7__cxx119to_stringEi>
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	f107 021c 	add.w	r2, r7, #28
 800121c:	496e      	ldr	r1, [pc, #440]	; (80013d8 <main+0x29c>)
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fb9b 	bl	800195a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001224:	1d3a      	adds	r2, r7, #4
 8001226:	2302      	movs	r3, #2
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2300      	movs	r3, #0
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2301      	movs	r3, #1
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	4613      	mov	r3, r2
 8001234:	2214      	movs	r2, #20
 8001236:	2100      	movs	r1, #0
 8001238:	4862      	ldr	r0, [pc, #392]	; (80013c4 <main+0x288>)
 800123a:	f004 ff75 	bl	8006128 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f8a7 	bl	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4618      	mov	r0, r3
 800124c:	f005 f8a2 	bl	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  OLED1.drawFullscreen();
 8001250:	485c      	ldr	r0, [pc, #368]	; (80013c4 <main+0x288>)
 8001252:	f004 fdbb 	bl	8005dcc <_ZN4OLED14drawFullscreenEv>
		  HAL_Delay(200);}
 8001256:	20c8      	movs	r0, #200	; 0xc8
 8001258:	f000 ffa2 	bl	80021a0 <HAL_Delay>
 800125c:	e0a4      	b.n	80013a8 <main+0x26c>
	  }
	  else if (HAL_GPIO_ReadPin(BLEFT_GPIO_Port, BLEFT_Pin) == GPIO_PIN_SET){
 800125e:	2110      	movs	r1, #16
 8001260:	485b      	ldr	r0, [pc, #364]	; (80013d0 <main+0x294>)
 8001262:	f002 fb87 	bl	8003974 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d038      	beq.n	80012e8 <main+0x1ac>
		  if(prescaler>2){
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <main+0x298>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	f340 8094 	ble.w	80013a8 <main+0x26c>
		  prescaler-=10;
 8001280:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <main+0x298>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b0a      	subs	r3, #10
 8001286:	4a53      	ldr	r2, [pc, #332]	; (80013d4 <main+0x298>)
 8001288:	6013      	str	r3, [r2, #0]

		  OLED1.text(0,20, "PS: " + to_string(prescaler), 1, 0, 2);
 800128a:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <main+0x298>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe39 	bl	8000f0c <_ZNSt7__cxx119to_stringEi>
 800129a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800129e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80012a2:	494d      	ldr	r1, [pc, #308]	; (80013d8 <main+0x29c>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fb58 	bl	800195a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80012aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012ae:	2302      	movs	r3, #2
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4613      	mov	r3, r2
 80012bc:	2214      	movs	r2, #20
 80012be:	2100      	movs	r1, #0
 80012c0:	4840      	ldr	r0, [pc, #256]	; (80013c4 <main+0x288>)
 80012c2:	f004 ff31 	bl	8006128 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 80012c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 f862 	bl	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80012d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 f85d 	bl	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		  OLED1.drawFullscreen();
 80012da:	483a      	ldr	r0, [pc, #232]	; (80013c4 <main+0x288>)
 80012dc:	f004 fd76 	bl	8005dcc <_ZN4OLED14drawFullscreenEv>
		  HAL_Delay(200);
 80012e0:	20c8      	movs	r0, #200	; 0xc8
 80012e2:	f000 ff5d 	bl	80021a0 <HAL_Delay>
 80012e6:	e05f      	b.n	80013a8 <main+0x26c>
// The pcb has a wrong connection in the present version, will correct in next iteration
//	  else if (HAL_GPIO_ReadPin(BDOWN_GPIO_Port, BDOWN_Pin) == GPIO_PIN_SET){
//		  HAL_Delay(100);
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  }
     else if(HAL_GPIO_ReadPin(BUP_GPIO_Port, BUP_Pin)== GPIO_PIN_SET){
 80012e8:	2140      	movs	r1, #64	; 0x40
 80012ea:	4839      	ldr	r0, [pc, #228]	; (80013d0 <main+0x294>)
 80012ec:	f002 fb42 	bl	8003974 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	bf0c      	ite	eq
 80012f6:	2301      	moveq	r3, #1
 80012f8:	2300      	movne	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d053      	beq.n	80013a8 <main+0x26c>

	  OLED1.text(0,5, "Clean", 1, 0, 2);
 8001300:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001304:	4618      	mov	r0, r3
 8001306:	f004 ff51 	bl	80061ac <_ZNSaIcEC1Ev>
 800130a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800130e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001312:	4932      	ldr	r1, [pc, #200]	; (80013dc <main+0x2a0>)
 8001314:	4618      	mov	r0, r3
 8001316:	f005 f911 	bl	800653c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800131a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800131e:	2302      	movs	r3, #2
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2300      	movs	r3, #0
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	2301      	movs	r3, #1
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	2205      	movs	r2, #5
 800132e:	2100      	movs	r1, #0
 8001330:	4824      	ldr	r0, [pc, #144]	; (80013c4 <main+0x288>)
 8001332:	f004 fef9 	bl	8006128 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8001336:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800133a:	4618      	mov	r0, r3
 800133c:	f005 f82a 	bl	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001340:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001344:	4618      	mov	r0, r3
 8001346:	f004 ff32 	bl	80061ae <_ZNSaIcED1Ev>
	  OLED1.text(0,40, "inbuf: " + to_string(inBufPtr[0]), 1, 0, 2);
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <main+0x2a4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fdee 	bl	8000f38 <_ZNSt7__cxx119to_stringEm>
 800135c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001360:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001364:	491f      	ldr	r1, [pc, #124]	; (80013e4 <main+0x2a8>)
 8001366:	4618      	mov	r0, r3
 8001368:	f000 faf7 	bl	800195a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800136c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001370:	2302      	movs	r3, #2
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2300      	movs	r3, #0
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	2301      	movs	r3, #1
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	2228      	movs	r2, #40	; 0x28
 8001380:	2100      	movs	r1, #0
 8001382:	4810      	ldr	r0, [pc, #64]	; (80013c4 <main+0x288>)
 8001384:	f004 fed0 	bl	8006128 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8001388:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800138c:	4618      	mov	r0, r3
 800138e:	f005 f801 	bl	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001392:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001396:	4618      	mov	r0, r3
 8001398:	f004 fffc 	bl	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	  OLED1.drawFullscreen();
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <main+0x288>)
 800139e:	f004 fd15 	bl	8005dcc <_ZN4OLED14drawFullscreenEv>
	  HAL_Delay(200);
 80013a2:	20c8      	movs	r0, #200	; 0xc8
 80013a4:	f000 fefc 	bl	80021a0 <HAL_Delay>
	  }

	 /* ************************************************************************************/

	  effectsDSP(); // Process the audio
 80013a8:	f7ff fe0e 	bl	8000fc8 <_Z10effectsDSPv>
	  if (HAL_GPIO_ReadPin(BRIGHT_GPIO_Port, BRIGHT_Pin) == GPIO_PIN_SET){
 80013ac:	e713      	b.n	80011d6 <main+0x9a>
 80013ae:	bf00      	nop
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000280 	.word	0x20000280
 80013b8:	20000090 	.word	0x20000090
 80013bc:	20000680 	.word	0x20000680
 80013c0:	20000138 	.word	0x20000138
 80013c4:	20000a90 	.word	0x20000a90
 80013c8:	200001ac 	.word	0x200001ac
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	20000000 	.word	0x20000000
 80013d8:	08007034 	.word	0x08007034
 80013dc:	0800703c 	.word	0x0800703c
 80013e0:	20000a80 	.word	0x20000a80
 80013e4:	08007044 	.word	0x08007044

080013e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2234      	movs	r2, #52	; 0x34
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 f9c4 	bl	8006784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <_Z18SystemClock_Configv+0xe8>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <_Z18SystemClock_Configv+0xe8>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <_Z18SystemClock_Configv+0xe8>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <_Z18SystemClock_Configv+0xec>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <_Z18SystemClock_Configv+0xec>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <_Z18SystemClock_Configv+0xec>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001460:	2348      	movs	r3, #72	; 0x48
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001468:	2302      	movs	r3, #2
 800146a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4618      	mov	r0, r3
 8001476:	f003 fad7 	bl	8004a28 <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf14      	ite	ne
 8001480:	2301      	movne	r3, #1
 8001482:	2300      	moveq	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800148a:	f000 fa27 	bl	80018dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	230f      	movs	r3, #15
 8001490:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001492:	2302      	movs	r3, #2
 8001494:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2102      	movs	r1, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f801 	bl	80044b4 <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf14      	ite	ne
 80014b8:	2301      	movne	r3, #1
 80014ba:	2300      	moveq	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80014c2:	f000 fa0b 	bl	80018dc <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	; 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <_ZL12MX_ADC1_Initv+0xb4>)
 80014ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 8001504:	2200      	movs	r2, #0
 8001506:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 8001512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 800151a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 8001528:	2201      	movs	r2, #1
 800152a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 8001536:	2201      	movs	r2, #1
 8001538:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 800153c:	f000 fe52 	bl	80021e4 <HAL_ADC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf14      	ite	ne
 8001546:	2301      	movne	r3, #1
 8001548:	2300      	moveq	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <_ZL12MX_ADC1_Initv+0x7c>
  {
    Error_Handler();
 8001550:	f000 f9c4 	bl	80018dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800155c:	2301      	movs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	4619      	mov	r1, r3
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <_ZL12MX_ADC1_Initv+0xb0>)
 8001566:	f000 ff7d 	bl	8002464 <HAL_ADC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 800157a:	f000 f9af 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000090 	.word	0x20000090
 800158c:	40012000 	.word	0x40012000

08001590 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <_ZL11MX_DAC_Initv+0x60>)
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_ZL11MX_DAC_Initv+0x64>)
 80015a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <_ZL11MX_DAC_Initv+0x60>)
 80015a6:	f001 fb1e 	bl	8002be6 <HAL_DAC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 80015ba:	f000 f98f 	bl	80018dc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015be:	2324      	movs	r3, #36	; 0x24
 80015c0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4808      	ldr	r0, [pc, #32]	; (80015f0 <_ZL11MX_DAC_Initv+0x60>)
 80015ce:	f001 fbf9 	bl	8002dc4 <HAL_DAC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 80015e2:	f000 f97b 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000138 	.word	0x20000138
 80015f4:	40007400 	.word	0x40007400

080015f8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <_ZL12MX_I2C1_Initv+0x60>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001604:	4a15      	ldr	r2, [pc, #84]	; (800165c <_ZL12MX_I2C1_Initv+0x64>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <_ZL12MX_I2C1_Initv+0x5c>)
 8001636:	f002 f9cf 	bl	80039d8 <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf14      	ite	ne
 8001640:	2301      	movne	r3, #1
 8001642:	2300      	moveq	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800164a:	f000 f947 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200001ac 	.word	0x200001ac
 8001658:	40005400 	.word	0x40005400
 800165c:	00061a80 	.word	0x00061a80

08001660 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 800167e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1439;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 8001692:	f240 529f 	movw	r2, #1439	; 0x59f
 8001696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a4:	481b      	ldr	r0, [pc, #108]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 80016a6:	f003 fc19 	bl	8004edc <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf14      	ite	ne
 80016b0:	2301      	movne	r3, #1
 80016b2:	2300      	moveq	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80016ba:	f000 f90f 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	4619      	mov	r1, r3
 80016ca:	4812      	ldr	r0, [pc, #72]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 80016cc:	f003 fc55 	bl	8004f7a <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80016e0:	f000 f8fc 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016e4:	2320      	movs	r3, #32
 80016e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <_ZL12MX_TIM2_Initv+0xb4>)
 80016f2:	f003 fe33 	bl	800535c <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf14      	ite	ne
 80016fc:	2301      	movne	r3, #1
 80016fe:	2300      	moveq	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001706:	f000 f8e9 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000200 	.word	0x20000200

08001718 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001750:	f003 fe80 	bl	8005454 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001764:	f000 f8ba 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000240 	.word	0x20000240
 8001770:	40004400 	.word	0x40004400

08001774 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <_ZL11MX_DMA_Initv+0x68>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a16      	ldr	r2, [pc, #88]	; (80017dc <_ZL11MX_DMA_Initv+0x68>)
 8001784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <_ZL11MX_DMA_Initv+0x68>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_ZL11MX_DMA_Initv+0x68>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <_ZL11MX_DMA_Initv+0x68>)
 80017a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <_ZL11MX_DMA_Initv+0x68>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2010      	movs	r0, #16
 80017b8:	f001 f9df 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017bc:	2010      	movs	r0, #16
 80017be:	f001 f9f8 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2038      	movs	r0, #56	; 0x38
 80017c8:	f001 f9d7 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017cc:	2038      	movs	r0, #56	; 0x38
 80017ce:	f001 f9f0 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a24      	ldr	r2, [pc, #144]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <_ZL12MX_GPIO_Initv+0xe8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2120      	movs	r1, #32
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <_ZL12MX_GPIO_Initv+0xec>)
 800186c:	f002 f89a 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <_ZL12MX_GPIO_Initv+0xf0>)
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001886:	f001 fee3 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800188a:	2320      	movs	r3, #32
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <_ZL12MX_GPIO_Initv+0xec>)
 80018a2:	f001 fed5 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLEFT_Pin BRIGHT_Pin BUP_Pin */
  GPIO_InitStruct.Pin = BLEFT_Pin|BRIGHT_Pin|BUP_Pin;
 80018a6:	2370      	movs	r3, #112	; 0x70
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <_ZL12MX_GPIO_Initv+0xf8>)
 80018ba:	f001 fec9 	bl	8003650 <HAL_GPIO_Init>

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	10210000 	.word	0x10210000
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020400 	.word	0x40020400

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 80018ea:	b408      	push	{r3}
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3307      	adds	r3, #7
 80018fc:	3307      	adds	r3, #7
 80018fe:	08db      	lsrs	r3, r3, #3
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	ebad 0d03 	sub.w	sp, sp, r3
 8001906:	466b      	mov	r3, sp
 8001908:	3307      	adds	r3, #7
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8001910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001914:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001916:	68bc      	ldr	r4, [r7, #8]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	69f8      	ldr	r0, [r7, #28]
 8001920:	47a0      	blx	r4
 8001922:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	18d4      	adds	r4, r2, r3
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4618      	mov	r0, r3
 8001930:	f004 fc3c 	bl	80061ac <_ZNSaIcEC1Ev>
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4622      	mov	r2, r4
 800193a:	69f9      	ldr	r1, [r7, #28]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f824 	bl	800198a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4618      	mov	r0, r3
 8001948:	f004 fc31 	bl	80061ae <_ZNSaIcED1Ev>
    }
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001956:	b001      	add	sp, #4
 8001958:	4770      	bx	lr

0800195a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	2100      	movs	r1, #0
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f004 fdb0 	bl	80064d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001970:	4603      	mov	r3, r0
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f824 	bl	80019c0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f004 fcef 	bl	8006360 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001998:	68fc      	ldr	r4, [r7, #12]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f004 fc31 	bl	8006202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80019a0:	4603      	mov	r3, r0
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4620      	mov	r0, r4
 80019a8:	f004 fda2 	bl	80064f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f810 	bl	80019d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}

080019c0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f804 	bl	80019f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001a02:	4623      	mov	r3, r4
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f805 	bl	8001a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
	...

08001a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	f000 f83e 	bl	8001aa8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001a44:	4817      	ldr	r0, [pc, #92]	; (8001aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001a46:	f004 fbb3 	bl	80061b0 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	68b8      	ldr	r0, [r7, #8]
 8001a4e:	f000 f845 	bl	8001adc <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001a52:	4603      	mov	r3, r0
 8001a54:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d910      	bls.n	8001a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f004 fbd5 	bl	8006214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f004 fbc3 	bl	80061fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4619      	mov	r1, r3
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f004 fbc4 	bl	8006206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f004 fbbd 	bl	80061fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001a84:	4603      	mov	r3, r0
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 fc1f 	bl	80062ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	4619      	mov	r1, r3
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f004 fbb8 	bl	800620a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	0800704c 	.word	0x0800704c

08001aa8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001adc:	b5b0      	push	{r4, r5, r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001ae6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ffec 	bl	8001ac8 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8001af0:	462a      	mov	r2, r5
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	4620      	mov	r0, r4
 8001af6:	f000 f805 	bl	8001b04 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001afa:	4603      	mov	r3, r0
    }
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bdb0      	pop	{r4, r5, r7, pc}

08001b04 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
    }
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <_Z41__static_initialization_and_destruction_0ii>:
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d107      	bne.n	8001b44 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d102      	bne.n	8001b44 <_Z41__static_initialization_and_destruction_0ii+0x20>
OLED OLED1;
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b40:	f004 f852 	bl	8005be8 <_ZN4OLEDC1Ev>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d107      	bne.n	8001b5a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d102      	bne.n	8001b5a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b54:	4803      	ldr	r0, [pc, #12]	; (8001b64 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b56:	f004 f861 	bl	8005c1c <_ZN4OLEDD1Ev>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000a90 	.word	0x20000a90

08001b68 <_GLOBAL__sub_I_hadc1>:
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ffd7 	bl	8001b24 <_Z41__static_initialization_and_destruction_0ii>
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_GLOBAL__sub_D_hadc1>:
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff ffcf 	bl	8001b24 <_Z41__static_initialization_and_destruction_0ii>
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bc6:	2007      	movs	r0, #7
 8001bc8:	f000 ffcc 	bl	8002b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <HAL_ADC_MspInit+0xdc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d158      	bne.n	8001cac <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_ADC_MspInit+0xe0>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <HAL_ADC_MspInit+0xe0>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_ADC_MspInit+0xe0>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_ADC_MspInit+0xe0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <HAL_ADC_MspInit+0xe0>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_ADC_MspInit+0xe0>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	481d      	ldr	r0, [pc, #116]	; (8001cbc <HAL_ADC_MspInit+0xe4>)
 8001c46:	f001 fd03 	bl	8003650 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_ADC_MspInit+0xec>)
 8001c4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001c92:	f001 f96f 	bl	8002f74 <HAL_DMA_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c9c:	f7ff fe1e 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ca6:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_ADC_MspInit+0xe8>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	200000d8 	.word	0x200000d8
 8001cc4:	40026410 	.word	0x40026410

08001cc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <HAL_DAC_MspInit+0xe0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d159      	bne.n	8001d9e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_DAC_MspInit+0xe4>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a2e      	ldr	r2, [pc, #184]	; (8001dac <HAL_DAC_MspInit+0xe4>)
 8001cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_DAC_MspInit+0xe4>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_DAC_MspInit+0xe4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_DAC_MspInit+0xe4>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_DAC_MspInit+0xe4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d22:	2310      	movs	r3, #16
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d26:	2303      	movs	r3, #3
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	481e      	ldr	r0, [pc, #120]	; (8001db0 <HAL_DAC_MspInit+0xe8>)
 8001d36:	f001 fc8b 	bl	8003650 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <HAL_DAC_MspInit+0xf0>)
 8001d3e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d42:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001d46:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d72:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d84:	f001 f8f6 	bl	8002f74 <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001d8e:	f7ff fda5 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_DAC_MspInit+0xec>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40007400 	.word	0x40007400
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	2000014c 	.word	0x2000014c
 8001db8:	40026088 	.word	0x40026088

08001dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_I2C_MspInit+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12c      	bne.n	8001e38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_I2C_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_I2C_MspInit+0x88>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_I2C_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e00:	2312      	movs	r3, #18
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	480c      	ldr	r0, [pc, #48]	; (8001e48 <HAL_I2C_MspInit+0x8c>)
 8001e18:	f001 fc1a 	bl	8003650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40005400 	.word	0x40005400
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400

08001e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d10d      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_TIM_Base_MspInit+0x3c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_TIM_Base_MspInit+0x3c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_TIM_Base_MspInit+0x3c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_UART_MspInit+0x84>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d12b      	bne.n	8001f06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_UART_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <HAL_UART_MspInit+0x8c>)
 8001f02:	f001 fba5 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40004400 	.word	0x40004400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 f8f6 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA1_Stream5_IRQHandler+0x10>)
 8001f7e:	f001 f8ff 	bl	8003180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000014c 	.word	0x2000014c

08001f8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <DMA2_Stream0_IRQHandler+0x10>)
 8001f92:	f001 f8f5 	bl	8003180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200000d8 	.word	0x200000d8

08001fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
	return 1;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_kill>:

int _kill(int pid, int sig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fba:	f004 fb85 	bl	80066c8 <__errno>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	2316      	movs	r3, #22
 8001fc2:	6013      	str	r3, [r2, #0]
	return -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_exit>:

void _exit (int status)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ffe7 	bl	8001fb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fe2:	e7fe      	b.n	8001fe2 <_exit+0x12>

08001fe4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <_sbrk+0x50>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x16>
		heap_end = &end;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <_sbrk+0x50>)
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <_sbrk+0x54>)
 8001ff8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <_sbrk+0x50>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <_sbrk+0x50>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	466a      	mov	r2, sp
 800200a:	4293      	cmp	r3, r2
 800200c:	d907      	bls.n	800201e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800200e:	f004 fb5b 	bl	80066c8 <__errno>
 8002012:	4602      	mov	r2, r0
 8002014:	230c      	movs	r3, #12
 8002016:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	e006      	b.n	800202c <_sbrk+0x48>
	}

	heap_end += incr;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <_sbrk+0x50>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a03      	ldr	r2, [pc, #12]	; (8002034 <_sbrk+0x50>)
 8002028:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20002a9c 	.word	0x20002a9c
 8002038:	20002ab8 	.word	0x20002ab8

0800203c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <SystemInit+0x28>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <SystemInit+0x28>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SystemInit+0x28>)
 8002052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002056:	609a      	str	r2, [r3, #8]
#endif
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800206c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800206e:	e003      	b.n	8002078 <LoopCopyDataInit>

08002070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002076:	3104      	adds	r1, #4

08002078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800207c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800207e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002080:	d3f6      	bcc.n	8002070 <CopyDataInit>
  ldr  r2, =_sbss
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002084:	e002      	b.n	800208c <LoopFillZerobss>

08002086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002088:	f842 3b04 	str.w	r3, [r2], #4

0800208c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800208e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002090:	d3f9      	bcc.n	8002086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002092:	f7ff ffd3 	bl	800203c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002096:	f004 fb1d 	bl	80066d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209a:	f7ff f84f 	bl	800113c <main>
  bx  lr    
 800209e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020a4:	08007710 	.word	0x08007710
  ldr  r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020ac:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80020b0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80020b4:	20002ab4 	.word	0x20002ab4

080020b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC_IRQHandler>
	...

080020bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_Init+0x40>)
 80020c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_Init+0x40>)
 80020d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_Init+0x40>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 fd3d 	bl	8002b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f808 	bl	8002100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f0:	f7ff fd4a 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_InitTick+0x54>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x58>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002116:	fbb3 f3f1 	udiv	r3, r3, r1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fd55 	bl	8002bce <HAL_SYSTICK_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00e      	b.n	800214c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d80a      	bhi.n	800214a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f000 fd1d 	bl	8002b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_InitTick+0x5c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000004 	.word	0x20000004
 8002158:	2000000c 	.word	0x2000000c
 800215c:	20000008 	.word	0x20000008

08002160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	2000000c 	.word	0x2000000c
 8002184:	20002aac 	.word	0x20002aac

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20002aac 	.word	0x20002aac

080021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff ffee 	bl	8002188 <HAL_GetTick>
 80021ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d005      	beq.n	80021c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_Delay+0x40>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021c6:	bf00      	nop
 80021c8:	f7ff ffde 	bl	8002188 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8f7      	bhi.n	80021c8 <HAL_Delay+0x28>
  {
  }
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000000c 	.word	0x2000000c

080021e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e033      	b.n	8002262 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fce8 	bl	8001bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d118      	bne.n	8002254 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800222a:	f023 0302 	bic.w	r3, r3, #2
 800222e:	f043 0202 	orr.w	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa46 	bl	80026c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
 8002252:	e001      	b.n	8002258 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_ADC_Start_DMA+0x1e>
 8002286:	2302      	movs	r3, #2
 8002288:	e0cc      	b.n	8002424 <HAL_ADC_Start_DMA+0x1b8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d018      	beq.n	80022d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022b0:	4b5e      	ldr	r3, [pc, #376]	; (800242c <HAL_ADC_Start_DMA+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5e      	ldr	r2, [pc, #376]	; (8002430 <HAL_ADC_Start_DMA+0x1c4>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9a      	lsrs	r2, r3, #18
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022c4:	e002      	b.n	80022cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	f040 80a0 	bne.w	8002422 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800230c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002320:	d106      	bne.n	8002330 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f023 0206 	bic.w	r2, r3, #6
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
 800232e:	e002      	b.n	8002336 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_ADC_Start_DMA+0x1c8>)
 8002340:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	4a3c      	ldr	r2, [pc, #240]	; (8002438 <HAL_ADC_Start_DMA+0x1cc>)
 8002348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	4a3b      	ldr	r2, [pc, #236]	; (800243c <HAL_ADC_Start_DMA+0x1d0>)
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <HAL_ADC_Start_DMA+0x1d4>)
 8002358:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002362:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002372:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002382:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	334c      	adds	r3, #76	; 0x4c
 800238e:	4619      	mov	r1, r3
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f000 fe9c 	bl	80030d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d12a      	bne.n	80023fa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <HAL_ADC_Start_DMA+0x1d8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d015      	beq.n	80023da <HAL_ADC_Start_DMA+0x16e>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a25      	ldr	r2, [pc, #148]	; (8002448 <HAL_ADC_Start_DMA+0x1dc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_Start_DMA+0x158>
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_ADC_Start_DMA+0x1c8>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_ADC_Start_DMA+0x1e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d129      	bne.n	8002422 <HAL_ADC_Start_DMA+0x1b6>
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_ADC_Start_DMA+0x1c8>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	d823      	bhi.n	8002422 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11c      	bne.n	8002422 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e013      	b.n	8002422 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_ADC_Start_DMA+0x1d8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d10e      	bne.n	8002422 <HAL_ADC_Start_DMA+0x1b6>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002420:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000004 	.word	0x20000004
 8002430:	431bde83 	.word	0x431bde83
 8002434:	40012300 	.word	0x40012300
 8002438:	080028c1 	.word	0x080028c1
 800243c:	0800297b 	.word	0x0800297b
 8002440:	08002997 	.word	0x08002997
 8002444:	40012000 	.word	0x40012000
 8002448:	40012100 	.word	0x40012100
 800244c:	40012200 	.word	0x40012200

08002450 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1c>
 800247c:	2302      	movs	r3, #2
 800247e:	e113      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x244>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b09      	cmp	r3, #9
 800248e:	d925      	bls.n	80024dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68d9      	ldr	r1, [r3, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	2207      	movs	r2, #7
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43da      	mvns	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	400a      	ands	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68d9      	ldr	r1, [r3, #12]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4403      	add	r3, r0
 80024ce:	3b1e      	subs	r3, #30
 80024d0:	409a      	lsls	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	e022      	b.n	8002522 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	2207      	movs	r2, #7
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	400a      	ands	r2, r1
 80024fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6919      	ldr	r1, [r3, #16]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	4603      	mov	r3, r0
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4403      	add	r3, r0
 8002518:	409a      	lsls	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d824      	bhi.n	8002574 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3b05      	subs	r3, #5
 800253c:	221f      	movs	r2, #31
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	400a      	ands	r2, r1
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	3b05      	subs	r3, #5
 8002566:	fa00 f203 	lsl.w	r2, r0, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
 8002572:	e04c      	b.n	800260e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d824      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b23      	subs	r3, #35	; 0x23
 800258e:	221f      	movs	r2, #31
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43da      	mvns	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	400a      	ands	r2, r1
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b23      	subs	r3, #35	; 0x23
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
 80025c4:	e023      	b.n	800260e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3b41      	subs	r3, #65	; 0x41
 80025d8:	221f      	movs	r2, #31
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	400a      	ands	r2, r1
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b41      	subs	r3, #65	; 0x41
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_ADC_ConfigChannel+0x250>)
 8002610:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <HAL_ADC_ConfigChannel+0x254>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10f      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1d8>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d10b      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_ADC_ConfigChannel+0x254>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12b      	bne.n	800269e <HAL_ADC_ConfigChannel+0x23a>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_ADC_ConfigChannel+0x258>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x1f4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b11      	cmp	r3, #17
 8002656:	d122      	bne.n	800269e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_ADC_ConfigChannel+0x258>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_ADC_ConfigChannel+0x25c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_ConfigChannel+0x260>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	0c9a      	lsrs	r2, r3, #18
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002690:	e002      	b.n	8002698 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40012300 	.word	0x40012300
 80026b8:	40012000 	.word	0x40012000
 80026bc:	10000012 	.word	0x10000012
 80026c0:	20000004 	.word	0x20000004
 80026c4:	431bde83 	.word	0x431bde83

080026c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d0:	4b79      	ldr	r3, [pc, #484]	; (80028b8 <ADC_Init+0x1f0>)
 80026d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	4a58      	ldr	r2, [pc, #352]	; (80028bc <ADC_Init+0x1f4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800276e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e00f      	b.n	80027c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0202 	bic.w	r2, r2, #2
 80027d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
 80027e0:	005a      	lsls	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002802:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002812:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	3b01      	subs	r3, #1
 8002820:	035a      	lsls	r2, r3, #13
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	e007      	b.n	800283c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	3b01      	subs	r3, #1
 8002858:	051a      	lsls	r2, r3, #20
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800287e:	025a      	lsls	r2, r3, #9
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	029a      	lsls	r2, r3, #10
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40012300 	.word	0x40012300
 80028bc:	0f000001 	.word	0x0f000001

080028c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d13c      	bne.n	8002954 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d12b      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d127      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002914:	2b00      	cmp	r3, #0
 8002916:	d119      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0220 	bic.w	r2, r2, #32
 8002926:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7fe fb21 	bl	8000f94 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002952:	e00e      	b.n	8002972 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fd75 	bl	8002450 <HAL_ADC_ErrorCallback>
}
 8002966:	e004      	b.n	8002972 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7fe faeb 	bl	8000f64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0204 	orr.w	r2, r3, #4
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff fd4a 	bl	8002450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <__NVIC_GetPriorityGrouping+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db0b      	blt.n	8002a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4907      	ldr	r1, [pc, #28]	; (8002a60 <__NVIC_EnableIRQ+0x38>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e100 	.word	0xe000e100

08002a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	db0a      	blt.n	8002a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	490c      	ldr	r1, [pc, #48]	; (8002ab0 <__NVIC_SetPriority+0x4c>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	0112      	lsls	r2, r2, #4
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	440b      	add	r3, r1
 8002a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a8c:	e00a      	b.n	8002aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4908      	ldr	r1, [pc, #32]	; (8002ab4 <__NVIC_SetPriority+0x50>)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	3b04      	subs	r3, #4
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	761a      	strb	r2, [r3, #24]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000e100 	.word	0xe000e100
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f1c3 0307 	rsb	r3, r3, #7
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	bf28      	it	cs
 8002ad6:	2304      	movcs	r3, #4
 8002ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d902      	bls.n	8002ae8 <NVIC_EncodePriority+0x30>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3b03      	subs	r3, #3
 8002ae6:	e000      	b.n	8002aea <NVIC_EncodePriority+0x32>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	4313      	orrs	r3, r2
         );
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	; 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b30:	d301      	bcc.n	8002b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00f      	b.n	8002b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <SysTick_Config+0x40>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3e:	210f      	movs	r1, #15
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f7ff ff8e 	bl	8002a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <SysTick_Config+0x40>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <SysTick_Config+0x40>)
 8002b50:	2207      	movs	r2, #7
 8002b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff29 	bl	80029c4 <__NVIC_SetPriorityGrouping>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8c:	f7ff ff3e 	bl	8002a0c <__NVIC_GetPriorityGrouping>
 8002b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff8e 	bl	8002ab8 <NVIC_EncodePriority>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff5d 	bl	8002a64 <__NVIC_SetPriority>
}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff31 	bl	8002a28 <__NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa2 	bl	8002b20 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e014      	b.n	8002c22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	791b      	ldrb	r3, [r3, #4]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff f85d 	bl	8001cc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	795b      	ldrb	r3, [r3, #5]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_DAC_Start_DMA+0x1e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e08e      	b.n	8002d68 <HAL_DAC_Start_DMA+0x13c>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2202      	movs	r2, #2
 8002c54:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d12a      	bne.n	8002cb2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a43      	ldr	r2, [pc, #268]	; (8002d70 <HAL_DAC_Start_DMA+0x144>)
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a42      	ldr	r2, [pc, #264]	; (8002d74 <HAL_DAC_Start_DMA+0x148>)
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a41      	ldr	r2, [pc, #260]	; (8002d78 <HAL_DAC_Start_DMA+0x14c>)
 8002c72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c82:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d009      	beq.n	8002c9e <HAL_DAC_Start_DMA+0x72>
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_DAC_Start_DMA+0x7c>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d000      	beq.n	8002c94 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002c92:	e039      	b.n	8002d08 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
        break;
 8002c9c:	e034      	b.n	8002d08 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	617b      	str	r3, [r7, #20]
        break;
 8002ca6:	e02f      	b.n	8002d08 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3310      	adds	r3, #16
 8002cae:	617b      	str	r3, [r7, #20]
        break;
 8002cb0:	e02a      	b.n	8002d08 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_DAC_Start_DMA+0x150>)
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a30      	ldr	r2, [pc, #192]	; (8002d80 <HAL_DAC_Start_DMA+0x154>)
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <HAL_DAC_Start_DMA+0x158>)
 8002cc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d009      	beq.n	8002cf4 <HAL_DAC_Start_DMA+0xc8>
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d00c      	beq.n	8002cfe <HAL_DAC_Start_DMA+0xd2>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d000      	beq.n	8002cea <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002ce8:	e00e      	b.n	8002d08 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	617b      	str	r3, [r7, #20]
        break;
 8002cf2:	e009      	b.n	8002d08 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	617b      	str	r3, [r7, #20]
        break;
 8002cfc:	e004      	b.n	8002d08 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	331c      	adds	r3, #28
 8002d04:	617b      	str	r3, [r7, #20]
        break;
 8002d06:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d1c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6898      	ldr	r0, [r3, #8]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	f000 f9d2 	bl	80030d0 <HAL_DMA_Start_IT>
 8002d2c:	e00e      	b.n	8002d4c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d3c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68d8      	ldr	r0, [r3, #12]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	f000 f9c2 	bl	80030d0 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	08002e5f 	.word	0x08002e5f
 8002d74:	08002e81 	.word	0x08002e81
 8002d78:	08002e9d 	.word	0x08002e9d
 8002d7c:	08002f07 	.word	0x08002f07
 8002d80:	08002f29 	.word	0x08002f29
 8002d84:	08002f45 	.word	0x08002f45

08002d88 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	795b      	ldrb	r3, [r3, #5]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_DAC_ConfigChannel+0x20>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e036      	b.n	8002e52 <HAL_DAC_ConfigChannel+0x8e>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2202      	movs	r2, #2
 8002dee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002df8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4013      	ands	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	22c0      	movs	r2, #192	; 0xc0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff ff8b 	bl	8002d88 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	711a      	strb	r2, [r3, #4]
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff ff84 	bl	8002d9c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff ff7a 	bl	8002db0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	711a      	strb	r2, [r3, #4]
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff ffd8 	bl	8002eca <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	711a      	strb	r2, [r3, #4]
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ffd1 	bl	8002ede <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f043 0204 	orr.w	r2, r3, #4
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ffc7 	bl	8002ef2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	711a      	strb	r2, [r3, #4]
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff f902 	bl	8002188 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e099      	b.n	80030c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb0:	e00f      	b.n	8002fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fb2:	f7ff f8e9 	bl	8002188 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d908      	bls.n	8002fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e078      	b.n	80030c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e8      	bne.n	8002fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_DMA_Init+0x158>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2b04      	cmp	r3, #4
 800302a:	d107      	bne.n	800303c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	4313      	orrs	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 0307 	bic.w	r3, r3, #7
 8003052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2b04      	cmp	r3, #4
 8003064:	d117      	bne.n	8003096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fa6f 	bl	800355c <DMA_CheckFifoParam>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003092:	2301      	movs	r3, #1
 8003094:	e016      	b.n	80030c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa26 	bl	80034f0 <DMA_CalcBaseAndBitshift>
 80030a4:	4603      	mov	r3, r0
 80030a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	223f      	movs	r2, #63	; 0x3f
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	f010803f 	.word	0xf010803f

080030d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_Start_IT+0x26>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e040      	b.n	8003178 <HAL_DMA_Start_IT+0xa8>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d12f      	bne.n	800316a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f9b8 	bl	8003494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	223f      	movs	r2, #63	; 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0216 	orr.w	r2, r2, #22
 800313e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0208 	orr.w	r2, r2, #8
 8003156:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e005      	b.n	8003176 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003172:	2302      	movs	r3, #2
 8003174:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003176:	7dfb      	ldrb	r3, [r7, #23]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800318c:	4b92      	ldr	r3, [pc, #584]	; (80033d8 <HAL_DMA_IRQHandler+0x258>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a92      	ldr	r2, [pc, #584]	; (80033dc <HAL_DMA_IRQHandler+0x25c>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	2208      	movs	r2, #8
 80031ac:	409a      	lsls	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01a      	beq.n	80031ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	2208      	movs	r2, #8
 80031da:	409a      	lsls	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	2201      	movs	r2, #1
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2201      	movs	r2, #1
 8003210:	409a      	lsls	r2, r3
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	f043 0202 	orr.w	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2204      	movs	r2, #4
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d012      	beq.n	8003258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	2204      	movs	r2, #4
 8003246:	409a      	lsls	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f043 0204 	orr.w	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	2210      	movs	r2, #16
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d043      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d03c      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	2210      	movs	r2, #16
 800327c:	409a      	lsls	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d024      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
 80032ae:	e01f      	b.n	80032f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e016      	b.n	80032f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0208 	bic.w	r2, r2, #8
 80032de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	2220      	movs	r2, #32
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 808e 	beq.w	800341e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8086 	beq.w	800341e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2220      	movs	r2, #32
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b05      	cmp	r3, #5
 8003328:	d136      	bne.n	8003398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0216 	bic.w	r2, r2, #22
 8003338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <HAL_DMA_IRQHandler+0x1da>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0208 	bic.w	r2, r2, #8
 8003368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	223f      	movs	r2, #63	; 0x3f
 8003370:	409a      	lsls	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338a:	2b00      	cmp	r3, #0
 800338c:	d07d      	beq.n	800348a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
        }
        return;
 8003396:	e078      	b.n	800348a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01c      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d030      	beq.n	800341e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
 80033c4:	e02b      	b.n	800341e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d027      	beq.n	800341e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
 80033d6:	e022      	b.n	800341e <HAL_DMA_IRQHandler+0x29e>
 80033d8:	20000004 	.word	0x20000004
 80033dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0210 	bic.w	r2, r2, #16
 80033fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	2b00      	cmp	r3, #0
 8003424:	d032      	beq.n	800348c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d022      	beq.n	8003478 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2205      	movs	r2, #5
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	429a      	cmp	r2, r3
 8003454:	d307      	bcc.n	8003466 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f2      	bne.n	800344a <HAL_DMA_IRQHandler+0x2ca>
 8003464:	e000      	b.n	8003468 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003466:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
 8003488:	e000      	b.n	800348c <HAL_DMA_IRQHandler+0x30c>
        return;
 800348a:	bf00      	nop
    }
  }
}
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d108      	bne.n	80034d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034d2:	e007      	b.n	80034e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	3b10      	subs	r3, #16
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <DMA_CalcBaseAndBitshift+0x64>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <DMA_CalcBaseAndBitshift+0x68>)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d909      	bls.n	8003532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	659a      	str	r2, [r3, #88]	; 0x58
 8003530:	e007      	b.n	8003542 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	aaaaaaab 	.word	0xaaaaaaab
 8003558:	08007090 	.word	0x08007090

0800355c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d11f      	bne.n	80035b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d855      	bhi.n	8003628 <DMA_CheckFifoParam+0xcc>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <DMA_CheckFifoParam+0x28>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003595 	.word	0x08003595
 8003588:	080035a7 	.word	0x080035a7
 800358c:	08003595 	.word	0x08003595
 8003590:	08003629 	.word	0x08003629
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d045      	beq.n	800362c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e042      	b.n	800362c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ae:	d13f      	bne.n	8003630 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b4:	e03c      	b.n	8003630 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035be:	d121      	bne.n	8003604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d836      	bhi.n	8003634 <DMA_CheckFifoParam+0xd8>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <DMA_CheckFifoParam+0x70>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035dd 	.word	0x080035dd
 80035d0:	080035e3 	.word	0x080035e3
 80035d4:	080035dd 	.word	0x080035dd
 80035d8:	080035f5 	.word	0x080035f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	e02f      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d024      	beq.n	8003638 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f2:	e021      	b.n	8003638 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035fc:	d11e      	bne.n	800363c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003602:	e01b      	b.n	800363c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d902      	bls.n	8003610 <DMA_CheckFifoParam+0xb4>
 800360a:	2b03      	cmp	r3, #3
 800360c:	d003      	beq.n	8003616 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800360e:	e018      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e015      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      break;
 8003626:	e00b      	b.n	8003640 <DMA_CheckFifoParam+0xe4>
      break;
 8003628:	bf00      	nop
 800362a:	e00a      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;
 800362c:	bf00      	nop
 800362e:	e008      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;
 8003630:	bf00      	nop
 8003632:	e006      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;
 8003634:	bf00      	nop
 8003636:	e004      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;
 8003638:	bf00      	nop
 800363a:	e002      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;   
 800363c:	bf00      	nop
 800363e:	e000      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;
 8003640:	bf00      	nop
    }
  } 
  
  return status; 
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e165      	b.n	8003938 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800366c:	2201      	movs	r2, #1
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	f040 8154 	bne.w	8003932 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d00b      	beq.n	80036aa <HAL_GPIO_Init+0x5a>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d007      	beq.n	80036aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800369e:	2b11      	cmp	r3, #17
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b12      	cmp	r3, #18
 80036a8:	d130      	bne.n	800370c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 0201 	and.w	r2, r3, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0xfc>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b12      	cmp	r3, #18
 800374a:	d123      	bne.n	8003794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	220f      	movs	r2, #15
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	08da      	lsrs	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3208      	adds	r2, #8
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80ae 	beq.w	8003932 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b5c      	ldr	r3, [pc, #368]	; (800394c <HAL_GPIO_Init+0x2fc>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_GPIO_Init+0x2fc>)
 80037e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e4:	6453      	str	r3, [r2, #68]	; 0x44
 80037e6:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_GPIO_Init+0x2fc>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037f2:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_GPIO_Init+0x300>)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	3302      	adds	r3, #2
 80037fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	220f      	movs	r2, #15
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4e      	ldr	r2, [pc, #312]	; (8003954 <HAL_GPIO_Init+0x304>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d025      	beq.n	800386a <HAL_GPIO_Init+0x21a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_GPIO_Init+0x308>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <HAL_GPIO_Init+0x216>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4c      	ldr	r2, [pc, #304]	; (800395c <HAL_GPIO_Init+0x30c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d019      	beq.n	8003862 <HAL_GPIO_Init+0x212>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <HAL_GPIO_Init+0x310>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0x20e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <HAL_GPIO_Init+0x314>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_GPIO_Init+0x20a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a49      	ldr	r2, [pc, #292]	; (8003968 <HAL_GPIO_Init+0x318>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <HAL_GPIO_Init+0x206>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_GPIO_Init+0x31c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_GPIO_Init+0x202>
 800384e:	2306      	movs	r3, #6
 8003850:	e00c      	b.n	800386c <HAL_GPIO_Init+0x21c>
 8003852:	2307      	movs	r3, #7
 8003854:	e00a      	b.n	800386c <HAL_GPIO_Init+0x21c>
 8003856:	2305      	movs	r3, #5
 8003858:	e008      	b.n	800386c <HAL_GPIO_Init+0x21c>
 800385a:	2304      	movs	r3, #4
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x21c>
 800385e:	2303      	movs	r3, #3
 8003860:	e004      	b.n	800386c <HAL_GPIO_Init+0x21c>
 8003862:	2302      	movs	r3, #2
 8003864:	e002      	b.n	800386c <HAL_GPIO_Init+0x21c>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x21c>
 800386a:	2300      	movs	r3, #0
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	f002 0203 	and.w	r2, r2, #3
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	4093      	lsls	r3, r2
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800387c:	4934      	ldr	r1, [pc, #208]	; (8003950 <HAL_GPIO_Init+0x300>)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800388a:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_GPIO_Init+0x320>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ae:	4a30      	ldr	r2, [pc, #192]	; (8003970 <HAL_GPIO_Init+0x320>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_GPIO_Init+0x320>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d8:	4a25      	ldr	r2, [pc, #148]	; (8003970 <HAL_GPIO_Init+0x320>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_GPIO_Init+0x320>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003902:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_GPIO_Init+0x320>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_GPIO_Init+0x320>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800392c:	4a10      	ldr	r2, [pc, #64]	; (8003970 <HAL_GPIO_Init+0x320>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	f67f ae96 	bls.w	800366c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3724      	adds	r7, #36	; 0x24
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40023800 	.word	0x40023800
 8003950:	40013800 	.word	0x40013800
 8003954:	40020000 	.word	0x40020000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021000 	.word	0x40021000
 8003968:	40021400 	.word	0x40021400
 800396c:	40021800 	.word	0x40021800
 8003970:	40013c00 	.word	0x40013c00

08003974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
 8003990:	e001      	b.n	8003996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003996:	7bfb      	ldrb	r3, [r7, #15]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
 80039b0:	4613      	mov	r3, r2
 80039b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b4:	787b      	ldrb	r3, [r7, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c0:	e003      	b.n	80039ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	041a      	lsls	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	619a      	str	r2, [r3, #24]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e11f      	b.n	8003c2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fe f9dc 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f000 fe2c 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8003a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a7b      	ldr	r2, [pc, #492]	; (8003c34 <HAL_I2C_Init+0x25c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d807      	bhi.n	8003a5c <HAL_I2C_Init+0x84>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a7a      	ldr	r2, [pc, #488]	; (8003c38 <HAL_I2C_Init+0x260>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bf94      	ite	ls
 8003a54:	2301      	movls	r3, #1
 8003a56:	2300      	movhi	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e006      	b.n	8003a6a <HAL_I2C_Init+0x92>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <HAL_I2C_Init+0x264>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	bf94      	ite	ls
 8003a64:	2301      	movls	r3, #1
 8003a66:	2300      	movhi	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0db      	b.n	8003c2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a72      	ldr	r2, [pc, #456]	; (8003c40 <HAL_I2C_Init+0x268>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0c9b      	lsrs	r3, r3, #18
 8003a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a64      	ldr	r2, [pc, #400]	; (8003c34 <HAL_I2C_Init+0x25c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d802      	bhi.n	8003aac <HAL_I2C_Init+0xd4>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	e009      	b.n	8003ac0 <HAL_I2C_Init+0xe8>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	4a63      	ldr	r2, [pc, #396]	; (8003c44 <HAL_I2C_Init+0x26c>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	3301      	adds	r3, #1
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4956      	ldr	r1, [pc, #344]	; (8003c34 <HAL_I2C_Init+0x25c>)
 8003adc:	428b      	cmp	r3, r1
 8003ade:	d80d      	bhi.n	8003afc <HAL_I2C_Init+0x124>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e59      	subs	r1, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	bf38      	it	cc
 8003af8:	2304      	movcc	r3, #4
 8003afa:	e04f      	b.n	8003b9c <HAL_I2C_Init+0x1c4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d111      	bne.n	8003b28 <HAL_I2C_Init+0x150>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1e58      	subs	r0, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e012      	b.n	8003b4e <HAL_I2C_Init+0x176>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	0099      	lsls	r1, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Init+0x17e>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e022      	b.n	8003b9c <HAL_I2C_Init+0x1c4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10e      	bne.n	8003b7c <HAL_I2C_Init+0x1a4>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1e58      	subs	r0, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	440b      	add	r3, r1
 8003b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7a:	e00f      	b.n	8003b9c <HAL_I2C_Init+0x1c4>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1e58      	subs	r0, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6859      	ldr	r1, [r3, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	0099      	lsls	r1, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	6809      	ldr	r1, [r1, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6911      	ldr	r1, [r2, #16]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68d2      	ldr	r2, [r2, #12]
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	000186a0 	.word	0x000186a0
 8003c38:	001e847f 	.word	0x001e847f
 8003c3c:	003d08ff 	.word	0x003d08ff
 8003c40:	431bde83 	.word	0x431bde83
 8003c44:	10624dd3 	.word	0x10624dd3

08003c48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	461a      	mov	r2, r3
 8003c54:	460b      	mov	r3, r1
 8003c56:	817b      	strh	r3, [r7, #10]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c5c:	f7fe fa94 	bl	8002188 <HAL_GetTick>
 8003c60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	f040 80e0 	bne.w	8003e30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2319      	movs	r3, #25
 8003c76:	2201      	movs	r2, #1
 8003c78:	4970      	ldr	r1, [pc, #448]	; (8003e3c <HAL_I2C_Master_Transmit+0x1f4>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa92 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0d3      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_I2C_Master_Transmit+0x50>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0cc      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ea>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d007      	beq.n	8003cbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ccc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2221      	movs	r2, #33	; 0x21
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	893a      	ldrh	r2, [r7, #8]
 8003cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a50      	ldr	r2, [pc, #320]	; (8003e40 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d00:	8979      	ldrh	r1, [r7, #10]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f9ca 	bl	80040a0 <I2C_MasterRequestWrite>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e08d      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d2c:	e066      	b.n	8003dfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	6a39      	ldr	r1, [r7, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fb0c 	bl	8004350 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d107      	bne.n	8003d56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e06b      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d11b      	bne.n	8003dd0 <HAL_I2C_Master_Transmit+0x188>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d017      	beq.n	8003dd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	781a      	ldrb	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fafc 	bl	80043d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e01a      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d194      	bne.n	8003d2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e000      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
  }
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	00100002 	.word	0x00100002
 8003e40:	ffff0000 	.word	0xffff0000

08003e44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	460b      	mov	r3, r1
 8003e52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7fe f998 	bl	8002188 <HAL_GetTick>
 8003e58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	f040 8110 	bne.w	800408c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2319      	movs	r3, #25
 8003e72:	2201      	movs	r2, #1
 8003e74:	4988      	ldr	r1, [pc, #544]	; (8004098 <HAL_I2C_IsDeviceReady+0x254>)
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f994 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
 8003e84:	e103      	b.n	800408e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2C_IsDeviceReady+0x50>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e0fc      	b.n	800408e <HAL_I2C_IsDeviceReady+0x24a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d007      	beq.n	8003eba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2224      	movs	r2, #36	; 0x24
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a70      	ldr	r2, [pc, #448]	; (800409c <HAL_I2C_IsDeviceReady+0x258>)
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f952 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00c      	beq.n	8003f20 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0b6      	b.n	800408e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f20:	897b      	ldrh	r3, [r7, #10]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f2e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f30:	f7fe f92a 	bl	8002188 <HAL_GetTick>
 8003f34:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f64:	e025      	b.n	8003fb2 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe f90f 	bl	8002188 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <HAL_I2C_IsDeviceReady+0x138>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	22a0      	movs	r2, #160	; 0xa0
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2ba0      	cmp	r3, #160	; 0xa0
 8003fbc:	d005      	beq.n	8003fca <HAL_I2C_IsDeviceReady+0x186>
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <HAL_I2C_IsDeviceReady+0x186>
 8003fc4:	7dbb      	ldrb	r3, [r7, #22]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0cd      	beq.n	8003f66 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d129      	bne.n	8004034 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2319      	movs	r3, #25
 800400c:	2201      	movs	r2, #1
 800400e:	4922      	ldr	r1, [pc, #136]	; (8004098 <HAL_I2C_IsDeviceReady+0x254>)
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f8c7 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e036      	b.n	800408e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e02c      	b.n	800408e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800404c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2319      	movs	r3, #25
 8004054:	2201      	movs	r2, #1
 8004056:	4910      	ldr	r1, [pc, #64]	; (8004098 <HAL_I2C_IsDeviceReady+0x254>)
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f8a3 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e012      	b.n	800408e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	3301      	adds	r3, #1
 800406c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	f4ff af33 	bcc.w	8003ede <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	00100002 	.word	0x00100002
 800409c:	ffff0000 	.word	0xffff0000

080040a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	460b      	mov	r3, r1
 80040ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d006      	beq.n	80040ca <I2C_MasterRequestWrite+0x2a>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d003      	beq.n	80040ca <I2C_MasterRequestWrite+0x2a>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c8:	d108      	bne.n	80040dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e00b      	b.n	80040f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	2b12      	cmp	r3, #18
 80040e2:	d107      	bne.n	80040f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f84f 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e035      	b.n	8004192 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412e:	d108      	bne.n	8004142 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004130:	897b      	ldrh	r3, [r7, #10]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800413e:	611a      	str	r2, [r3, #16]
 8004140:	e01b      	b.n	800417a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	11db      	asrs	r3, r3, #7
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0306 	and.w	r3, r3, #6
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f063 030f 	orn	r3, r3, #15
 8004152:	b2da      	uxtb	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	490f      	ldr	r1, [pc, #60]	; (800419c <I2C_MasterRequestWrite+0xfc>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f876 	bl	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e010      	b.n	8004192 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <I2C_MasterRequestWrite+0x100>)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f866 	bl	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	00010008 	.word	0x00010008
 80041a0:	00010002 	.word	0x00010002

080041a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b4:	e025      	b.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d021      	beq.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fd ffe3 	bl	8002188 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d116      	bne.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e023      	b.n	800424a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d10d      	bne.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x84>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	43da      	mvns	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	e00c      	b.n	8004242 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d0b6      	beq.n	80041b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004260:	e051      	b.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004270:	d123      	bne.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800428a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0204 	orr.w	r2, r3, #4
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e046      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d021      	beq.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fd ff61 	bl	8002188 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d116      	bne.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e020      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10c      	bne.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e00b      	b.n	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	43da      	mvns	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d18d      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800435c:	e02d      	b.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f878 	bl	8004454 <I2C_IsAcknowledgeFailed>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e02d      	b.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d021      	beq.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fd ff07 	bl	8002188 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e007      	b.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d1ca      	bne.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043de:	e02d      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f837 	bl	8004454 <I2C_IsAcknowledgeFailed>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e02d      	b.n	800444c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d021      	beq.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f8:	f7fd fec6 	bl	8002188 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d116      	bne.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e007      	b.n	800444c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d1ca      	bne.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446a:	d11b      	bne.n	80044a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f043 0204 	orr.w	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0cc      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b68      	ldr	r3, [pc, #416]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d90c      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b65      	ldr	r3, [pc, #404]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b63      	ldr	r3, [pc, #396]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0b8      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004508:	4b59      	ldr	r3, [pc, #356]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a58      	ldr	r2, [pc, #352]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a52      	ldr	r2, [pc, #328]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800452a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	494d      	ldr	r1, [pc, #308]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d044      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d119      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d003      	beq.n	8004572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456e:	2b03      	cmp	r3, #3
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	4b3f      	ldr	r3, [pc, #252]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e067      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004592:	4b37      	ldr	r3, [pc, #220]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4934      	ldr	r1, [pc, #208]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a4:	f7fd fdf0 	bl	8002188 <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fd fdec 	bl	8002188 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 020c 	and.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d1eb      	bne.n	80045ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d20c      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b22      	ldr	r3, [pc, #136]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e032      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4916      	ldr	r1, [pc, #88]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	490e      	ldr	r1, [pc, #56]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800463a:	f000 f855 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 800463e:	4601      	mov	r1, r0
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
 800464e:	fa21 f303 	lsr.w	r3, r1, r3
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd fd50 	bl	8002100 <HAL_InitTick>

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023c00 	.word	0x40023c00
 8004670:	40023800 	.word	0x40023800
 8004674:	08007078 	.word	0x08007078
 8004678:	20000004 	.word	0x20000004
 800467c:	20000008 	.word	0x20000008

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000004 	.word	0x20000004

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4601      	mov	r1, r0
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4a03      	ldr	r2, [pc, #12]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	08007088 	.word	0x08007088

080046c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c4:	f7ff ffdc 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046c8:	4601      	mov	r1, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0b5b      	lsrs	r3, r3, #13
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4a03      	ldr	r2, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	08007088 	.word	0x08007088

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004702:	4bc6      	ldr	r3, [pc, #792]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b0c      	cmp	r3, #12
 800470c:	f200 817e 	bhi.w	8004a0c <HAL_RCC_GetSysClockFreq+0x324>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <HAL_RCC_GetSysClockFreq+0x30>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800474d 	.word	0x0800474d
 800471c:	08004a0d 	.word	0x08004a0d
 8004720:	08004a0d 	.word	0x08004a0d
 8004724:	08004a0d 	.word	0x08004a0d
 8004728:	08004753 	.word	0x08004753
 800472c:	08004a0d 	.word	0x08004a0d
 8004730:	08004a0d 	.word	0x08004a0d
 8004734:	08004a0d 	.word	0x08004a0d
 8004738:	08004759 	.word	0x08004759
 800473c:	08004a0d 	.word	0x08004a0d
 8004740:	08004a0d 	.word	0x08004a0d
 8004744:	08004a0d 	.word	0x08004a0d
 8004748:	080048b5 	.word	0x080048b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4bb4      	ldr	r3, [pc, #720]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x338>)
 800474e:	613b      	str	r3, [r7, #16]
       break;
 8004750:	e15f      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004752:	4bb4      	ldr	r3, [pc, #720]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004754:	613b      	str	r3, [r7, #16]
      break;
 8004756:	e15c      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004758:	4bb0      	ldr	r3, [pc, #704]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004760:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004762:	4bae      	ldr	r3, [pc, #696]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d04a      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800476e:	4bab      	ldr	r3, [pc, #684]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	f04f 0400 	mov.w	r4, #0
 8004778:	f240 11ff 	movw	r1, #511	; 0x1ff
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	ea03 0501 	and.w	r5, r3, r1
 8004784:	ea04 0602 	and.w	r6, r4, r2
 8004788:	4629      	mov	r1, r5
 800478a:	4632      	mov	r2, r6
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	f04f 0400 	mov.w	r4, #0
 8004794:	0154      	lsls	r4, r2, #5
 8004796:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800479a:	014b      	lsls	r3, r1, #5
 800479c:	4619      	mov	r1, r3
 800479e:	4622      	mov	r2, r4
 80047a0:	1b49      	subs	r1, r1, r5
 80047a2:	eb62 0206 	sbc.w	r2, r2, r6
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	f04f 0400 	mov.w	r4, #0
 80047ae:	0194      	lsls	r4, r2, #6
 80047b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047b4:	018b      	lsls	r3, r1, #6
 80047b6:	1a5b      	subs	r3, r3, r1
 80047b8:	eb64 0402 	sbc.w	r4, r4, r2
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	00e2      	lsls	r2, r4, #3
 80047c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047ca:	00d9      	lsls	r1, r3, #3
 80047cc:	460b      	mov	r3, r1
 80047ce:	4614      	mov	r4, r2
 80047d0:	195b      	adds	r3, r3, r5
 80047d2:	eb44 0406 	adc.w	r4, r4, r6
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	0262      	lsls	r2, r4, #9
 80047e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047e4:	0259      	lsls	r1, r3, #9
 80047e6:	460b      	mov	r3, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	4621      	mov	r1, r4
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f04f 0400 	mov.w	r4, #0
 80047f4:	461a      	mov	r2, r3
 80047f6:	4623      	mov	r3, r4
 80047f8:	f7fc fa08 	bl	8000c0c <__aeabi_uldivmod>
 80047fc:	4603      	mov	r3, r0
 80047fe:	460c      	mov	r4, r1
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e049      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004804:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	f04f 0400 	mov.w	r4, #0
 800480e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	ea03 0501 	and.w	r5, r3, r1
 800481a:	ea04 0602 	and.w	r6, r4, r2
 800481e:	4629      	mov	r1, r5
 8004820:	4632      	mov	r2, r6
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	0154      	lsls	r4, r2, #5
 800482c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004830:	014b      	lsls	r3, r1, #5
 8004832:	4619      	mov	r1, r3
 8004834:	4622      	mov	r2, r4
 8004836:	1b49      	subs	r1, r1, r5
 8004838:	eb62 0206 	sbc.w	r2, r2, r6
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f04f 0400 	mov.w	r4, #0
 8004844:	0194      	lsls	r4, r2, #6
 8004846:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800484a:	018b      	lsls	r3, r1, #6
 800484c:	1a5b      	subs	r3, r3, r1
 800484e:	eb64 0402 	sbc.w	r4, r4, r2
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	00e2      	lsls	r2, r4, #3
 800485c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004860:	00d9      	lsls	r1, r3, #3
 8004862:	460b      	mov	r3, r1
 8004864:	4614      	mov	r4, r2
 8004866:	195b      	adds	r3, r3, r5
 8004868:	eb44 0406 	adc.w	r4, r4, r6
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	02a2      	lsls	r2, r4, #10
 8004876:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800487a:	0299      	lsls	r1, r3, #10
 800487c:	460b      	mov	r3, r1
 800487e:	4614      	mov	r4, r2
 8004880:	4618      	mov	r0, r3
 8004882:	4621      	mov	r1, r4
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f04f 0400 	mov.w	r4, #0
 800488a:	461a      	mov	r2, r3
 800488c:	4623      	mov	r3, r4
 800488e:	f7fc f9bd 	bl	8000c0c <__aeabi_uldivmod>
 8004892:	4603      	mov	r3, r0
 8004894:	460c      	mov	r4, r1
 8004896:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004898:	4b60      	ldr	r3, [pc, #384]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	613b      	str	r3, [r7, #16]
      break;
 80048b2:	e0ae      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b4:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048be:	4b57      	ldr	r3, [pc, #348]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d04a      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	f04f 0400 	mov.w	r4, #0
 80048d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	ea03 0501 	and.w	r5, r3, r1
 80048e0:	ea04 0602 	and.w	r6, r4, r2
 80048e4:	4629      	mov	r1, r5
 80048e6:	4632      	mov	r2, r6
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	f04f 0400 	mov.w	r4, #0
 80048f0:	0154      	lsls	r4, r2, #5
 80048f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048f6:	014b      	lsls	r3, r1, #5
 80048f8:	4619      	mov	r1, r3
 80048fa:	4622      	mov	r2, r4
 80048fc:	1b49      	subs	r1, r1, r5
 80048fe:	eb62 0206 	sbc.w	r2, r2, r6
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	f04f 0400 	mov.w	r4, #0
 800490a:	0194      	lsls	r4, r2, #6
 800490c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004910:	018b      	lsls	r3, r1, #6
 8004912:	1a5b      	subs	r3, r3, r1
 8004914:	eb64 0402 	sbc.w	r4, r4, r2
 8004918:	f04f 0100 	mov.w	r1, #0
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	00e2      	lsls	r2, r4, #3
 8004922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004926:	00d9      	lsls	r1, r3, #3
 8004928:	460b      	mov	r3, r1
 800492a:	4614      	mov	r4, r2
 800492c:	195b      	adds	r3, r3, r5
 800492e:	eb44 0406 	adc.w	r4, r4, r6
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	0262      	lsls	r2, r4, #9
 800493c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004940:	0259      	lsls	r1, r3, #9
 8004942:	460b      	mov	r3, r1
 8004944:	4614      	mov	r4, r2
 8004946:	4618      	mov	r0, r3
 8004948:	4621      	mov	r1, r4
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f04f 0400 	mov.w	r4, #0
 8004950:	461a      	mov	r2, r3
 8004952:	4623      	mov	r3, r4
 8004954:	f7fc f95a 	bl	8000c0c <__aeabi_uldivmod>
 8004958:	4603      	mov	r3, r0
 800495a:	460c      	mov	r4, r1
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e049      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004960:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	f04f 0400 	mov.w	r4, #0
 800496a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	ea03 0501 	and.w	r5, r3, r1
 8004976:	ea04 0602 	and.w	r6, r4, r2
 800497a:	4629      	mov	r1, r5
 800497c:	4632      	mov	r2, r6
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	f04f 0400 	mov.w	r4, #0
 8004986:	0154      	lsls	r4, r2, #5
 8004988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800498c:	014b      	lsls	r3, r1, #5
 800498e:	4619      	mov	r1, r3
 8004990:	4622      	mov	r2, r4
 8004992:	1b49      	subs	r1, r1, r5
 8004994:	eb62 0206 	sbc.w	r2, r2, r6
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	0194      	lsls	r4, r2, #6
 80049a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049a6:	018b      	lsls	r3, r1, #6
 80049a8:	1a5b      	subs	r3, r3, r1
 80049aa:	eb64 0402 	sbc.w	r4, r4, r2
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	00e2      	lsls	r2, r4, #3
 80049b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049bc:	00d9      	lsls	r1, r3, #3
 80049be:	460b      	mov	r3, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	195b      	adds	r3, r3, r5
 80049c4:	eb44 0406 	adc.w	r4, r4, r6
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	02a2      	lsls	r2, r4, #10
 80049d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049d6:	0299      	lsls	r1, r3, #10
 80049d8:	460b      	mov	r3, r1
 80049da:	4614      	mov	r4, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	4621      	mov	r1, r4
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f04f 0400 	mov.w	r4, #0
 80049e6:	461a      	mov	r2, r3
 80049e8:	4623      	mov	r3, r4
 80049ea:	f7fc f90f 	bl	8000c0c <__aeabi_uldivmod>
 80049ee:	4603      	mov	r3, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0f1b      	lsrs	r3, r3, #28
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x338>)
 8004a0e:	613b      	str	r3, [r7, #16]
      break;
 8004a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a12:	693b      	ldr	r3, [r7, #16]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	007a1200 	.word	0x007a1200

08004a28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8083 	beq.w	8004b48 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a42:	4b95      	ldr	r3, [pc, #596]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d019      	beq.n	8004a82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a4e:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d106      	bne.n	8004a68 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a5a:	4b8f      	ldr	r3, [pc, #572]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a66:	d00c      	beq.n	8004a82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a68:	4b8b      	ldr	r3, [pc, #556]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	d112      	bne.n	8004a9a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a74:	4b88      	ldr	r3, [pc, #544]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a80:	d10b      	bne.n	8004a9a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a82:	4b85      	ldr	r3, [pc, #532]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d05b      	beq.n	8004b46 <HAL_RCC_OscConfig+0x11e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d157      	bne.n	8004b46 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e216      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x8a>
 8004aa4:	4b7c      	ldr	r3, [pc, #496]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a7b      	ldr	r2, [pc, #492]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e01d      	b.n	8004aee <HAL_RCC_OscConfig+0xc6>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aba:	d10c      	bne.n	8004ad6 <HAL_RCC_OscConfig+0xae>
 8004abc:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a75      	ldr	r2, [pc, #468]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b73      	ldr	r3, [pc, #460]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a72      	ldr	r2, [pc, #456]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e00b      	b.n	8004aee <HAL_RCC_OscConfig+0xc6>
 8004ad6:	4b70      	ldr	r3, [pc, #448]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6f      	ldr	r2, [pc, #444]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	4b6d      	ldr	r3, [pc, #436]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a6c      	ldr	r2, [pc, #432]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fd fb47 	bl	8002188 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004afe:	f7fd fb43 	bl	8002188 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	; 0x64
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e1db      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0xd6>
 8004b1c:	e014      	b.n	8004b48 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fd fb33 	bl	8002188 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b26:	f7fd fb2f 	bl	8002188 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b64      	cmp	r3, #100	; 0x64
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1c7      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b38:	4b57      	ldr	r3, [pc, #348]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0xfe>
 8004b44:	e000      	b.n	8004b48 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d06f      	beq.n	8004c34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b54:	4b50      	ldr	r3, [pc, #320]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d017      	beq.n	8004b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b60:	4b4d      	ldr	r3, [pc, #308]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b6c:	4b4a      	ldr	r3, [pc, #296]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b78:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b80:	2b0c      	cmp	r3, #12
 8004b82:	d11c      	bne.n	8004bbe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b84:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d116      	bne.n	8004bbe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x180>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e18f      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4938      	ldr	r1, [pc, #224]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bbc:	e03a      	b.n	8004c34 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc6:	4b35      	ldr	r3, [pc, #212]	; (8004c9c <HAL_RCC_OscConfig+0x274>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fadc 	bl	8002188 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fd fad8 	bl	8002188 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e170      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf2:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4925      	ldr	r1, [pc, #148]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]
 8004c06:	e015      	b.n	8004c34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCC_OscConfig+0x274>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0e:	f7fd fabb 	bl	8002188 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c16:	f7fd fab7 	bl	8002188 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e14f      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c28:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d037      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d016      	beq.n	8004c76 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <HAL_RCC_OscConfig+0x278>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4e:	f7fd fa9b 	bl	8002188 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c56:	f7fd fa97 	bl	8002188 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e12f      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x22e>
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <HAL_RCC_OscConfig+0x278>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fd fa84 	bl	8002188 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c82:	e00f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fd fa80 	bl	8002188 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d908      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e118      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	42470000 	.word	0x42470000
 8004ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca4:	4b8a      	ldr	r3, [pc, #552]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e9      	bne.n	8004c84 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8097 	beq.w	8004dec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc2:	4b83      	ldr	r3, [pc, #524]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4b7f      	ldr	r3, [pc, #508]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	4a7e      	ldr	r2, [pc, #504]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cde:	4b7c      	ldr	r3, [pc, #496]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cee:	4b79      	ldr	r3, [pc, #484]	; (8004ed4 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d118      	bne.n	8004d2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cfa:	4b76      	ldr	r3, [pc, #472]	; (8004ed4 <HAL_RCC_OscConfig+0x4ac>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a75      	ldr	r2, [pc, #468]	; (8004ed4 <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d06:	f7fd fa3f 	bl	8002188 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fd fa3b 	bl	8002188 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e0d3      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	4b6c      	ldr	r3, [pc, #432]	; (8004ed4 <HAL_RCC_OscConfig+0x4ac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <HAL_RCC_OscConfig+0x31a>
 8004d34:	4b66      	ldr	r3, [pc, #408]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d40:	e01c      	b.n	8004d7c <HAL_RCC_OscConfig+0x354>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b05      	cmp	r3, #5
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x33c>
 8004d4a:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a60      	ldr	r2, [pc, #384]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
 8004d56:	4b5e      	ldr	r3, [pc, #376]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4a5d      	ldr	r2, [pc, #372]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70
 8004d62:	e00b      	b.n	8004d7c <HAL_RCC_OscConfig+0x354>
 8004d64:	4b5a      	ldr	r3, [pc, #360]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a59      	ldr	r2, [pc, #356]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d70:	4b57      	ldr	r3, [pc, #348]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	4a56      	ldr	r2, [pc, #344]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004d76:	f023 0304 	bic.w	r3, r3, #4
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fd fa00 	bl	8002188 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8a:	e00a      	b.n	8004da2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8c:	f7fd f9fc 	bl	8002188 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e092      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da2:	4b4b      	ldr	r3, [pc, #300]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0ee      	beq.n	8004d8c <HAL_RCC_OscConfig+0x364>
 8004dae:	e014      	b.n	8004dda <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fd f9ea 	bl	8002188 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db6:	e00a      	b.n	8004dce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db8:	f7fd f9e6 	bl	8002188 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e07c      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dce:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1ee      	bne.n	8004db8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d105      	bne.n	8004dec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de0:	4b3b      	ldr	r3, [pc, #236]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d068      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df4:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d060      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d145      	bne.n	8004e94 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <HAL_RCC_OscConfig+0x4b0>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0e:	f7fd f9bb 	bl	8002188 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fd f9b7 	bl	8002188 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e04f      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	019b      	lsls	r3, r3, #6
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	071b      	lsls	r3, r3, #28
 8004e60:	491b      	ldr	r1, [pc, #108]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <HAL_RCC_OscConfig+0x4b0>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6c:	f7fd f98c 	bl	8002188 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fd f988 	bl	8002188 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e020      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x44c>
 8004e92:	e018      	b.n	8004ec6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_RCC_OscConfig+0x4b0>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fd f975 	bl	8002188 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fd f971 	bl	8002188 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_OscConfig+0x4a8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x47a>
 8004ec0:	e001      	b.n	8004ec6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	42470060 	.word	0x42470060

08004edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e01d      	b.n	8004f2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc ffa2 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 f8e4 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_ConfigClockSource+0x18>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0a6      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x166>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fb0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d067      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x120>
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d80b      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x6c>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d073      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x140>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d802      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x62>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d06f      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fda:	e078      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d06c      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x140>
 8004fe0:	2b30      	cmp	r3, #48	; 0x30
 8004fe2:	d06a      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004fe4:	e073      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fe6:	2b70      	cmp	r3, #112	; 0x70
 8004fe8:	d00d      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x8c>
 8004fea:	2b70      	cmp	r3, #112	; 0x70
 8004fec:	d804      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x7e>
 8004fee:	2b50      	cmp	r3, #80	; 0x50
 8004ff0:	d033      	beq.n	800505a <HAL_TIM_ConfigClockSource+0xe0>
 8004ff2:	2b60      	cmp	r3, #96	; 0x60
 8004ff4:	d041      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ff6:	e06a      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffc:	d066      	beq.n	80050cc <HAL_TIM_ConfigClockSource+0x152>
 8004ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005002:	d017      	beq.n	8005034 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005004:	e063      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f000 f981 	bl	800531c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005028:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
      break;
 8005032:	e04c      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6899      	ldr	r1, [r3, #8]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f000 f96a 	bl	800531c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005056:	609a      	str	r2, [r3, #8]
      break;
 8005058:	e039      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6859      	ldr	r1, [r3, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	461a      	mov	r2, r3
 8005068:	f000 f8de 	bl	8005228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2150      	movs	r1, #80	; 0x50
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f937 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8005078:	e029      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	461a      	mov	r2, r3
 8005088:	f000 f8fd 	bl	8005286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2160      	movs	r1, #96	; 0x60
 8005092:	4618      	mov	r0, r3
 8005094:	f000 f927 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8005098:	e019      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 f8be 	bl	8005228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f917 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 80050b8:	e009      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f000 f90e 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 80050ca:	e000      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x154>
      break;
 80050cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a40      	ldr	r2, [pc, #256]	; (80051fc <TIM_Base_SetConfig+0x114>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d00f      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3d      	ldr	r2, [pc, #244]	; (8005200 <TIM_Base_SetConfig+0x118>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3c      	ldr	r2, [pc, #240]	; (8005204 <TIM_Base_SetConfig+0x11c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <TIM_Base_SetConfig+0x120>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3a      	ldr	r2, [pc, #232]	; (800520c <TIM_Base_SetConfig+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <TIM_Base_SetConfig+0x114>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005148:	d027      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <TIM_Base_SetConfig+0x118>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d023      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <TIM_Base_SetConfig+0x11c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01f      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <TIM_Base_SetConfig+0x120>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a29      	ldr	r2, [pc, #164]	; (800520c <TIM_Base_SetConfig+0x124>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d017      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a28      	ldr	r2, [pc, #160]	; (8005210 <TIM_Base_SetConfig+0x128>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a27      	ldr	r2, [pc, #156]	; (8005214 <TIM_Base_SetConfig+0x12c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a26      	ldr	r2, [pc, #152]	; (8005218 <TIM_Base_SetConfig+0x130>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a25      	ldr	r2, [pc, #148]	; (800521c <TIM_Base_SetConfig+0x134>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a24      	ldr	r2, [pc, #144]	; (8005220 <TIM_Base_SetConfig+0x138>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <TIM_Base_SetConfig+0x13c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <TIM_Base_SetConfig+0x114>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a0c      	ldr	r2, [pc, #48]	; (800520c <TIM_Base_SetConfig+0x124>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d103      	bne.n	80051e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	615a      	str	r2, [r3, #20]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800
 800521c:	40001800 	.word	0x40001800
 8005220:	40001c00 	.word	0x40001c00
 8005224:	40002000 	.word	0x40002000

08005228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 030a 	bic.w	r3, r3, #10
 8005264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005286:	b480      	push	{r7}
 8005288:	b087      	sub	sp, #28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0210 	bic.w	r2, r3, #16
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	031b      	lsls	r3, r3, #12
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	f043 0307 	orr.w	r3, r3, #7
 8005308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	609a      	str	r2, [r3, #8]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	431a      	orrs	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005370:	2302      	movs	r3, #2
 8005372:	e05a      	b.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a21      	ldr	r2, [pc, #132]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c0:	d01d      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1d      	ldr	r2, [pc, #116]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1a      	ldr	r2, [pc, #104]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a18      	ldr	r2, [pc, #96]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a17      	ldr	r2, [pc, #92]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a15      	ldr	r2, [pc, #84]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10c      	bne.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4313      	orrs	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40001800 	.word	0x40001800

08005454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e03f      	b.n	80054e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fc fd06 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f829 	bl	80054f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005532:	f023 030c 	bic.w	r3, r3, #12
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	430b      	orrs	r3, r1
 800553e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	f040 818b 	bne.w	8005878 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4ac1      	ldr	r2, [pc, #772]	; (800586c <UART_SetConfig+0x37c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d005      	beq.n	8005578 <UART_SetConfig+0x88>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4abf      	ldr	r2, [pc, #764]	; (8005870 <UART_SetConfig+0x380>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f040 80bd 	bne.w	80056f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7ff f8a2 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 800557c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	461d      	mov	r5, r3
 8005582:	f04f 0600 	mov.w	r6, #0
 8005586:	46a8      	mov	r8, r5
 8005588:	46b1      	mov	r9, r6
 800558a:	eb18 0308 	adds.w	r3, r8, r8
 800558e:	eb49 0409 	adc.w	r4, r9, r9
 8005592:	4698      	mov	r8, r3
 8005594:	46a1      	mov	r9, r4
 8005596:	eb18 0805 	adds.w	r8, r8, r5
 800559a:	eb49 0906 	adc.w	r9, r9, r6
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055b2:	4688      	mov	r8, r1
 80055b4:	4691      	mov	r9, r2
 80055b6:	eb18 0005 	adds.w	r0, r8, r5
 80055ba:	eb49 0106 	adc.w	r1, r9, r6
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	461d      	mov	r5, r3
 80055c4:	f04f 0600 	mov.w	r6, #0
 80055c8:	196b      	adds	r3, r5, r5
 80055ca:	eb46 0406 	adc.w	r4, r6, r6
 80055ce:	461a      	mov	r2, r3
 80055d0:	4623      	mov	r3, r4
 80055d2:	f7fb fb1b 	bl	8000c0c <__aeabi_uldivmod>
 80055d6:	4603      	mov	r3, r0
 80055d8:	460c      	mov	r4, r1
 80055da:	461a      	mov	r2, r3
 80055dc:	4ba5      	ldr	r3, [pc, #660]	; (8005874 <UART_SetConfig+0x384>)
 80055de:	fba3 2302 	umull	r2, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	461d      	mov	r5, r3
 80055ec:	f04f 0600 	mov.w	r6, #0
 80055f0:	46a9      	mov	r9, r5
 80055f2:	46b2      	mov	sl, r6
 80055f4:	eb19 0309 	adds.w	r3, r9, r9
 80055f8:	eb4a 040a 	adc.w	r4, sl, sl
 80055fc:	4699      	mov	r9, r3
 80055fe:	46a2      	mov	sl, r4
 8005600:	eb19 0905 	adds.w	r9, r9, r5
 8005604:	eb4a 0a06 	adc.w	sl, sl, r6
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005614:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005618:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800561c:	4689      	mov	r9, r1
 800561e:	4692      	mov	sl, r2
 8005620:	eb19 0005 	adds.w	r0, r9, r5
 8005624:	eb4a 0106 	adc.w	r1, sl, r6
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	461d      	mov	r5, r3
 800562e:	f04f 0600 	mov.w	r6, #0
 8005632:	196b      	adds	r3, r5, r5
 8005634:	eb46 0406 	adc.w	r4, r6, r6
 8005638:	461a      	mov	r2, r3
 800563a:	4623      	mov	r3, r4
 800563c:	f7fb fae6 	bl	8000c0c <__aeabi_uldivmod>
 8005640:	4603      	mov	r3, r0
 8005642:	460c      	mov	r4, r1
 8005644:	461a      	mov	r2, r3
 8005646:	4b8b      	ldr	r3, [pc, #556]	; (8005874 <UART_SetConfig+0x384>)
 8005648:	fba3 1302 	umull	r1, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	2164      	movs	r1, #100	; 0x64
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	3332      	adds	r3, #50	; 0x32
 800565a:	4a86      	ldr	r2, [pc, #536]	; (8005874 <UART_SetConfig+0x384>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005668:	4498      	add	r8, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	461d      	mov	r5, r3
 800566e:	f04f 0600 	mov.w	r6, #0
 8005672:	46a9      	mov	r9, r5
 8005674:	46b2      	mov	sl, r6
 8005676:	eb19 0309 	adds.w	r3, r9, r9
 800567a:	eb4a 040a 	adc.w	r4, sl, sl
 800567e:	4699      	mov	r9, r3
 8005680:	46a2      	mov	sl, r4
 8005682:	eb19 0905 	adds.w	r9, r9, r5
 8005686:	eb4a 0a06 	adc.w	sl, sl, r6
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800569a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800569e:	4689      	mov	r9, r1
 80056a0:	4692      	mov	sl, r2
 80056a2:	eb19 0005 	adds.w	r0, r9, r5
 80056a6:	eb4a 0106 	adc.w	r1, sl, r6
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	461d      	mov	r5, r3
 80056b0:	f04f 0600 	mov.w	r6, #0
 80056b4:	196b      	adds	r3, r5, r5
 80056b6:	eb46 0406 	adc.w	r4, r6, r6
 80056ba:	461a      	mov	r2, r3
 80056bc:	4623      	mov	r3, r4
 80056be:	f7fb faa5 	bl	8000c0c <__aeabi_uldivmod>
 80056c2:	4603      	mov	r3, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b6a      	ldr	r3, [pc, #424]	; (8005874 <UART_SetConfig+0x384>)
 80056ca:	fba3 1302 	umull	r1, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2164      	movs	r1, #100	; 0x64
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a65      	ldr	r2, [pc, #404]	; (8005874 <UART_SetConfig+0x384>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 0207 	and.w	r2, r3, #7
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4442      	add	r2, r8
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	e26f      	b.n	8005bd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056f2:	f7fe ffd1 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80056f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	461d      	mov	r5, r3
 80056fc:	f04f 0600 	mov.w	r6, #0
 8005700:	46a8      	mov	r8, r5
 8005702:	46b1      	mov	r9, r6
 8005704:	eb18 0308 	adds.w	r3, r8, r8
 8005708:	eb49 0409 	adc.w	r4, r9, r9
 800570c:	4698      	mov	r8, r3
 800570e:	46a1      	mov	r9, r4
 8005710:	eb18 0805 	adds.w	r8, r8, r5
 8005714:	eb49 0906 	adc.w	r9, r9, r6
 8005718:	f04f 0100 	mov.w	r1, #0
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005724:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005728:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800572c:	4688      	mov	r8, r1
 800572e:	4691      	mov	r9, r2
 8005730:	eb18 0005 	adds.w	r0, r8, r5
 8005734:	eb49 0106 	adc.w	r1, r9, r6
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	461d      	mov	r5, r3
 800573e:	f04f 0600 	mov.w	r6, #0
 8005742:	196b      	adds	r3, r5, r5
 8005744:	eb46 0406 	adc.w	r4, r6, r6
 8005748:	461a      	mov	r2, r3
 800574a:	4623      	mov	r3, r4
 800574c:	f7fb fa5e 	bl	8000c0c <__aeabi_uldivmod>
 8005750:	4603      	mov	r3, r0
 8005752:	460c      	mov	r4, r1
 8005754:	461a      	mov	r2, r3
 8005756:	4b47      	ldr	r3, [pc, #284]	; (8005874 <UART_SetConfig+0x384>)
 8005758:	fba3 2302 	umull	r2, r3, r3, r2
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	461d      	mov	r5, r3
 8005766:	f04f 0600 	mov.w	r6, #0
 800576a:	46a9      	mov	r9, r5
 800576c:	46b2      	mov	sl, r6
 800576e:	eb19 0309 	adds.w	r3, r9, r9
 8005772:	eb4a 040a 	adc.w	r4, sl, sl
 8005776:	4699      	mov	r9, r3
 8005778:	46a2      	mov	sl, r4
 800577a:	eb19 0905 	adds.w	r9, r9, r5
 800577e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005782:	f04f 0100 	mov.w	r1, #0
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800578e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005796:	4689      	mov	r9, r1
 8005798:	4692      	mov	sl, r2
 800579a:	eb19 0005 	adds.w	r0, r9, r5
 800579e:	eb4a 0106 	adc.w	r1, sl, r6
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	461d      	mov	r5, r3
 80057a8:	f04f 0600 	mov.w	r6, #0
 80057ac:	196b      	adds	r3, r5, r5
 80057ae:	eb46 0406 	adc.w	r4, r6, r6
 80057b2:	461a      	mov	r2, r3
 80057b4:	4623      	mov	r3, r4
 80057b6:	f7fb fa29 	bl	8000c0c <__aeabi_uldivmod>
 80057ba:	4603      	mov	r3, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	461a      	mov	r2, r3
 80057c0:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <UART_SetConfig+0x384>)
 80057c2:	fba3 1302 	umull	r1, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2164      	movs	r1, #100	; 0x64
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	3332      	adds	r3, #50	; 0x32
 80057d4:	4a27      	ldr	r2, [pc, #156]	; (8005874 <UART_SetConfig+0x384>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e2:	4498      	add	r8, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	461d      	mov	r5, r3
 80057e8:	f04f 0600 	mov.w	r6, #0
 80057ec:	46a9      	mov	r9, r5
 80057ee:	46b2      	mov	sl, r6
 80057f0:	eb19 0309 	adds.w	r3, r9, r9
 80057f4:	eb4a 040a 	adc.w	r4, sl, sl
 80057f8:	4699      	mov	r9, r3
 80057fa:	46a2      	mov	sl, r4
 80057fc:	eb19 0905 	adds.w	r9, r9, r5
 8005800:	eb4a 0a06 	adc.w	sl, sl, r6
 8005804:	f04f 0100 	mov.w	r1, #0
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005810:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005814:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005818:	4689      	mov	r9, r1
 800581a:	4692      	mov	sl, r2
 800581c:	eb19 0005 	adds.w	r0, r9, r5
 8005820:	eb4a 0106 	adc.w	r1, sl, r6
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	461d      	mov	r5, r3
 800582a:	f04f 0600 	mov.w	r6, #0
 800582e:	196b      	adds	r3, r5, r5
 8005830:	eb46 0406 	adc.w	r4, r6, r6
 8005834:	461a      	mov	r2, r3
 8005836:	4623      	mov	r3, r4
 8005838:	f7fb f9e8 	bl	8000c0c <__aeabi_uldivmod>
 800583c:	4603      	mov	r3, r0
 800583e:	460c      	mov	r4, r1
 8005840:	461a      	mov	r2, r3
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <UART_SetConfig+0x384>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	2164      	movs	r1, #100	; 0x64
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	3332      	adds	r3, #50	; 0x32
 8005856:	4a07      	ldr	r2, [pc, #28]	; (8005874 <UART_SetConfig+0x384>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f003 0207 	and.w	r2, r3, #7
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4442      	add	r2, r8
 8005868:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800586a:	e1b2      	b.n	8005bd2 <UART_SetConfig+0x6e2>
 800586c:	40011000 	.word	0x40011000
 8005870:	40011400 	.word	0x40011400
 8005874:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4ad7      	ldr	r2, [pc, #860]	; (8005bdc <UART_SetConfig+0x6ec>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d005      	beq.n	800588e <UART_SetConfig+0x39e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4ad6      	ldr	r2, [pc, #856]	; (8005be0 <UART_SetConfig+0x6f0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	f040 80d1 	bne.w	8005a30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800588e:	f7fe ff17 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 8005892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	469a      	mov	sl, r3
 8005898:	f04f 0b00 	mov.w	fp, #0
 800589c:	46d0      	mov	r8, sl
 800589e:	46d9      	mov	r9, fp
 80058a0:	eb18 0308 	adds.w	r3, r8, r8
 80058a4:	eb49 0409 	adc.w	r4, r9, r9
 80058a8:	4698      	mov	r8, r3
 80058aa:	46a1      	mov	r9, r4
 80058ac:	eb18 080a 	adds.w	r8, r8, sl
 80058b0:	eb49 090b 	adc.w	r9, r9, fp
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058c8:	4688      	mov	r8, r1
 80058ca:	4691      	mov	r9, r2
 80058cc:	eb1a 0508 	adds.w	r5, sl, r8
 80058d0:	eb4b 0609 	adc.w	r6, fp, r9
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4619      	mov	r1, r3
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	f04f 0400 	mov.w	r4, #0
 80058e6:	0094      	lsls	r4, r2, #2
 80058e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058ec:	008b      	lsls	r3, r1, #2
 80058ee:	461a      	mov	r2, r3
 80058f0:	4623      	mov	r3, r4
 80058f2:	4628      	mov	r0, r5
 80058f4:	4631      	mov	r1, r6
 80058f6:	f7fb f989 	bl	8000c0c <__aeabi_uldivmod>
 80058fa:	4603      	mov	r3, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	461a      	mov	r2, r3
 8005900:	4bb8      	ldr	r3, [pc, #736]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005902:	fba3 2302 	umull	r2, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	469b      	mov	fp, r3
 8005910:	f04f 0c00 	mov.w	ip, #0
 8005914:	46d9      	mov	r9, fp
 8005916:	46e2      	mov	sl, ip
 8005918:	eb19 0309 	adds.w	r3, r9, r9
 800591c:	eb4a 040a 	adc.w	r4, sl, sl
 8005920:	4699      	mov	r9, r3
 8005922:	46a2      	mov	sl, r4
 8005924:	eb19 090b 	adds.w	r9, r9, fp
 8005928:	eb4a 0a0c 	adc.w	sl, sl, ip
 800592c:	f04f 0100 	mov.w	r1, #0
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800593c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005940:	4689      	mov	r9, r1
 8005942:	4692      	mov	sl, r2
 8005944:	eb1b 0509 	adds.w	r5, fp, r9
 8005948:	eb4c 060a 	adc.w	r6, ip, sl
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4619      	mov	r1, r3
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	f04f 0400 	mov.w	r4, #0
 800595e:	0094      	lsls	r4, r2, #2
 8005960:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005964:	008b      	lsls	r3, r1, #2
 8005966:	461a      	mov	r2, r3
 8005968:	4623      	mov	r3, r4
 800596a:	4628      	mov	r0, r5
 800596c:	4631      	mov	r1, r6
 800596e:	f7fb f94d 	bl	8000c0c <__aeabi_uldivmod>
 8005972:	4603      	mov	r3, r0
 8005974:	460c      	mov	r4, r1
 8005976:	461a      	mov	r2, r3
 8005978:	4b9a      	ldr	r3, [pc, #616]	; (8005be4 <UART_SetConfig+0x6f4>)
 800597a:	fba3 1302 	umull	r1, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	2164      	movs	r1, #100	; 0x64
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	3332      	adds	r3, #50	; 0x32
 800598c:	4a95      	ldr	r2, [pc, #596]	; (8005be4 <UART_SetConfig+0x6f4>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005998:	4498      	add	r8, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	469b      	mov	fp, r3
 800599e:	f04f 0c00 	mov.w	ip, #0
 80059a2:	46d9      	mov	r9, fp
 80059a4:	46e2      	mov	sl, ip
 80059a6:	eb19 0309 	adds.w	r3, r9, r9
 80059aa:	eb4a 040a 	adc.w	r4, sl, sl
 80059ae:	4699      	mov	r9, r3
 80059b0:	46a2      	mov	sl, r4
 80059b2:	eb19 090b 	adds.w	r9, r9, fp
 80059b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ce:	4689      	mov	r9, r1
 80059d0:	4692      	mov	sl, r2
 80059d2:	eb1b 0509 	adds.w	r5, fp, r9
 80059d6:	eb4c 060a 	adc.w	r6, ip, sl
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4619      	mov	r1, r3
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	0094      	lsls	r4, r2, #2
 80059ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059f2:	008b      	lsls	r3, r1, #2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	4631      	mov	r1, r6
 80059fc:	f7fb f906 	bl	8000c0c <__aeabi_uldivmod>
 8005a00:	4603      	mov	r3, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b77      	ldr	r3, [pc, #476]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005a08:	fba3 1302 	umull	r1, r3, r3, r2
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	2164      	movs	r1, #100	; 0x64
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	3332      	adds	r3, #50	; 0x32
 8005a1a:	4a72      	ldr	r2, [pc, #456]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4442      	add	r2, r8
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	e0d0      	b.n	8005bd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a30:	f7fe fe32 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005a34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	469a      	mov	sl, r3
 8005a3a:	f04f 0b00 	mov.w	fp, #0
 8005a3e:	46d0      	mov	r8, sl
 8005a40:	46d9      	mov	r9, fp
 8005a42:	eb18 0308 	adds.w	r3, r8, r8
 8005a46:	eb49 0409 	adc.w	r4, r9, r9
 8005a4a:	4698      	mov	r8, r3
 8005a4c:	46a1      	mov	r9, r4
 8005a4e:	eb18 080a 	adds.w	r8, r8, sl
 8005a52:	eb49 090b 	adc.w	r9, r9, fp
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a6a:	4688      	mov	r8, r1
 8005a6c:	4691      	mov	r9, r2
 8005a6e:	eb1a 0508 	adds.w	r5, sl, r8
 8005a72:	eb4b 0609 	adc.w	r6, fp, r9
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	f04f 0400 	mov.w	r4, #0
 8005a88:	0094      	lsls	r4, r2, #2
 8005a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a8e:	008b      	lsls	r3, r1, #2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4623      	mov	r3, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	4631      	mov	r1, r6
 8005a98:	f7fb f8b8 	bl	8000c0c <__aeabi_uldivmod>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	469b      	mov	fp, r3
 8005ab2:	f04f 0c00 	mov.w	ip, #0
 8005ab6:	46d9      	mov	r9, fp
 8005ab8:	46e2      	mov	sl, ip
 8005aba:	eb19 0309 	adds.w	r3, r9, r9
 8005abe:	eb4a 040a 	adc.w	r4, sl, sl
 8005ac2:	4699      	mov	r9, r3
 8005ac4:	46a2      	mov	sl, r4
 8005ac6:	eb19 090b 	adds.w	r9, r9, fp
 8005aca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ada:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ade:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ae2:	4689      	mov	r9, r1
 8005ae4:	4692      	mov	sl, r2
 8005ae6:	eb1b 0509 	adds.w	r5, fp, r9
 8005aea:	eb4c 060a 	adc.w	r6, ip, sl
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4619      	mov	r1, r3
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	f04f 0400 	mov.w	r4, #0
 8005b00:	0094      	lsls	r4, r2, #2
 8005b02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b06:	008b      	lsls	r3, r1, #2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	4631      	mov	r1, r6
 8005b10:	f7fb f87c 	bl	8000c0c <__aeabi_uldivmod>
 8005b14:	4603      	mov	r3, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	2164      	movs	r1, #100	; 0x64
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	3332      	adds	r3, #50	; 0x32
 8005b2e:	4a2d      	ldr	r2, [pc, #180]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b3a:	4498      	add	r8, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	469b      	mov	fp, r3
 8005b40:	f04f 0c00 	mov.w	ip, #0
 8005b44:	46d9      	mov	r9, fp
 8005b46:	46e2      	mov	sl, ip
 8005b48:	eb19 0309 	adds.w	r3, r9, r9
 8005b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8005b50:	4699      	mov	r9, r3
 8005b52:	46a2      	mov	sl, r4
 8005b54:	eb19 090b 	adds.w	r9, r9, fp
 8005b58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b70:	4689      	mov	r9, r1
 8005b72:	4692      	mov	sl, r2
 8005b74:	eb1b 0509 	adds.w	r5, fp, r9
 8005b78:	eb4c 060a 	adc.w	r6, ip, sl
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	0094      	lsls	r4, r2, #2
 8005b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b94:	008b      	lsls	r3, r1, #2
 8005b96:	461a      	mov	r2, r3
 8005b98:	4623      	mov	r3, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	f7fb f835 	bl	8000c0c <__aeabi_uldivmod>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005baa:	fba3 1302 	umull	r1, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2164      	movs	r1, #100	; 0x64
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	3332      	adds	r3, #50	; 0x32
 8005bbc:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4442      	add	r2, r8
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	e7ff      	b.n	8005bd2 <UART_SetConfig+0x6e2>
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	40011400 	.word	0x40011400
 8005be4:	51eb851f 	.word	0x51eb851f

08005be8 <_ZN4OLEDC1Ev>:

#include "RJA_SSD1306.h"

constexpr unsigned char OLED::font1[];

OLED::OLED()
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <_ZN4OLEDC1Ev+0x30>)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2278      	movs	r2, #120	; 0x78
 8005bfa:	711a      	strb	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	227a      	movs	r2, #122	; 0x7a
 8005c00:	715a      	strb	r2, [r3, #5]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	719a      	strb	r2, [r3, #6]
{
	// TODO Auto-generated constructor stub

}
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	080075a0 	.word	0x080075a0

08005c1c <_ZN4OLEDD1Ev>:

OLED::~OLED()
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <_ZN4OLEDD1Ev+0x1c>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	080075a0 	.word	0x080075a0

08005c3c <_ZN4OLEDD0Ev>:
OLED::~OLED()
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
}
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff ffe9 	bl	8005c1c <_ZN4OLEDD1Ev>
 8005c4a:	f242 010c 	movw	r1, #8204	; 0x200c
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 faa8 	bl	80061a4 <_ZdlPvj>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <_ZN4OLED4initEP19__I2C_HandleTypeDef>:

void OLED::init(I2C_HandleTypeDef *hi2c1)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b088      	sub	sp, #32
 8005c62:	af02      	add	r7, sp, #8
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
	uint8_t I2CBuff[2];
		//uint16_t OLEDCAddress = 0x78;
		hi2cI = hi2c1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	609a      	str	r2, [r3, #8]

		//display off
		I2CBuff[0] = 0x00;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 8005c72:	23ae      	movs	r3, #174	; 0xae
 8005c74:	737b      	strb	r3, [r7, #13]
		//memory mode: horizontal addressing
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6898      	ldr	r0, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	791b      	ldrb	r3, [r3, #4]
 8005c7e:	b299      	uxth	r1, r3
 8005c80:	f107 020c 	add.w	r2, r7, #12
 8005c84:	230a      	movs	r3, #10
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	f7fd ffdd 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x20;	//memory mode
 8005c92:	2320      	movs	r3, #32
 8005c94:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6898      	ldr	r0, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	791b      	ldrb	r3, [r3, #4]
 8005c9e:	b299      	uxth	r1, r3
 8005ca0:	f107 020c 	add.w	r2, r7, #12
 8005ca4:	230a      	movs	r3, #10
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	2302      	movs	r3, #2
 8005caa:	f7fd ffcd 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00;	//horizontal addressing
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	737b      	strb	r3, [r7, #13]
		//scan starting line
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6898      	ldr	r0, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	791b      	ldrb	r3, [r3, #4]
 8005cbe:	b299      	uxth	r1, r3
 8005cc0:	f107 020c 	add.w	r2, r7, #12
 8005cc4:	230a      	movs	r3, #10
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	2302      	movs	r3, #2
 8005cca:	f7fd ffbd 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 8005cd2:	2340      	movs	r3, #64	; 0x40
 8005cd4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6898      	ldr	r0, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	791b      	ldrb	r3, [r3, #4]
 8005cde:	b299      	uxth	r1, r3
 8005ce0:	f107 020c 	add.w	r2, r7, #12
 8005ce4:	230a      	movs	r3, #10
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	f7fd ffad 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	737b      	strb	r3, [r7, #13]
		//charge pump on (2 commands)
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6898      	ldr	r0, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	791b      	ldrb	r3, [r3, #4]
 8005cfe:	b299      	uxth	r1, r3
 8005d00:	f107 020c 	add.w	r2, r7, #12
 8005d04:	230a      	movs	r3, #10
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2302      	movs	r3, #2
 8005d0a:	f7fd ff9d 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x8D;
 8005d12:	238d      	movs	r3, #141	; 0x8d
 8005d14:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6898      	ldr	r0, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	791b      	ldrb	r3, [r3, #4]
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	f107 020c 	add.w	r2, r7, #12
 8005d24:	230a      	movs	r3, #10
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2302      	movs	r3, #2
 8005d2a:	f7fd ff8d 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x14;
 8005d32:	2314      	movs	r3, #20
 8005d34:	737b      	strb	r3, [r7, #13]
		//entire display on, from RAM content
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6898      	ldr	r0, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	791b      	ldrb	r3, [r3, #4]
 8005d3e:	b299      	uxth	r1, r3
 8005d40:	f107 020c 	add.w	r2, r7, #12
 8005d44:	230a      	movs	r3, #10
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2302      	movs	r3, #2
 8005d4a:	f7fd ff7d 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 8005d52:	23a4      	movs	r3, #164	; 0xa4
 8005d54:	737b      	strb	r3, [r7, #13]
		//display on
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6898      	ldr	r0, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	791b      	ldrb	r3, [r3, #4]
 8005d5e:	b299      	uxth	r1, r3
 8005d60:	f107 020c 	add.w	r2, r7, #12
 8005d64:	230a      	movs	r3, #10
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f7fd ff6d 	bl	8003c48 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 8005d72:	23af      	movs	r3, #175	; 0xaf
 8005d74:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6898      	ldr	r0, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	791b      	ldrb	r3, [r3, #4]
 8005d7e:	b299      	uxth	r1, r3
 8005d80:	f107 020c 	add.w	r2, r7, #12
 8005d84:	230a      	movs	r3, #10
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f7fd ff5d 	bl	8003c48 <HAL_I2C_Master_Transmit>

		//initialise frame to zeros i.e. "empty" GDDRAM
		for(int r = 0; r < 64; r++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b3f      	cmp	r3, #63	; 0x3f
 8005d96:	dc15      	bgt.n	8005dc4 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x166>
		{
			for(int c = 0; c < 128; c++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005da0:	dc0c      	bgt.n	8005dbc <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x15e>
			{
				//pixel(c,r,0);	//problem!
				frame[c][r] = 0;
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	019b      	lsls	r3, r3, #6
 8005da8:	441a      	add	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	330c      	adds	r3, #12
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
			for(int c = 0; c < 128; c++)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3301      	adds	r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e7ef      	b.n	8005d9c <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x13e>
		for(int r = 0; r < 64; r++)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e7e6      	b.n	8005d92 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x134>
			}
		}
}
 8005dc4:	bf00      	nop
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <_ZN4OLED14drawFullscreenEv>:

void OLED::drawFullscreen() //I2C_HandleTypeDef *hi2c1
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08c      	sub	sp, #48	; 0x30
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	6078      	str	r0, [r7, #4]
	uint8_t I2CBuff[2];
	int r, c, b, row, col;
	for (r = 0; r < 8; r++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	dc40      	bgt.n	8005e60 <_ZN4OLED14drawFullscreenEv+0x94>
	{
		for (c = 0; c < 128; c++)
 8005dde:	2300      	movs	r3, #0
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2b7f      	cmp	r3, #127	; 0x7f
 8005de6:	dc37      	bgt.n	8005e58 <_ZN4OLED14drawFullscreenEv+0x8c>
		{
			uint8_t temp = 0x00;
 8005de8:	2300      	movs	r3, #0
 8005dea:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b07      	cmp	r3, #7
 8005df4:	dc1c      	bgt.n	8005e30 <_ZN4OLED14drawFullscreenEv+0x64>
			{
				row = r*8 + b;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
				col = c;
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	613b      	str	r3, [r7, #16]
				temp |= (frame[col][row]) << b;
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	019b      	lsls	r3, r3, #6
 8005e0a:	441a      	add	r2, r3
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4413      	add	r3, r2
 8005e10:	330c      	adds	r3, #12
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	b25a      	sxtb	r2, r3
 8005e1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	b25b      	sxtb	r3, r3
 8005e26:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e7df      	b.n	8005df0 <_ZN4OLED14drawFullscreenEv+0x24>
			}
			//
			I2CBuff[0] = 0x40;	//to write data
 8005e30:	2340      	movs	r3, #64	; 0x40
 8005e32:	733b      	strb	r3, [r7, #12]
			I2CBuff[1] = temp;
 8005e34:	7efb      	ldrb	r3, [r7, #27]
 8005e36:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6898      	ldr	r0, [r3, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	b299      	uxth	r1, r3
 8005e42:	f107 020c 	add.w	r2, r7, #12
 8005e46:	2305      	movs	r3, #5
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	f7fd fefc 	bl	8003c48 <HAL_I2C_Master_Transmit>
		for (c = 0; c < 128; c++)
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	3301      	adds	r3, #1
 8005e54:	623b      	str	r3, [r7, #32]
 8005e56:	e7c4      	b.n	8005de2 <_ZN4OLED14drawFullscreenEv+0x16>
	for (r = 0; r < 8; r++)
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5e:	e7bb      	b.n	8005dd8 <_ZN4OLED14drawFullscreenEv+0xc>
		}
	}
}
 8005e60:	bf00      	nop
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <_ZN4OLED11getCAddressEv>:
	}
	HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
}

uint8_t OLED::getCAddress()
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	return CAddress;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	791b      	ldrb	r3, [r3, #4]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <_ZN4OLED5pixelEiibb>:
{
	return DAddress;
}

void OLED::pixel(int x, int y, bool colour, bool locked)	//use locked when inconvenient to lock from outside
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	70fb      	strb	r3, [r7, #3]
	if(locked)
 8005e8e:	7e3b      	ldrb	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <_ZN4OLED5pixelEiibb+0x2c>
	{
		if(x < 0 || y < 0 || x >= width || y >= height)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	db12      	blt.n	8005ec0 <_ZN4OLED5pixelEiibb+0x40>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	db0f      	blt.n	8005ec0 <_ZN4OLED5pixelEiibb+0x40>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea4:	dc0c      	bgt.n	8005ec0 <_ZN4OLED5pixelEiibb+0x40>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b3f      	cmp	r3, #63	; 0x3f
 8005eaa:	dc09      	bgt.n	8005ec0 <_ZN4OLED5pixelEiibb+0x40>
		{
			return;
		}
	}
	frame[x][y] = colour;
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	441a      	add	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	330c      	adds	r3, #12
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e000      	b.n	8005ec2 <_ZN4OLED5pixelEiibb+0x42>
			return;
 8005ec0:	bf00      	nop
}
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <_ZN4OLED8fillRectEiiiib>:
	line(x0, y0, x0, y0+rectHeight, colour, lineWidth);
	line(x1, y1-rectHeight, x1, y1, colour, lineWidth);
}

void OLED::fillRect(int x0, int y0, int x1, int y1, bool colour)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
	fill(x0, y0, x1, y1, colour);
 8005eda:	7f3b      	ldrb	r3, [r7, #28]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f804 	bl	8005ef6 <_ZN4OLED4fillEiiiib>
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <_ZN4OLED4fillEiiiib>:
			pixel(c,r,colour);	//frame[c][r] = colour;
		}
	}
}
void OLED::fill(int x0, int y0, int x1, int y1, bool colour)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af02      	add	r7, sp, #8
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
 8005f02:	603b      	str	r3, [r7, #0]
	for(int r = y0; r <= y1; r++)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	dc17      	bgt.n	8005f40 <_ZN4OLED4fillEiiiib+0x4a>
	{
		for(int c = x0; c <= x1; c++)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	dc0d      	bgt.n	8005f38 <_ZN4OLED4fillEiiiib+0x42>
		{
			pixel(c, r, colour, 1);	//frame[c][r] = colour;
 8005f1c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005f20:	2301      	movs	r3, #1
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	6939      	ldr	r1, [r7, #16]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff ffa8 	bl	8005e80 <_ZN4OLED5pixelEiibb>
		for(int c = x0; c <= x1; c++)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	3301      	adds	r3, #1
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	e7ed      	b.n	8005f14 <_ZN4OLED4fillEiiiib+0x1e>
	for(int r = y0; r <= y1; r++)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e7e3      	b.n	8005f08 <_ZN4OLED4fillEiiiib+0x12>
		}
	}
}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <_ZN4OLED9characterEiihbbi>:
		}
	}
}

void OLED::character(int x, int y, unsigned char c, bool colour, bool bg, int size)
{
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	70fb      	strb	r3, [r7, #3]
	if((x >= width)            || // Clip right
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5a:	f300 80df 	bgt.w	800611c <_ZN4OLED9characterEiihbbi+0x1d4>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b3f      	cmp	r3, #63	; 0x3f
 8005f62:	f300 80db 	bgt.w	800611c <_ZN4OLED9characterEiihbbi+0x1d4>
	 (y >= height)           || // Clip bottom
	 ((x + 6 * size - 1) < 0) || // Clip left
 8005f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	461a      	mov	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4413      	add	r3, r2
 8005f76:	3b01      	subs	r3, #1
	 (y >= height)           || // Clip bottom
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f2c0 80cf 	blt.w	800611c <_ZN4OLED9characterEiihbbi+0x1d4>
	 ((y + 8 * size - 1) < 0))   // Clip top
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	00da      	lsls	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	3b01      	subs	r3, #1
	 ((x + 6 * size - 1) < 0) || // Clip left
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f2c0 80c7 	blt.w	800611c <_ZN4OLED9characterEiihbbi+0x1d4>
	return;

	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	799b      	ldrb	r3, [r3, #6]
 8005f92:	f083 0301 	eor.w	r3, r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <_ZN4OLED9characterEiihbbi+0x60>
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	2baf      	cmp	r3, #175	; 0xaf
 8005fa0:	d902      	bls.n	8005fa8 <_ZN4OLED9characterEiihbbi+0x60>
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	70fb      	strb	r3, [r7, #3]

	for (int8_t i=0; i<6; i++ )
 8005fa8:	2300      	movs	r3, #0
 8005faa:	75fb      	strb	r3, [r7, #23]
 8005fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	f300 80b4 	bgt.w	800611e <_ZN4OLED9characterEiihbbi+0x1d6>
	{
		uint8_t line;
		if (i == 5)
 8005fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d102      	bne.n	8005fc4 <_ZN4OLED9characterEiihbbi+0x7c>
			line = 0x0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75bb      	strb	r3, [r7, #22]
 8005fc2:	e009      	b.n	8005fd8 <_ZN4OLED9characterEiihbbi+0x90>
		else
		{
			line = pgm_read_byte(&font1[(c*5)+i]);
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4a54      	ldr	r2, [pc, #336]	; (8006124 <_ZN4OLED9characterEiihbbi+0x1dc>)
 8005fd4:	5cd3      	ldrb	r3, [r2, r3]
 8005fd6:	75bb      	strb	r3, [r7, #22]
		}
		for (int8_t j = 0; j<8; j++)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	757b      	strb	r3, [r7, #21]
 8005fdc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005fe0:	2b07      	cmp	r3, #7
 8005fe2:	f300 8094 	bgt.w	800610e <_ZN4OLED9characterEiihbbi+0x1c6>
		{
			if (line & 0x1)
 8005fe6:	7dbb      	ldrb	r3, [r7, #22]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d03f      	beq.n	8006070 <_ZN4OLED9characterEiihbbi+0x128>
			{
				if (size == 1) // default size
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d110      	bne.n	8006018 <_ZN4OLED9characterEiihbbi+0xd0>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = colour;
 8005ff6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	18d1      	adds	r1, r2, r3
 8005ffe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	441a      	add	r2, r3
 8006006:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800600a:	2301      	movs	r3, #1
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	4603      	mov	r3, r0
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff ff35 	bl	8005e80 <_ZN4OLED5pixelEiibb>
 8006016:	e070      	b.n	80060fa <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), colour);
 8006018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800601c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601e:	fb02 f203 	mul.w	r2, r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	18d0      	adds	r0, r2, r3
 8006026:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800602a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800602c:	fb02 f203 	mul.w	r2, r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	18d4      	adds	r4, r2, r3
 8006034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	441a      	add	r2, r3
 800603a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800603e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	18d5      	adds	r5, r2, r3
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	441a      	add	r2, r3
 800604e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800605e:	9201      	str	r2, [sp, #4]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	462b      	mov	r3, r5
 8006064:	4622      	mov	r2, r4
 8006066:	4601      	mov	r1, r0
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff ff2f 	bl	8005ecc <_ZN4OLED8fillRectEiiiib>
 800606e:	e044      	b.n	80060fa <_ZN4OLED9characterEiihbbi+0x1b2>
				}
			}
			else if (bg != colour)
 8006070:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006074:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006078:	429a      	cmp	r2, r3
 800607a:	d03e      	beq.n	80060fa <_ZN4OLED9characterEiihbbi+0x1b2>
			{
				if (size == 1) // default size
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2b01      	cmp	r3, #1
 8006080:	d110      	bne.n	80060a4 <_ZN4OLED9characterEiihbbi+0x15c>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = bg;
 8006082:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	18d1      	adds	r1, r2, r3
 800608a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	441a      	add	r2, r3
 8006092:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8006096:	2301      	movs	r3, #1
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4603      	mov	r3, r0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff feef 	bl	8005e80 <_ZN4OLED5pixelEiibb>
 80060a2:	e02a      	b.n	80060fa <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 80060a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060aa:	fb02 f203 	mul.w	r2, r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	18d0      	adds	r0, r2, r3
 80060b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80060b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b8:	fb02 f203 	mul.w	r2, r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	18d4      	adds	r4, r2, r3
 80060c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	441a      	add	r2, r3
 80060c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	18d5      	adds	r5, r2, r3
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	441a      	add	r2, r3
 80060da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80060de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80060ea:	9201      	str	r2, [sp, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	462b      	mov	r3, r5
 80060f0:	4622      	mov	r2, r4
 80060f2:	4601      	mov	r1, r0
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff fee9 	bl	8005ecc <_ZN4OLED8fillRectEiiiib>
				}
			}
			line >>= 1;
 80060fa:	7dbb      	ldrb	r3, [r7, #22]
 80060fc:	105b      	asrs	r3, r3, #1
 80060fe:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j<8; j++)
 8006100:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	3301      	adds	r3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	757b      	strb	r3, [r7, #21]
 800610c:	e766      	b.n	8005fdc <_ZN4OLED9characterEiihbbi+0x94>
	for (int8_t i=0; i<6; i++ )
 800610e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	3301      	adds	r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	75fb      	strb	r3, [r7, #23]
 800611a:	e747      	b.n	8005fac <_ZN4OLED9characterEiihbbi+0x64>
	return;
 800611c:	bf00      	nop
		}
	}
}
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bdb0      	pop	{r4, r5, r7, pc}
 8006124:	08007098 	.word	0x08007098

08006128 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>:

void OLED::text(int x, int y, string s, bool colour, bool bg, int size)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b08b      	sub	sp, #44	; 0x2c
 800612c:	af04      	add	r7, sp, #16
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
	int offset = size*6;
 8006136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006138:	4613      	mov	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4413      	add	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	613b      	str	r3, [r7, #16]
	for(string::size_type i = 0; i < s.size(); i++)
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	6838      	ldr	r0, [r7, #0]
 8006148:	f000 f92a 	bl	80063a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800614c:	4602      	mov	r2, r0
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4293      	cmp	r3, r2
 8006152:	bf34      	ite	cc
 8006154:	2301      	movcc	r3, #1
 8006156:	2300      	movcs	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01e      	beq.n	800619c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x74>
	{
		character(x+(offset*i), y, s[i], colour, bg, size);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	fb02 f203 	mul.w	r2, r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4413      	add	r3, r2
 800616a:	461c      	mov	r4, r3
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	6838      	ldr	r0, [r7, #0]
 8006170:	f000 f918 	bl	80063a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8006174:	4603      	mov	r3, r0
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4621      	mov	r1, r4
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff feda 	bl	8005f48 <_ZN4OLED9characterEiihbbi>
	for(string::size_type i = 0; i < s.size(); i++)
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	3301      	adds	r3, #1
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e7d4      	b.n	8006146 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x1e>
	}
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd90      	pop	{r4, r7, pc}

080061a4 <_ZdlPvj>:
 80061a4:	f000 b800 	b.w	80061a8 <_ZdlPv>

080061a8 <_ZdlPv>:
 80061a8:	f000 bac0 	b.w	800672c <free>

080061ac <_ZNSaIcEC1Ev>:
 80061ac:	4770      	bx	lr

080061ae <_ZNSaIcED1Ev>:
 80061ae:	4770      	bx	lr

080061b0 <_ZSt19__throw_logic_errorPKc>:
 80061b0:	b508      	push	{r3, lr}
 80061b2:	f000 fa81 	bl	80066b8 <abort>

080061b6 <_ZSt20__throw_length_errorPKc>:
 80061b6:	b508      	push	{r3, lr}
 80061b8:	f000 fa7e 	bl	80066b8 <abort>

080061bc <_ZSt24__throw_out_of_range_fmtPKcz>:
 80061bc:	b40f      	push	{r0, r1, r2, r3}
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	f107 0410 	add.w	r4, r7, #16
 80061c8:	f854 5b04 	ldr.w	r5, [r4], #4
 80061cc:	4628      	mov	r0, r5
 80061ce:	f7fa f86f 	bl	80002b0 <strlen>
 80061d2:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	ebad 0d03 	sub.w	sp, sp, r3
 80061de:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80061e2:	4623      	mov	r3, r4
 80061e4:	462a      	mov	r2, r5
 80061e6:	4668      	mov	r0, sp
 80061e8:	607c      	str	r4, [r7, #4]
 80061ea:	f000 fa25 	bl	8006638 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80061ee:	f000 fa63 	bl	80066b8 <abort>

080061f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80061f2:	b10a      	cbz	r2, 80061f8 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80061f4:	f000 baa2 	b.w	800673c <memcpy>
 80061f8:	4770      	bx	lr

080061fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80061fa:	6001      	str	r1, [r0, #0]
 80061fc:	4770      	bx	lr

080061fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80061fe:	6800      	ldr	r0, [r0, #0]
 8006200:	4770      	bx	lr

08006202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8006202:	3008      	adds	r0, #8
 8006204:	4770      	bx	lr

08006206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8006206:	6081      	str	r1, [r0, #8]
 8006208:	4770      	bx	lr

0800620a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800620a:	6803      	ldr	r3, [r0, #0]
 800620c:	6041      	str	r1, [r0, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	545a      	strb	r2, [r3, r1]
 8006212:	4770      	bx	lr

08006214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006214:	b508      	push	{r3, lr}
 8006216:	680b      	ldr	r3, [r1, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	da02      	bge.n	8006222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800621c:	4809      	ldr	r0, [pc, #36]	; (8006244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800621e:	f7ff ffca 	bl	80061b6 <_ZSt20__throw_length_errorPKc>
 8006222:	4293      	cmp	r3, r2
 8006224:	d908      	bls.n	8006238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8006226:	0052      	lsls	r2, r2, #1
 8006228:	4293      	cmp	r3, r2
 800622a:	d205      	bcs.n	8006238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800622c:	2a00      	cmp	r2, #0
 800622e:	bfb6      	itet	lt
 8006230:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8006234:	600a      	strge	r2, [r1, #0]
 8006236:	600b      	strlt	r3, [r1, #0]
 8006238:	6808      	ldr	r0, [r1, #0]
 800623a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800623e:	3001      	adds	r0, #1
 8006240:	f000 b992 	b.w	8006568 <_Znwj>
 8006244:	08007638 	.word	0x08007638

08006248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006248:	4603      	mov	r3, r0
 800624a:	f853 0b08 	ldr.w	r0, [r3], #8
 800624e:	4298      	cmp	r0, r3
 8006250:	d001      	beq.n	8006256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006252:	f7ff bfa9 	b.w	80061a8 <_ZdlPv>
 8006256:	4770      	bx	lr

08006258 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8006258:	b510      	push	{r4, lr}
 800625a:	6843      	ldr	r3, [r0, #4]
 800625c:	4299      	cmp	r1, r3
 800625e:	4614      	mov	r4, r2
 8006260:	d904      	bls.n	800626c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8006262:	460a      	mov	r2, r1
 8006264:	4802      	ldr	r0, [pc, #8]	; (8006270 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8006266:	4621      	mov	r1, r4
 8006268:	f7ff ffa8 	bl	80061bc <_ZSt24__throw_out_of_range_fmtPKcz>
 800626c:	4608      	mov	r0, r1
 800626e:	bd10      	pop	{r4, pc}
 8006270:	080075a8 	.word	0x080075a8

08006274 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8006274:	b508      	push	{r3, lr}
 8006276:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800627a:	6840      	ldr	r0, [r0, #4]
 800627c:	3901      	subs	r1, #1
 800627e:	1a09      	subs	r1, r1, r0
 8006280:	4291      	cmp	r1, r2
 8006282:	d202      	bcs.n	800628a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff ff96 	bl	80061b6 <_ZSt20__throw_length_errorPKc>
 800628a:	bd08      	pop	{r3, pc}

0800628c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800628c:	6803      	ldr	r3, [r0, #0]
 800628e:	428b      	cmp	r3, r1
 8006290:	d806      	bhi.n	80062a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8006292:	6840      	ldr	r0, [r0, #4]
 8006294:	4418      	add	r0, r3
 8006296:	4281      	cmp	r1, r0
 8006298:	bf94      	ite	ls
 800629a:	2000      	movls	r0, #0
 800629c:	2001      	movhi	r0, #1
 800629e:	4770      	bx	lr
 80062a0:	2001      	movs	r0, #1
 80062a2:	4770      	bx	lr

080062a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80062a4:	2a01      	cmp	r2, #1
 80062a6:	b510      	push	{r4, lr}
 80062a8:	d102      	bne.n	80062b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80062aa:	780a      	ldrb	r2, [r1, #0]
 80062ac:	7002      	strb	r2, [r0, #0]
 80062ae:	bd10      	pop	{r4, pc}
 80062b0:	f7ff ff9f 	bl	80061f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80062b4:	e7fb      	b.n	80062ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080062b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80062b6:	2a01      	cmp	r2, #1
 80062b8:	b430      	push	{r4, r5}
 80062ba:	d103      	bne.n	80062c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80062bc:	780b      	ldrb	r3, [r1, #0]
 80062be:	7003      	strb	r3, [r0, #0]
 80062c0:	bc30      	pop	{r4, r5}
 80062c2:	4770      	bx	lr
 80062c4:	2a00      	cmp	r2, #0
 80062c6:	d0fb      	beq.n	80062c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80062c8:	bc30      	pop	{r4, r5}
 80062ca:	f000 ba42 	b.w	8006752 <memmove>

080062ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80062ce:	b508      	push	{r3, lr}
 80062d0:	1a52      	subs	r2, r2, r1
 80062d2:	f7ff ffe7 	bl	80062a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80062d6:	bd08      	pop	{r3, pc}

080062d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80062d8:	b508      	push	{r3, lr}
 80062da:	1a52      	subs	r2, r2, r1
 80062dc:	f7ff ffe2 	bl	80062a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80062e0:	bd08      	pop	{r3, pc}

080062e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80062e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80062ea:	4616      	mov	r6, r2
 80062ec:	6842      	ldr	r2, [r0, #4]
 80062ee:	469a      	mov	sl, r3
 80062f0:	eba8 0306 	sub.w	r3, r8, r6
 80062f4:	1a57      	subs	r7, r2, r1
 80062f6:	4413      	add	r3, r2
 80062f8:	6802      	ldr	r2, [r0, #0]
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	f100 0308 	add.w	r3, r0, #8
 8006300:	429a      	cmp	r2, r3
 8006302:	460d      	mov	r5, r1
 8006304:	bf14      	ite	ne
 8006306:	6882      	ldrne	r2, [r0, #8]
 8006308:	220f      	moveq	r2, #15
 800630a:	a901      	add	r1, sp, #4
 800630c:	4604      	mov	r4, r0
 800630e:	f7ff ff81 	bl	8006214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006312:	1bbf      	subs	r7, r7, r6
 8006314:	4681      	mov	r9, r0
 8006316:	b11d      	cbz	r5, 8006320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8006318:	462a      	mov	r2, r5
 800631a:	6821      	ldr	r1, [r4, #0]
 800631c:	f7ff ffc2 	bl	80062a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006320:	f1ba 0f00 	cmp.w	sl, #0
 8006324:	d008      	beq.n	8006338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8006326:	f1b8 0f00 	cmp.w	r8, #0
 800632a:	d005      	beq.n	8006338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800632c:	4642      	mov	r2, r8
 800632e:	4651      	mov	r1, sl
 8006330:	eb09 0005 	add.w	r0, r9, r5
 8006334:	f7ff ffb6 	bl	80062a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006338:	b147      	cbz	r7, 800634c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800633a:	6821      	ldr	r1, [r4, #0]
 800633c:	442e      	add	r6, r5
 800633e:	eb05 0008 	add.w	r0, r5, r8
 8006342:	463a      	mov	r2, r7
 8006344:	4431      	add	r1, r6
 8006346:	4448      	add	r0, r9
 8006348:	f7ff ffac 	bl	80062a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff ff7b 	bl	8006248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	f8c4 9000 	str.w	r9, [r4]
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	b002      	add	sp, #8
 800635c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006360 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4604      	mov	r4, r0
 8006364:	460e      	mov	r6, r1
 8006366:	3008      	adds	r0, #8
 8006368:	6020      	str	r0, [r4, #0]
 800636a:	f856 3b08 	ldr.w	r3, [r6], #8
 800636e:	429e      	cmp	r6, r3
 8006370:	460d      	mov	r5, r1
 8006372:	d10b      	bne.n	800638c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8006374:	2210      	movs	r2, #16
 8006376:	4631      	mov	r1, r6
 8006378:	f7ff ff3b 	bl	80061f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800637c:	686b      	ldr	r3, [r5, #4]
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	2300      	movs	r3, #0
 8006382:	602e      	str	r6, [r5, #0]
 8006384:	606b      	str	r3, [r5, #4]
 8006386:	722b      	strb	r3, [r5, #8]
 8006388:	4620      	mov	r0, r4
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	688b      	ldr	r3, [r1, #8]
 8006390:	60a3      	str	r3, [r4, #8]
 8006392:	e7f3      	b.n	800637c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006394:	b510      	push	{r4, lr}
 8006396:	4604      	mov	r4, r0
 8006398:	f7ff ff56 	bl	8006248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800639c:	4620      	mov	r0, r4
 800639e:	bd10      	pop	{r4, pc}

080063a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80063a0:	6840      	ldr	r0, [r0, #4]
 80063a2:	4770      	bx	lr

080063a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80063a4:	6800      	ldr	r0, [r0, #0]
 80063a6:	4408      	add	r0, r1
 80063a8:	4770      	bx	lr
	...

080063ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80063ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063b2:	4614      	mov	r4, r2
 80063b4:	4681      	mov	r9, r0
 80063b6:	462a      	mov	r2, r5
 80063b8:	460f      	mov	r7, r1
 80063ba:	4698      	mov	r8, r3
 80063bc:	4621      	mov	r1, r4
 80063be:	4b37      	ldr	r3, [pc, #220]	; (800649c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80063c0:	f7ff ff58 	bl	8006274 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80063c4:	464a      	mov	r2, r9
 80063c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80063ca:	f852 6b08 	ldr.w	r6, [r2], #8
 80063ce:	4296      	cmp	r6, r2
 80063d0:	eba5 0b04 	sub.w	fp, r5, r4
 80063d4:	bf18      	it	ne
 80063d6:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 80063da:	eb03 0a0b 	add.w	sl, r3, fp
 80063de:	bf08      	it	eq
 80063e0:	220f      	moveq	r2, #15
 80063e2:	4552      	cmp	r2, sl
 80063e4:	d34e      	bcc.n	8006484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80063e6:	443e      	add	r6, r7
 80063e8:	4641      	mov	r1, r8
 80063ea:	1bdf      	subs	r7, r3, r7
 80063ec:	4648      	mov	r0, r9
 80063ee:	1b3f      	subs	r7, r7, r4
 80063f0:	f7ff ff4c 	bl	800628c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80063f4:	b170      	cbz	r0, 8006414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80063f6:	b137      	cbz	r7, 8006406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80063f8:	42ac      	cmp	r4, r5
 80063fa:	d004      	beq.n	8006406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80063fc:	463a      	mov	r2, r7
 80063fe:	1931      	adds	r1, r6, r4
 8006400:	1970      	adds	r0, r6, r5
 8006402:	f7ff ff58 	bl	80062b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006406:	b30d      	cbz	r5, 800644c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8006408:	462a      	mov	r2, r5
 800640a:	4641      	mov	r1, r8
 800640c:	4630      	mov	r0, r6
 800640e:	f7ff ff49 	bl	80062a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006412:	e01b      	b.n	800644c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8006414:	b135      	cbz	r5, 8006424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 8006416:	42ac      	cmp	r4, r5
 8006418:	d33c      	bcc.n	8006494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800641a:	462a      	mov	r2, r5
 800641c:	4641      	mov	r1, r8
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ff49 	bl	80062b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006424:	b197      	cbz	r7, 800644c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8006426:	42ac      	cmp	r4, r5
 8006428:	d010      	beq.n	800644c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800642a:	463a      	mov	r2, r7
 800642c:	1931      	adds	r1, r6, r4
 800642e:	1970      	adds	r0, r6, r5
 8006430:	f7ff ff41 	bl	80062b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006434:	42ac      	cmp	r4, r5
 8006436:	d209      	bcs.n	800644c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8006438:	4434      	add	r4, r6
 800643a:	eb08 0305 	add.w	r3, r8, r5
 800643e:	429c      	cmp	r4, r3
 8006440:	d30f      	bcc.n	8006462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8006442:	462a      	mov	r2, r5
 8006444:	4641      	mov	r1, r8
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ff35 	bl	80062b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800644c:	f8d9 3000 	ldr.w	r3, [r9]
 8006450:	f8c9 a004 	str.w	sl, [r9, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	4648      	mov	r0, r9
 8006458:	f803 200a 	strb.w	r2, [r3, sl]
 800645c:	b003      	add	sp, #12
 800645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	4544      	cmp	r4, r8
 8006464:	d803      	bhi.n	800646e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 8006466:	462a      	mov	r2, r5
 8006468:	eb08 010b 	add.w	r1, r8, fp
 800646c:	e7ce      	b.n	800640c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800646e:	eba4 0408 	sub.w	r4, r4, r8
 8006472:	4622      	mov	r2, r4
 8006474:	4641      	mov	r1, r8
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff ff1d 	bl	80062b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800647c:	1b2a      	subs	r2, r5, r4
 800647e:	1971      	adds	r1, r6, r5
 8006480:	1930      	adds	r0, r6, r4
 8006482:	e7c4      	b.n	800640e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8006484:	9500      	str	r5, [sp, #0]
 8006486:	4643      	mov	r3, r8
 8006488:	4622      	mov	r2, r4
 800648a:	4639      	mov	r1, r7
 800648c:	4648      	mov	r0, r9
 800648e:	f7ff ff28 	bl	80062e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8006492:	e7db      	b.n	800644c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8006494:	2f00      	cmp	r7, #0
 8006496:	d0cf      	beq.n	8006438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8006498:	e7c7      	b.n	800642a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800649a:	bf00      	nop
 800649c:	080075df 	.word	0x080075df

080064a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80064a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	4615      	mov	r5, r2
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80064a8:	460f      	mov	r7, r1
 80064aa:	461e      	mov	r6, r3
 80064ac:	f7ff fed4 	bl	8006258 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80064b0:	6862      	ldr	r2, [r4, #4]
 80064b2:	9b08      	ldr	r3, [sp, #32]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	1bd2      	subs	r2, r2, r7
 80064b8:	42aa      	cmp	r2, r5
 80064ba:	4601      	mov	r1, r0
 80064bc:	4633      	mov	r3, r6
 80064be:	bf28      	it	cs
 80064c0:	462a      	movcs	r2, r5
 80064c2:	4620      	mov	r0, r4
 80064c4:	f7ff ff72 	bl	80063ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80064c8:	b003      	add	sp, #12
 80064ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064cc:	08007622 	.word	0x08007622

080064d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80064d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064d2:	4605      	mov	r5, r0
 80064d4:	4610      	mov	r0, r2
 80064d6:	4614      	mov	r4, r2
 80064d8:	460e      	mov	r6, r1
 80064da:	f7f9 fee9 	bl	80002b0 <strlen>
 80064de:	4623      	mov	r3, r4
 80064e0:	9000      	str	r0, [sp, #0]
 80064e2:	2200      	movs	r2, #0
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	f7ff ffda 	bl	80064a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80064ec:	b002      	add	sp, #8
 80064ee:	bd70      	pop	{r4, r5, r6, pc}

080064f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80064f0:	6001      	str	r1, [r0, #0]
 80064f2:	4770      	bx	lr

080064f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80064f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064f6:	4604      	mov	r4, r0
 80064f8:	4616      	mov	r6, r2
 80064fa:	460d      	mov	r5, r1
 80064fc:	b919      	cbnz	r1, 8006506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80064fe:	b112      	cbz	r2, 8006506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006500:	480d      	ldr	r0, [pc, #52]	; (8006538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8006502:	f7ff fe55 	bl	80061b0 <_ZSt19__throw_logic_errorPKc>
 8006506:	1b73      	subs	r3, r6, r5
 8006508:	2b0f      	cmp	r3, #15
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	d907      	bls.n	800651e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800650e:	2200      	movs	r2, #0
 8006510:	a901      	add	r1, sp, #4
 8006512:	4620      	mov	r0, r4
 8006514:	f7ff fe7e 	bl	8006214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006518:	9b01      	ldr	r3, [sp, #4]
 800651a:	6020      	str	r0, [r4, #0]
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	4632      	mov	r2, r6
 8006520:	4629      	mov	r1, r5
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	f7ff fed8 	bl	80062d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006528:	9b01      	ldr	r3, [sp, #4]
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	6063      	str	r3, [r4, #4]
 800652e:	2100      	movs	r1, #0
 8006530:	54d1      	strb	r1, [r2, r3]
 8006532:	b002      	add	sp, #8
 8006534:	bd70      	pop	{r4, r5, r6, pc}
 8006536:	bf00      	nop
 8006538:	080075f8 	.word	0x080075f8

0800653c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	f100 0308 	add.w	r3, r0, #8
 8006542:	4604      	mov	r4, r0
 8006544:	6003      	str	r3, [r0, #0]
 8006546:	460d      	mov	r5, r1
 8006548:	b159      	cbz	r1, 8006562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800654a:	4608      	mov	r0, r1
 800654c:	f7f9 feb0 	bl	80002b0 <strlen>
 8006550:	182a      	adds	r2, r5, r0
 8006552:	4620      	mov	r0, r4
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	4629      	mov	r1, r5
 800655a:	f7ff ffcb 	bl	80064f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800655e:	4620      	mov	r0, r4
 8006560:	bd38      	pop	{r3, r4, r5, pc}
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	e7f4      	b.n	8006552 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08006568 <_Znwj>:
 8006568:	b510      	push	{r4, lr}
 800656a:	2800      	cmp	r0, #0
 800656c:	bf14      	ite	ne
 800656e:	4604      	movne	r4, r0
 8006570:	2401      	moveq	r4, #1
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f8d2 	bl	800671c <malloc>
 8006578:	b930      	cbnz	r0, 8006588 <_Znwj+0x20>
 800657a:	f000 f807 	bl	800658c <_ZSt15get_new_handlerv>
 800657e:	b908      	cbnz	r0, 8006584 <_Znwj+0x1c>
 8006580:	f000 f89a 	bl	80066b8 <abort>
 8006584:	4780      	blx	r0
 8006586:	e7f4      	b.n	8006572 <_Znwj+0xa>
 8006588:	bd10      	pop	{r4, pc}
	...

0800658c <_ZSt15get_new_handlerv>:
 800658c:	4b02      	ldr	r3, [pc, #8]	; (8006598 <_ZSt15get_new_handlerv+0xc>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	f3bf 8f5b 	dmb	ish
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20002aa0 	.word	0x20002aa0

0800659c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800659c:	b580      	push	{r7, lr}
 800659e:	b09c      	sub	sp, #112	; 0x70
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	1a0e      	subs	r6, r1, r0
 80065a4:	4680      	mov	r8, r0
 80065a6:	2269      	movs	r2, #105	; 0x69
 80065a8:	490e      	ldr	r1, [pc, #56]	; (80065e4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80065aa:	1d38      	adds	r0, r7, #4
 80065ac:	f000 f8c6 	bl	800673c <memcpy>
 80065b0:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	ebad 0d03 	sub.w	sp, sp, r3
 80065bc:	466c      	mov	r4, sp
 80065be:	2268      	movs	r2, #104	; 0x68
 80065c0:	1d39      	adds	r1, r7, #4
 80065c2:	1c75      	adds	r5, r6, #1
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 f8b9 	bl	800673c <memcpy>
 80065ca:	4425      	add	r5, r4
 80065cc:	4632      	mov	r2, r6
 80065ce:	4641      	mov	r1, r8
 80065d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065d4:	f000 f8b2 	bl	800673c <memcpy>
 80065d8:	2300      	movs	r3, #0
 80065da:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff fde6 	bl	80061b0 <_ZSt19__throw_logic_errorPKc>
 80065e4:	0800765b 	.word	0x0800765b

080065e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	b086      	sub	sp, #24
 80065ee:	466d      	mov	r5, sp
 80065f0:	f105 040c 	add.w	r4, r5, #12
 80065f4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006634 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80065f8:	4623      	mov	r3, r4
 80065fa:	f04f 0c0a 	mov.w	ip, #10
 80065fe:	fbb2 f6fc 	udiv	r6, r2, ip
 8006602:	fb0c 2216 	mls	r2, ip, r6, r2
 8006606:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800660a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800660e:	4632      	mov	r2, r6
 8006610:	2e00      	cmp	r6, #0
 8006612:	d1f4      	bne.n	80065fe <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8006614:	1ae4      	subs	r4, r4, r3
 8006616:	428c      	cmp	r4, r1
 8006618:	d808      	bhi.n	800662c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800661a:	f1c4 010c 	rsb	r1, r4, #12
 800661e:	4622      	mov	r2, r4
 8006620:	4429      	add	r1, r5
 8006622:	f000 f88b 	bl	800673c <memcpy>
 8006626:	4620      	mov	r0, r4
 8006628:	46bd      	mov	sp, r7
 800662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800662c:	f04f 34ff 	mov.w	r4, #4294967295
 8006630:	e7f9      	b.n	8006626 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8006632:	bf00      	nop
 8006634:	08007650 	.word	0x08007650

08006638 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8006638:	3901      	subs	r1, #1
 800663a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663e:	4606      	mov	r6, r0
 8006640:	4615      	mov	r5, r2
 8006642:	1847      	adds	r7, r0, r1
 8006644:	4604      	mov	r4, r0
 8006646:	782a      	ldrb	r2, [r5, #0]
 8006648:	b392      	cbz	r2, 80066b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 800664a:	42bc      	cmp	r4, r7
 800664c:	d22c      	bcs.n	80066a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800664e:	2a25      	cmp	r2, #37	; 0x25
 8006650:	d107      	bne.n	8006662 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006652:	786a      	ldrb	r2, [r5, #1]
 8006654:	2a73      	cmp	r2, #115	; 0x73
 8006656:	d009      	beq.n	800666c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8006658:	2a7a      	cmp	r2, #122	; 0x7a
 800665a:	d012      	beq.n	8006682 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 800665c:	2a25      	cmp	r2, #37	; 0x25
 800665e:	d100      	bne.n	8006662 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006660:	3501      	adds	r5, #1
 8006662:	782a      	ldrb	r2, [r5, #0]
 8006664:	7022      	strb	r2, [r4, #0]
 8006666:	3501      	adds	r5, #1
 8006668:	3401      	adds	r4, #1
 800666a:	e7ec      	b.n	8006646 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800666c:	1d19      	adds	r1, r3, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3b01      	subs	r3, #1
 8006672:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006676:	b1a2      	cbz	r2, 80066a2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8006678:	42bc      	cmp	r4, r7
 800667a:	d015      	beq.n	80066a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800667c:	f804 2b01 	strb.w	r2, [r4], #1
 8006680:	e7f7      	b.n	8006672 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8006682:	78aa      	ldrb	r2, [r5, #2]
 8006684:	2a75      	cmp	r2, #117	; 0x75
 8006686:	d1ec      	bne.n	8006662 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	1b39      	subs	r1, r7, r4
 800668c:	4620      	mov	r0, r4
 800668e:	f103 0804 	add.w	r8, r3, #4
 8006692:	f7ff ffa9 	bl	80065e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8006696:	2800      	cmp	r0, #0
 8006698:	dd06      	ble.n	80066a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800669a:	4404      	add	r4, r0
 800669c:	3503      	adds	r5, #3
 800669e:	4643      	mov	r3, r8
 80066a0:	e7d1      	b.n	8006646 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80066a2:	3502      	adds	r5, #2
 80066a4:	460b      	mov	r3, r1
 80066a6:	e7ce      	b.n	8006646 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4630      	mov	r0, r6
 80066ac:	f7ff ff76 	bl	800659c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80066b0:	7022      	strb	r2, [r4, #0]
 80066b2:	1ba0      	subs	r0, r4, r6
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066b8 <abort>:
 80066b8:	b508      	push	{r3, lr}
 80066ba:	2006      	movs	r0, #6
 80066bc:	f000 f94a 	bl	8006954 <raise>
 80066c0:	2001      	movs	r0, #1
 80066c2:	f7fb fc85 	bl	8001fd0 <_exit>
	...

080066c8 <__errno>:
 80066c8:	4b01      	ldr	r3, [pc, #4]	; (80066d0 <__errno+0x8>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000010 	.word	0x20000010

080066d4 <__libc_init_array>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4e0d      	ldr	r6, [pc, #52]	; (800670c <__libc_init_array+0x38>)
 80066d8:	4c0d      	ldr	r4, [pc, #52]	; (8006710 <__libc_init_array+0x3c>)
 80066da:	1ba4      	subs	r4, r4, r6
 80066dc:	10a4      	asrs	r4, r4, #2
 80066de:	2500      	movs	r5, #0
 80066e0:	42a5      	cmp	r5, r4
 80066e2:	d109      	bne.n	80066f8 <__libc_init_array+0x24>
 80066e4:	4e0b      	ldr	r6, [pc, #44]	; (8006714 <__libc_init_array+0x40>)
 80066e6:	4c0c      	ldr	r4, [pc, #48]	; (8006718 <__libc_init_array+0x44>)
 80066e8:	f000 fc94 	bl	8007014 <_init>
 80066ec:	1ba4      	subs	r4, r4, r6
 80066ee:	10a4      	asrs	r4, r4, #2
 80066f0:	2500      	movs	r5, #0
 80066f2:	42a5      	cmp	r5, r4
 80066f4:	d105      	bne.n	8006702 <__libc_init_array+0x2e>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066fc:	4798      	blx	r3
 80066fe:	3501      	adds	r5, #1
 8006700:	e7ee      	b.n	80066e0 <__libc_init_array+0xc>
 8006702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006706:	4798      	blx	r3
 8006708:	3501      	adds	r5, #1
 800670a:	e7f2      	b.n	80066f2 <__libc_init_array+0x1e>
 800670c:	08007700 	.word	0x08007700
 8006710:	08007700 	.word	0x08007700
 8006714:	08007700 	.word	0x08007700
 8006718:	08007708 	.word	0x08007708

0800671c <malloc>:
 800671c:	4b02      	ldr	r3, [pc, #8]	; (8006728 <malloc+0xc>)
 800671e:	4601      	mov	r1, r0
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f000 b885 	b.w	8006830 <_malloc_r>
 8006726:	bf00      	nop
 8006728:	20000010 	.word	0x20000010

0800672c <free>:
 800672c:	4b02      	ldr	r3, [pc, #8]	; (8006738 <free+0xc>)
 800672e:	4601      	mov	r1, r0
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	f000 b82f 	b.w	8006794 <_free_r>
 8006736:	bf00      	nop
 8006738:	20000010 	.word	0x20000010

0800673c <memcpy>:
 800673c:	b510      	push	{r4, lr}
 800673e:	1e43      	subs	r3, r0, #1
 8006740:	440a      	add	r2, r1
 8006742:	4291      	cmp	r1, r2
 8006744:	d100      	bne.n	8006748 <memcpy+0xc>
 8006746:	bd10      	pop	{r4, pc}
 8006748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800674c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006750:	e7f7      	b.n	8006742 <memcpy+0x6>

08006752 <memmove>:
 8006752:	4288      	cmp	r0, r1
 8006754:	b510      	push	{r4, lr}
 8006756:	eb01 0302 	add.w	r3, r1, r2
 800675a:	d807      	bhi.n	800676c <memmove+0x1a>
 800675c:	1e42      	subs	r2, r0, #1
 800675e:	4299      	cmp	r1, r3
 8006760:	d00a      	beq.n	8006778 <memmove+0x26>
 8006762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006766:	f802 4f01 	strb.w	r4, [r2, #1]!
 800676a:	e7f8      	b.n	800675e <memmove+0xc>
 800676c:	4283      	cmp	r3, r0
 800676e:	d9f5      	bls.n	800675c <memmove+0xa>
 8006770:	1881      	adds	r1, r0, r2
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	42d3      	cmn	r3, r2
 8006776:	d100      	bne.n	800677a <memmove+0x28>
 8006778:	bd10      	pop	{r4, pc}
 800677a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800677e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006782:	e7f7      	b.n	8006774 <memmove+0x22>

08006784 <memset>:
 8006784:	4402      	add	r2, r0
 8006786:	4603      	mov	r3, r0
 8006788:	4293      	cmp	r3, r2
 800678a:	d100      	bne.n	800678e <memset+0xa>
 800678c:	4770      	bx	lr
 800678e:	f803 1b01 	strb.w	r1, [r3], #1
 8006792:	e7f9      	b.n	8006788 <memset+0x4>

08006794 <_free_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4605      	mov	r5, r0
 8006798:	2900      	cmp	r1, #0
 800679a:	d045      	beq.n	8006828 <_free_r+0x94>
 800679c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a0:	1f0c      	subs	r4, r1, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bfb8      	it	lt
 80067a6:	18e4      	addlt	r4, r4, r3
 80067a8:	f000 f92a 	bl	8006a00 <__malloc_lock>
 80067ac:	4a1f      	ldr	r2, [pc, #124]	; (800682c <_free_r+0x98>)
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	4610      	mov	r0, r2
 80067b2:	b933      	cbnz	r3, 80067c2 <_free_r+0x2e>
 80067b4:	6063      	str	r3, [r4, #4]
 80067b6:	6014      	str	r4, [r2, #0]
 80067b8:	4628      	mov	r0, r5
 80067ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067be:	f000 b920 	b.w	8006a02 <__malloc_unlock>
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	d90c      	bls.n	80067e0 <_free_r+0x4c>
 80067c6:	6821      	ldr	r1, [r4, #0]
 80067c8:	1862      	adds	r2, r4, r1
 80067ca:	4293      	cmp	r3, r2
 80067cc:	bf04      	itt	eq
 80067ce:	681a      	ldreq	r2, [r3, #0]
 80067d0:	685b      	ldreq	r3, [r3, #4]
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	bf04      	itt	eq
 80067d6:	1852      	addeq	r2, r2, r1
 80067d8:	6022      	streq	r2, [r4, #0]
 80067da:	6004      	str	r4, [r0, #0]
 80067dc:	e7ec      	b.n	80067b8 <_free_r+0x24>
 80067de:	4613      	mov	r3, r2
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	b10a      	cbz	r2, 80067e8 <_free_r+0x54>
 80067e4:	42a2      	cmp	r2, r4
 80067e6:	d9fa      	bls.n	80067de <_free_r+0x4a>
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	1858      	adds	r0, r3, r1
 80067ec:	42a0      	cmp	r0, r4
 80067ee:	d10b      	bne.n	8006808 <_free_r+0x74>
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	4401      	add	r1, r0
 80067f4:	1858      	adds	r0, r3, r1
 80067f6:	4282      	cmp	r2, r0
 80067f8:	6019      	str	r1, [r3, #0]
 80067fa:	d1dd      	bne.n	80067b8 <_free_r+0x24>
 80067fc:	6810      	ldr	r0, [r2, #0]
 80067fe:	6852      	ldr	r2, [r2, #4]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	4401      	add	r1, r0
 8006804:	6019      	str	r1, [r3, #0]
 8006806:	e7d7      	b.n	80067b8 <_free_r+0x24>
 8006808:	d902      	bls.n	8006810 <_free_r+0x7c>
 800680a:	230c      	movs	r3, #12
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	e7d3      	b.n	80067b8 <_free_r+0x24>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428a      	cmp	r2, r1
 8006816:	bf04      	itt	eq
 8006818:	6811      	ldreq	r1, [r2, #0]
 800681a:	6852      	ldreq	r2, [r2, #4]
 800681c:	6062      	str	r2, [r4, #4]
 800681e:	bf04      	itt	eq
 8006820:	1809      	addeq	r1, r1, r0
 8006822:	6021      	streq	r1, [r4, #0]
 8006824:	605c      	str	r4, [r3, #4]
 8006826:	e7c7      	b.n	80067b8 <_free_r+0x24>
 8006828:	bd38      	pop	{r3, r4, r5, pc}
 800682a:	bf00      	nop
 800682c:	20002aa4 	.word	0x20002aa4

08006830 <_malloc_r>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	1ccd      	adds	r5, r1, #3
 8006834:	f025 0503 	bic.w	r5, r5, #3
 8006838:	3508      	adds	r5, #8
 800683a:	2d0c      	cmp	r5, #12
 800683c:	bf38      	it	cc
 800683e:	250c      	movcc	r5, #12
 8006840:	2d00      	cmp	r5, #0
 8006842:	4606      	mov	r6, r0
 8006844:	db01      	blt.n	800684a <_malloc_r+0x1a>
 8006846:	42a9      	cmp	r1, r5
 8006848:	d903      	bls.n	8006852 <_malloc_r+0x22>
 800684a:	230c      	movs	r3, #12
 800684c:	6033      	str	r3, [r6, #0]
 800684e:	2000      	movs	r0, #0
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	f000 f8d5 	bl	8006a00 <__malloc_lock>
 8006856:	4a21      	ldr	r2, [pc, #132]	; (80068dc <_malloc_r+0xac>)
 8006858:	6814      	ldr	r4, [r2, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	b991      	cbnz	r1, 8006884 <_malloc_r+0x54>
 800685e:	4c20      	ldr	r4, [pc, #128]	; (80068e0 <_malloc_r+0xb0>)
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	b91b      	cbnz	r3, 800686c <_malloc_r+0x3c>
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f83d 	bl	80068e4 <_sbrk_r>
 800686a:	6020      	str	r0, [r4, #0]
 800686c:	4629      	mov	r1, r5
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f838 	bl	80068e4 <_sbrk_r>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d124      	bne.n	80068c2 <_malloc_r+0x92>
 8006878:	230c      	movs	r3, #12
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	4630      	mov	r0, r6
 800687e:	f000 f8c0 	bl	8006a02 <__malloc_unlock>
 8006882:	e7e4      	b.n	800684e <_malloc_r+0x1e>
 8006884:	680b      	ldr	r3, [r1, #0]
 8006886:	1b5b      	subs	r3, r3, r5
 8006888:	d418      	bmi.n	80068bc <_malloc_r+0x8c>
 800688a:	2b0b      	cmp	r3, #11
 800688c:	d90f      	bls.n	80068ae <_malloc_r+0x7e>
 800688e:	600b      	str	r3, [r1, #0]
 8006890:	50cd      	str	r5, [r1, r3]
 8006892:	18cc      	adds	r4, r1, r3
 8006894:	4630      	mov	r0, r6
 8006896:	f000 f8b4 	bl	8006a02 <__malloc_unlock>
 800689a:	f104 000b 	add.w	r0, r4, #11
 800689e:	1d23      	adds	r3, r4, #4
 80068a0:	f020 0007 	bic.w	r0, r0, #7
 80068a4:	1ac3      	subs	r3, r0, r3
 80068a6:	d0d3      	beq.n	8006850 <_malloc_r+0x20>
 80068a8:	425a      	negs	r2, r3
 80068aa:	50e2      	str	r2, [r4, r3]
 80068ac:	e7d0      	b.n	8006850 <_malloc_r+0x20>
 80068ae:	428c      	cmp	r4, r1
 80068b0:	684b      	ldr	r3, [r1, #4]
 80068b2:	bf16      	itet	ne
 80068b4:	6063      	strne	r3, [r4, #4]
 80068b6:	6013      	streq	r3, [r2, #0]
 80068b8:	460c      	movne	r4, r1
 80068ba:	e7eb      	b.n	8006894 <_malloc_r+0x64>
 80068bc:	460c      	mov	r4, r1
 80068be:	6849      	ldr	r1, [r1, #4]
 80068c0:	e7cc      	b.n	800685c <_malloc_r+0x2c>
 80068c2:	1cc4      	adds	r4, r0, #3
 80068c4:	f024 0403 	bic.w	r4, r4, #3
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d005      	beq.n	80068d8 <_malloc_r+0xa8>
 80068cc:	1a21      	subs	r1, r4, r0
 80068ce:	4630      	mov	r0, r6
 80068d0:	f000 f808 	bl	80068e4 <_sbrk_r>
 80068d4:	3001      	adds	r0, #1
 80068d6:	d0cf      	beq.n	8006878 <_malloc_r+0x48>
 80068d8:	6025      	str	r5, [r4, #0]
 80068da:	e7db      	b.n	8006894 <_malloc_r+0x64>
 80068dc:	20002aa4 	.word	0x20002aa4
 80068e0:	20002aa8 	.word	0x20002aa8

080068e4 <_sbrk_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4c06      	ldr	r4, [pc, #24]	; (8006900 <_sbrk_r+0x1c>)
 80068e8:	2300      	movs	r3, #0
 80068ea:	4605      	mov	r5, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	f7fb fb78 	bl	8001fe4 <_sbrk>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_sbrk_r+0x1a>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_sbrk_r+0x1a>
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	20002ab0 	.word	0x20002ab0

08006904 <_raise_r>:
 8006904:	291f      	cmp	r1, #31
 8006906:	b538      	push	{r3, r4, r5, lr}
 8006908:	4604      	mov	r4, r0
 800690a:	460d      	mov	r5, r1
 800690c:	d904      	bls.n	8006918 <_raise_r+0x14>
 800690e:	2316      	movs	r3, #22
 8006910:	6003      	str	r3, [r0, #0]
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800691a:	b112      	cbz	r2, 8006922 <_raise_r+0x1e>
 800691c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006920:	b94b      	cbnz	r3, 8006936 <_raise_r+0x32>
 8006922:	4620      	mov	r0, r4
 8006924:	f000 f830 	bl	8006988 <_getpid_r>
 8006928:	462a      	mov	r2, r5
 800692a:	4601      	mov	r1, r0
 800692c:	4620      	mov	r0, r4
 800692e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006932:	f000 b817 	b.w	8006964 <_kill_r>
 8006936:	2b01      	cmp	r3, #1
 8006938:	d00a      	beq.n	8006950 <_raise_r+0x4c>
 800693a:	1c59      	adds	r1, r3, #1
 800693c:	d103      	bne.n	8006946 <_raise_r+0x42>
 800693e:	2316      	movs	r3, #22
 8006940:	6003      	str	r3, [r0, #0]
 8006942:	2001      	movs	r0, #1
 8006944:	e7e7      	b.n	8006916 <_raise_r+0x12>
 8006946:	2400      	movs	r4, #0
 8006948:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800694c:	4628      	mov	r0, r5
 800694e:	4798      	blx	r3
 8006950:	2000      	movs	r0, #0
 8006952:	e7e0      	b.n	8006916 <_raise_r+0x12>

08006954 <raise>:
 8006954:	4b02      	ldr	r3, [pc, #8]	; (8006960 <raise+0xc>)
 8006956:	4601      	mov	r1, r0
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	f7ff bfd3 	b.w	8006904 <_raise_r>
 800695e:	bf00      	nop
 8006960:	20000010 	.word	0x20000010

08006964 <_kill_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4c07      	ldr	r4, [pc, #28]	; (8006984 <_kill_r+0x20>)
 8006968:	2300      	movs	r3, #0
 800696a:	4605      	mov	r5, r0
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	f7fb fb1d 	bl	8001fb0 <_kill>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d102      	bne.n	8006980 <_kill_r+0x1c>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	b103      	cbz	r3, 8006980 <_kill_r+0x1c>
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	bf00      	nop
 8006984:	20002ab0 	.word	0x20002ab0

08006988 <_getpid_r>:
 8006988:	f7fb bb0a 	b.w	8001fa0 <_getpid>

0800698c <_vsniprintf_r>:
 800698c:	b530      	push	{r4, r5, lr}
 800698e:	1e14      	subs	r4, r2, #0
 8006990:	4605      	mov	r5, r0
 8006992:	b09b      	sub	sp, #108	; 0x6c
 8006994:	4618      	mov	r0, r3
 8006996:	da05      	bge.n	80069a4 <_vsniprintf_r+0x18>
 8006998:	238b      	movs	r3, #139	; 0x8b
 800699a:	602b      	str	r3, [r5, #0]
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	b01b      	add	sp, #108	; 0x6c
 80069a2:	bd30      	pop	{r4, r5, pc}
 80069a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80069ac:	bf14      	ite	ne
 80069ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069b2:	4623      	moveq	r3, r4
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	9305      	str	r3, [sp, #20]
 80069b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069bc:	9100      	str	r1, [sp, #0]
 80069be:	9104      	str	r1, [sp, #16]
 80069c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80069c4:	4602      	mov	r2, r0
 80069c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069c8:	4669      	mov	r1, sp
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 f874 	bl	8006ab8 <_svfiprintf_r>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	bfbc      	itt	lt
 80069d4:	238b      	movlt	r3, #139	; 0x8b
 80069d6:	602b      	strlt	r3, [r5, #0]
 80069d8:	2c00      	cmp	r4, #0
 80069da:	d0e1      	beq.n	80069a0 <_vsniprintf_r+0x14>
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e7dd      	b.n	80069a0 <_vsniprintf_r+0x14>

080069e4 <vsniprintf>:
 80069e4:	b507      	push	{r0, r1, r2, lr}
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	460a      	mov	r2, r1
 80069ec:	4601      	mov	r1, r0
 80069ee:	4803      	ldr	r0, [pc, #12]	; (80069fc <vsniprintf+0x18>)
 80069f0:	6800      	ldr	r0, [r0, #0]
 80069f2:	f7ff ffcb 	bl	800698c <_vsniprintf_r>
 80069f6:	b003      	add	sp, #12
 80069f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80069fc:	20000010 	.word	0x20000010

08006a00 <__malloc_lock>:
 8006a00:	4770      	bx	lr

08006a02 <__malloc_unlock>:
 8006a02:	4770      	bx	lr

08006a04 <__ssputs_r>:
 8006a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	688e      	ldr	r6, [r1, #8]
 8006a0a:	429e      	cmp	r6, r3
 8006a0c:	4682      	mov	sl, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	4690      	mov	r8, r2
 8006a12:	4699      	mov	r9, r3
 8006a14:	d837      	bhi.n	8006a86 <__ssputs_r+0x82>
 8006a16:	898a      	ldrh	r2, [r1, #12]
 8006a18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a1c:	d031      	beq.n	8006a82 <__ssputs_r+0x7e>
 8006a1e:	6825      	ldr	r5, [r4, #0]
 8006a20:	6909      	ldr	r1, [r1, #16]
 8006a22:	1a6f      	subs	r7, r5, r1
 8006a24:	6965      	ldr	r5, [r4, #20]
 8006a26:	2302      	movs	r3, #2
 8006a28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a30:	f109 0301 	add.w	r3, r9, #1
 8006a34:	443b      	add	r3, r7
 8006a36:	429d      	cmp	r5, r3
 8006a38:	bf38      	it	cc
 8006a3a:	461d      	movcc	r5, r3
 8006a3c:	0553      	lsls	r3, r2, #21
 8006a3e:	d530      	bpl.n	8006aa2 <__ssputs_r+0x9e>
 8006a40:	4629      	mov	r1, r5
 8006a42:	f7ff fef5 	bl	8006830 <_malloc_r>
 8006a46:	4606      	mov	r6, r0
 8006a48:	b950      	cbnz	r0, 8006a60 <__ssputs_r+0x5c>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	f8ca 3000 	str.w	r3, [sl]
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a60:	463a      	mov	r2, r7
 8006a62:	6921      	ldr	r1, [r4, #16]
 8006a64:	f7ff fe6a 	bl	800673c <memcpy>
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	6126      	str	r6, [r4, #16]
 8006a76:	6165      	str	r5, [r4, #20]
 8006a78:	443e      	add	r6, r7
 8006a7a:	1bed      	subs	r5, r5, r7
 8006a7c:	6026      	str	r6, [r4, #0]
 8006a7e:	60a5      	str	r5, [r4, #8]
 8006a80:	464e      	mov	r6, r9
 8006a82:	454e      	cmp	r6, r9
 8006a84:	d900      	bls.n	8006a88 <__ssputs_r+0x84>
 8006a86:	464e      	mov	r6, r9
 8006a88:	4632      	mov	r2, r6
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	f7ff fe60 	bl	8006752 <memmove>
 8006a92:	68a3      	ldr	r3, [r4, #8]
 8006a94:	1b9b      	subs	r3, r3, r6
 8006a96:	60a3      	str	r3, [r4, #8]
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	441e      	add	r6, r3
 8006a9c:	6026      	str	r6, [r4, #0]
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e7dc      	b.n	8006a5c <__ssputs_r+0x58>
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	f000 fa88 	bl	8006fb8 <_realloc_r>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d1e2      	bne.n	8006a74 <__ssputs_r+0x70>
 8006aae:	6921      	ldr	r1, [r4, #16]
 8006ab0:	4650      	mov	r0, sl
 8006ab2:	f7ff fe6f 	bl	8006794 <_free_r>
 8006ab6:	e7c8      	b.n	8006a4a <__ssputs_r+0x46>

08006ab8 <_svfiprintf_r>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	461d      	mov	r5, r3
 8006abe:	898b      	ldrh	r3, [r1, #12]
 8006ac0:	061f      	lsls	r7, r3, #24
 8006ac2:	b09d      	sub	sp, #116	; 0x74
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	4616      	mov	r6, r2
 8006aca:	d50f      	bpl.n	8006aec <_svfiprintf_r+0x34>
 8006acc:	690b      	ldr	r3, [r1, #16]
 8006ace:	b96b      	cbnz	r3, 8006aec <_svfiprintf_r+0x34>
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	f7ff fead 	bl	8006830 <_malloc_r>
 8006ad6:	6020      	str	r0, [r4, #0]
 8006ad8:	6120      	str	r0, [r4, #16]
 8006ada:	b928      	cbnz	r0, 8006ae8 <_svfiprintf_r+0x30>
 8006adc:	230c      	movs	r3, #12
 8006ade:	f8c8 3000 	str.w	r3, [r8]
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae6:	e0c8      	b.n	8006c7a <_svfiprintf_r+0x1c2>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	6163      	str	r3, [r4, #20]
 8006aec:	2300      	movs	r3, #0
 8006aee:	9309      	str	r3, [sp, #36]	; 0x24
 8006af0:	2320      	movs	r3, #32
 8006af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006af6:	2330      	movs	r3, #48	; 0x30
 8006af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006afc:	9503      	str	r5, [sp, #12]
 8006afe:	f04f 0b01 	mov.w	fp, #1
 8006b02:	4637      	mov	r7, r6
 8006b04:	463d      	mov	r5, r7
 8006b06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b0a:	b10b      	cbz	r3, 8006b10 <_svfiprintf_r+0x58>
 8006b0c:	2b25      	cmp	r3, #37	; 0x25
 8006b0e:	d13e      	bne.n	8006b8e <_svfiprintf_r+0xd6>
 8006b10:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b14:	d00b      	beq.n	8006b2e <_svfiprintf_r+0x76>
 8006b16:	4653      	mov	r3, sl
 8006b18:	4632      	mov	r2, r6
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	f7ff ff71 	bl	8006a04 <__ssputs_r>
 8006b22:	3001      	adds	r0, #1
 8006b24:	f000 80a4 	beq.w	8006c70 <_svfiprintf_r+0x1b8>
 8006b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2a:	4453      	add	r3, sl
 8006b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2e:	783b      	ldrb	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 809d 	beq.w	8006c70 <_svfiprintf_r+0x1b8>
 8006b36:	2300      	movs	r3, #0
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b40:	9304      	str	r3, [sp, #16]
 8006b42:	9307      	str	r3, [sp, #28]
 8006b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b48:	931a      	str	r3, [sp, #104]	; 0x68
 8006b4a:	462f      	mov	r7, r5
 8006b4c:	2205      	movs	r2, #5
 8006b4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b52:	4850      	ldr	r0, [pc, #320]	; (8006c94 <_svfiprintf_r+0x1dc>)
 8006b54:	f7f9 fb5c 	bl	8000210 <memchr>
 8006b58:	9b04      	ldr	r3, [sp, #16]
 8006b5a:	b9d0      	cbnz	r0, 8006b92 <_svfiprintf_r+0xda>
 8006b5c:	06d9      	lsls	r1, r3, #27
 8006b5e:	bf44      	itt	mi
 8006b60:	2220      	movmi	r2, #32
 8006b62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b66:	071a      	lsls	r2, r3, #28
 8006b68:	bf44      	itt	mi
 8006b6a:	222b      	movmi	r2, #43	; 0x2b
 8006b6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b70:	782a      	ldrb	r2, [r5, #0]
 8006b72:	2a2a      	cmp	r2, #42	; 0x2a
 8006b74:	d015      	beq.n	8006ba2 <_svfiprintf_r+0xea>
 8006b76:	9a07      	ldr	r2, [sp, #28]
 8006b78:	462f      	mov	r7, r5
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	250a      	movs	r5, #10
 8006b7e:	4639      	mov	r1, r7
 8006b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b84:	3b30      	subs	r3, #48	; 0x30
 8006b86:	2b09      	cmp	r3, #9
 8006b88:	d94d      	bls.n	8006c26 <_svfiprintf_r+0x16e>
 8006b8a:	b1b8      	cbz	r0, 8006bbc <_svfiprintf_r+0x104>
 8006b8c:	e00f      	b.n	8006bae <_svfiprintf_r+0xf6>
 8006b8e:	462f      	mov	r7, r5
 8006b90:	e7b8      	b.n	8006b04 <_svfiprintf_r+0x4c>
 8006b92:	4a40      	ldr	r2, [pc, #256]	; (8006c94 <_svfiprintf_r+0x1dc>)
 8006b94:	1a80      	subs	r0, r0, r2
 8006b96:	fa0b f000 	lsl.w	r0, fp, r0
 8006b9a:	4318      	orrs	r0, r3
 8006b9c:	9004      	str	r0, [sp, #16]
 8006b9e:	463d      	mov	r5, r7
 8006ba0:	e7d3      	b.n	8006b4a <_svfiprintf_r+0x92>
 8006ba2:	9a03      	ldr	r2, [sp, #12]
 8006ba4:	1d11      	adds	r1, r2, #4
 8006ba6:	6812      	ldr	r2, [r2, #0]
 8006ba8:	9103      	str	r1, [sp, #12]
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	db01      	blt.n	8006bb2 <_svfiprintf_r+0xfa>
 8006bae:	9207      	str	r2, [sp, #28]
 8006bb0:	e004      	b.n	8006bbc <_svfiprintf_r+0x104>
 8006bb2:	4252      	negs	r2, r2
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	9207      	str	r2, [sp, #28]
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	783b      	ldrb	r3, [r7, #0]
 8006bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc0:	d10c      	bne.n	8006bdc <_svfiprintf_r+0x124>
 8006bc2:	787b      	ldrb	r3, [r7, #1]
 8006bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc6:	d133      	bne.n	8006c30 <_svfiprintf_r+0x178>
 8006bc8:	9b03      	ldr	r3, [sp, #12]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	9203      	str	r2, [sp, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bfb8      	it	lt
 8006bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd8:	3702      	adds	r7, #2
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	4d2e      	ldr	r5, [pc, #184]	; (8006c98 <_svfiprintf_r+0x1e0>)
 8006bde:	7839      	ldrb	r1, [r7, #0]
 8006be0:	2203      	movs	r2, #3
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7f9 fb14 	bl	8000210 <memchr>
 8006be8:	b138      	cbz	r0, 8006bfa <_svfiprintf_r+0x142>
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	1b40      	subs	r0, r0, r5
 8006bee:	fa03 f000 	lsl.w	r0, r3, r0
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	4303      	orrs	r3, r0
 8006bf6:	3701      	adds	r7, #1
 8006bf8:	9304      	str	r3, [sp, #16]
 8006bfa:	7839      	ldrb	r1, [r7, #0]
 8006bfc:	4827      	ldr	r0, [pc, #156]	; (8006c9c <_svfiprintf_r+0x1e4>)
 8006bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c02:	2206      	movs	r2, #6
 8006c04:	1c7e      	adds	r6, r7, #1
 8006c06:	f7f9 fb03 	bl	8000210 <memchr>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d038      	beq.n	8006c80 <_svfiprintf_r+0x1c8>
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <_svfiprintf_r+0x1e8>)
 8006c10:	bb13      	cbnz	r3, 8006c58 <_svfiprintf_r+0x1a0>
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	3307      	adds	r3, #7
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	9303      	str	r3, [sp, #12]
 8006c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c20:	444b      	add	r3, r9
 8006c22:	9309      	str	r3, [sp, #36]	; 0x24
 8006c24:	e76d      	b.n	8006b02 <_svfiprintf_r+0x4a>
 8006c26:	fb05 3202 	mla	r2, r5, r2, r3
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	460f      	mov	r7, r1
 8006c2e:	e7a6      	b.n	8006b7e <_svfiprintf_r+0xc6>
 8006c30:	2300      	movs	r3, #0
 8006c32:	3701      	adds	r7, #1
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	4619      	mov	r1, r3
 8006c38:	250a      	movs	r5, #10
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c40:	3a30      	subs	r2, #48	; 0x30
 8006c42:	2a09      	cmp	r2, #9
 8006c44:	d903      	bls.n	8006c4e <_svfiprintf_r+0x196>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0c8      	beq.n	8006bdc <_svfiprintf_r+0x124>
 8006c4a:	9105      	str	r1, [sp, #20]
 8006c4c:	e7c6      	b.n	8006bdc <_svfiprintf_r+0x124>
 8006c4e:	fb05 2101 	mla	r1, r5, r1, r2
 8006c52:	2301      	movs	r3, #1
 8006c54:	4607      	mov	r7, r0
 8006c56:	e7f0      	b.n	8006c3a <_svfiprintf_r+0x182>
 8006c58:	ab03      	add	r3, sp, #12
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <_svfiprintf_r+0x1ec>)
 8006c60:	a904      	add	r1, sp, #16
 8006c62:	4640      	mov	r0, r8
 8006c64:	f3af 8000 	nop.w
 8006c68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c6c:	4681      	mov	r9, r0
 8006c6e:	d1d6      	bne.n	8006c1e <_svfiprintf_r+0x166>
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	065b      	lsls	r3, r3, #25
 8006c74:	f53f af35 	bmi.w	8006ae2 <_svfiprintf_r+0x2a>
 8006c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c7a:	b01d      	add	sp, #116	; 0x74
 8006c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c80:	ab03      	add	r3, sp, #12
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	4622      	mov	r2, r4
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <_svfiprintf_r+0x1ec>)
 8006c88:	a904      	add	r1, sp, #16
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f000 f882 	bl	8006d94 <_printf_i>
 8006c90:	e7ea      	b.n	8006c68 <_svfiprintf_r+0x1b0>
 8006c92:	bf00      	nop
 8006c94:	080076c4 	.word	0x080076c4
 8006c98:	080076ca 	.word	0x080076ca
 8006c9c:	080076ce 	.word	0x080076ce
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	08006a05 	.word	0x08006a05

08006ca8 <_printf_common>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	4691      	mov	r9, r2
 8006cae:	461f      	mov	r7, r3
 8006cb0:	688a      	ldr	r2, [r1, #8]
 8006cb2:	690b      	ldr	r3, [r1, #16]
 8006cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	bfb8      	it	lt
 8006cbc:	4613      	movlt	r3, r2
 8006cbe:	f8c9 3000 	str.w	r3, [r9]
 8006cc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	460c      	mov	r4, r1
 8006cca:	b112      	cbz	r2, 8006cd2 <_printf_common+0x2a>
 8006ccc:	3301      	adds	r3, #1
 8006cce:	f8c9 3000 	str.w	r3, [r9]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	0699      	lsls	r1, r3, #26
 8006cd6:	bf42      	ittt	mi
 8006cd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006cdc:	3302      	addmi	r3, #2
 8006cde:	f8c9 3000 	strmi.w	r3, [r9]
 8006ce2:	6825      	ldr	r5, [r4, #0]
 8006ce4:	f015 0506 	ands.w	r5, r5, #6
 8006ce8:	d107      	bne.n	8006cfa <_printf_common+0x52>
 8006cea:	f104 0a19 	add.w	sl, r4, #25
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	f8d9 2000 	ldr.w	r2, [r9]
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	42ab      	cmp	r3, r5
 8006cf8:	dc28      	bgt.n	8006d4c <_printf_common+0xa4>
 8006cfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	3300      	adds	r3, #0
 8006d02:	bf18      	it	ne
 8006d04:	2301      	movne	r3, #1
 8006d06:	0692      	lsls	r2, r2, #26
 8006d08:	d42d      	bmi.n	8006d66 <_printf_common+0xbe>
 8006d0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d0e:	4639      	mov	r1, r7
 8006d10:	4630      	mov	r0, r6
 8006d12:	47c0      	blx	r8
 8006d14:	3001      	adds	r0, #1
 8006d16:	d020      	beq.n	8006d5a <_printf_common+0xb2>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	68e5      	ldr	r5, [r4, #12]
 8006d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d20:	f003 0306 	and.w	r3, r3, #6
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	bf08      	it	eq
 8006d28:	1aad      	subeq	r5, r5, r2
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	bf0c      	ite	eq
 8006d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d34:	2500      	movne	r5, #0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bfc4      	itt	gt
 8006d3a:	1a9b      	subgt	r3, r3, r2
 8006d3c:	18ed      	addgt	r5, r5, r3
 8006d3e:	f04f 0900 	mov.w	r9, #0
 8006d42:	341a      	adds	r4, #26
 8006d44:	454d      	cmp	r5, r9
 8006d46:	d11a      	bne.n	8006d7e <_printf_common+0xd6>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e008      	b.n	8006d5e <_printf_common+0xb6>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	4652      	mov	r2, sl
 8006d50:	4639      	mov	r1, r7
 8006d52:	4630      	mov	r0, r6
 8006d54:	47c0      	blx	r8
 8006d56:	3001      	adds	r0, #1
 8006d58:	d103      	bne.n	8006d62 <_printf_common+0xba>
 8006d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d62:	3501      	adds	r5, #1
 8006d64:	e7c3      	b.n	8006cee <_printf_common+0x46>
 8006d66:	18e1      	adds	r1, r4, r3
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	2030      	movs	r0, #48	; 0x30
 8006d6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d70:	4422      	add	r2, r4
 8006d72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	e7c5      	b.n	8006d0a <_printf_common+0x62>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	4622      	mov	r2, r4
 8006d82:	4639      	mov	r1, r7
 8006d84:	4630      	mov	r0, r6
 8006d86:	47c0      	blx	r8
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d0e6      	beq.n	8006d5a <_printf_common+0xb2>
 8006d8c:	f109 0901 	add.w	r9, r9, #1
 8006d90:	e7d8      	b.n	8006d44 <_printf_common+0x9c>
	...

08006d94 <_printf_i>:
 8006d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	7e09      	ldrb	r1, [r1, #24]
 8006da0:	b085      	sub	sp, #20
 8006da2:	296e      	cmp	r1, #110	; 0x6e
 8006da4:	4617      	mov	r7, r2
 8006da6:	4606      	mov	r6, r0
 8006da8:	4698      	mov	r8, r3
 8006daa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dac:	f000 80b3 	beq.w	8006f16 <_printf_i+0x182>
 8006db0:	d822      	bhi.n	8006df8 <_printf_i+0x64>
 8006db2:	2963      	cmp	r1, #99	; 0x63
 8006db4:	d036      	beq.n	8006e24 <_printf_i+0x90>
 8006db6:	d80a      	bhi.n	8006dce <_printf_i+0x3a>
 8006db8:	2900      	cmp	r1, #0
 8006dba:	f000 80b9 	beq.w	8006f30 <_printf_i+0x19c>
 8006dbe:	2958      	cmp	r1, #88	; 0x58
 8006dc0:	f000 8083 	beq.w	8006eca <_printf_i+0x136>
 8006dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006dcc:	e032      	b.n	8006e34 <_printf_i+0xa0>
 8006dce:	2964      	cmp	r1, #100	; 0x64
 8006dd0:	d001      	beq.n	8006dd6 <_printf_i+0x42>
 8006dd2:	2969      	cmp	r1, #105	; 0x69
 8006dd4:	d1f6      	bne.n	8006dc4 <_printf_i+0x30>
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	6813      	ldr	r3, [r2, #0]
 8006dda:	0605      	lsls	r5, r0, #24
 8006ddc:	f103 0104 	add.w	r1, r3, #4
 8006de0:	d52a      	bpl.n	8006e38 <_printf_i+0xa4>
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da03      	bge.n	8006df2 <_printf_i+0x5e>
 8006dea:	222d      	movs	r2, #45	; 0x2d
 8006dec:	425b      	negs	r3, r3
 8006dee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006df2:	486f      	ldr	r0, [pc, #444]	; (8006fb0 <_printf_i+0x21c>)
 8006df4:	220a      	movs	r2, #10
 8006df6:	e039      	b.n	8006e6c <_printf_i+0xd8>
 8006df8:	2973      	cmp	r1, #115	; 0x73
 8006dfa:	f000 809d 	beq.w	8006f38 <_printf_i+0x1a4>
 8006dfe:	d808      	bhi.n	8006e12 <_printf_i+0x7e>
 8006e00:	296f      	cmp	r1, #111	; 0x6f
 8006e02:	d020      	beq.n	8006e46 <_printf_i+0xb2>
 8006e04:	2970      	cmp	r1, #112	; 0x70
 8006e06:	d1dd      	bne.n	8006dc4 <_printf_i+0x30>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	f043 0320 	orr.w	r3, r3, #32
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	e003      	b.n	8006e1a <_printf_i+0x86>
 8006e12:	2975      	cmp	r1, #117	; 0x75
 8006e14:	d017      	beq.n	8006e46 <_printf_i+0xb2>
 8006e16:	2978      	cmp	r1, #120	; 0x78
 8006e18:	d1d4      	bne.n	8006dc4 <_printf_i+0x30>
 8006e1a:	2378      	movs	r3, #120	; 0x78
 8006e1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e20:	4864      	ldr	r0, [pc, #400]	; (8006fb4 <_printf_i+0x220>)
 8006e22:	e055      	b.n	8006ed0 <_printf_i+0x13c>
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	1d19      	adds	r1, r3, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6011      	str	r1, [r2, #0]
 8006e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e34:	2301      	movs	r3, #1
 8006e36:	e08c      	b.n	8006f52 <_printf_i+0x1be>
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6011      	str	r1, [r2, #0]
 8006e3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e40:	bf18      	it	ne
 8006e42:	b21b      	sxthne	r3, r3
 8006e44:	e7cf      	b.n	8006de6 <_printf_i+0x52>
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	6825      	ldr	r5, [r4, #0]
 8006e4a:	1d18      	adds	r0, r3, #4
 8006e4c:	6010      	str	r0, [r2, #0]
 8006e4e:	0628      	lsls	r0, r5, #24
 8006e50:	d501      	bpl.n	8006e56 <_printf_i+0xc2>
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	e002      	b.n	8006e5c <_printf_i+0xc8>
 8006e56:	0668      	lsls	r0, r5, #25
 8006e58:	d5fb      	bpl.n	8006e52 <_printf_i+0xbe>
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	4854      	ldr	r0, [pc, #336]	; (8006fb0 <_printf_i+0x21c>)
 8006e5e:	296f      	cmp	r1, #111	; 0x6f
 8006e60:	bf14      	ite	ne
 8006e62:	220a      	movne	r2, #10
 8006e64:	2208      	moveq	r2, #8
 8006e66:	2100      	movs	r1, #0
 8006e68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e6c:	6865      	ldr	r5, [r4, #4]
 8006e6e:	60a5      	str	r5, [r4, #8]
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	f2c0 8095 	blt.w	8006fa0 <_printf_i+0x20c>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	f021 0104 	bic.w	r1, r1, #4
 8006e7c:	6021      	str	r1, [r4, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d13d      	bne.n	8006efe <_printf_i+0x16a>
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	f040 808e 	bne.w	8006fa4 <_printf_i+0x210>
 8006e88:	4665      	mov	r5, ip
 8006e8a:	2a08      	cmp	r2, #8
 8006e8c:	d10b      	bne.n	8006ea6 <_printf_i+0x112>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	07db      	lsls	r3, r3, #31
 8006e92:	d508      	bpl.n	8006ea6 <_printf_i+0x112>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	6862      	ldr	r2, [r4, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bfde      	ittt	le
 8006e9c:	2330      	movle	r3, #48	; 0x30
 8006e9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ea2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ea6:	ebac 0305 	sub.w	r3, ip, r5
 8006eaa:	6123      	str	r3, [r4, #16]
 8006eac:	f8cd 8000 	str.w	r8, [sp]
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	aa03      	add	r2, sp, #12
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff fef6 	bl	8006ca8 <_printf_common>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d14d      	bne.n	8006f5c <_printf_i+0x1c8>
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	b005      	add	sp, #20
 8006ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eca:	4839      	ldr	r0, [pc, #228]	; (8006fb0 <_printf_i+0x21c>)
 8006ecc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ed0:	6813      	ldr	r3, [r2, #0]
 8006ed2:	6821      	ldr	r1, [r4, #0]
 8006ed4:	1d1d      	adds	r5, r3, #4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6015      	str	r5, [r2, #0]
 8006eda:	060a      	lsls	r2, r1, #24
 8006edc:	d50b      	bpl.n	8006ef6 <_printf_i+0x162>
 8006ede:	07ca      	lsls	r2, r1, #31
 8006ee0:	bf44      	itt	mi
 8006ee2:	f041 0120 	orrmi.w	r1, r1, #32
 8006ee6:	6021      	strmi	r1, [r4, #0]
 8006ee8:	b91b      	cbnz	r3, 8006ef2 <_printf_i+0x15e>
 8006eea:	6822      	ldr	r2, [r4, #0]
 8006eec:	f022 0220 	bic.w	r2, r2, #32
 8006ef0:	6022      	str	r2, [r4, #0]
 8006ef2:	2210      	movs	r2, #16
 8006ef4:	e7b7      	b.n	8006e66 <_printf_i+0xd2>
 8006ef6:	064d      	lsls	r5, r1, #25
 8006ef8:	bf48      	it	mi
 8006efa:	b29b      	uxthmi	r3, r3
 8006efc:	e7ef      	b.n	8006ede <_printf_i+0x14a>
 8006efe:	4665      	mov	r5, ip
 8006f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f04:	fb02 3311 	mls	r3, r2, r1, r3
 8006f08:	5cc3      	ldrb	r3, [r0, r3]
 8006f0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f0e:	460b      	mov	r3, r1
 8006f10:	2900      	cmp	r1, #0
 8006f12:	d1f5      	bne.n	8006f00 <_printf_i+0x16c>
 8006f14:	e7b9      	b.n	8006e8a <_printf_i+0xf6>
 8006f16:	6813      	ldr	r3, [r2, #0]
 8006f18:	6825      	ldr	r5, [r4, #0]
 8006f1a:	6961      	ldr	r1, [r4, #20]
 8006f1c:	1d18      	adds	r0, r3, #4
 8006f1e:	6010      	str	r0, [r2, #0]
 8006f20:	0628      	lsls	r0, r5, #24
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	d501      	bpl.n	8006f2a <_printf_i+0x196>
 8006f26:	6019      	str	r1, [r3, #0]
 8006f28:	e002      	b.n	8006f30 <_printf_i+0x19c>
 8006f2a:	066a      	lsls	r2, r5, #25
 8006f2c:	d5fb      	bpl.n	8006f26 <_printf_i+0x192>
 8006f2e:	8019      	strh	r1, [r3, #0]
 8006f30:	2300      	movs	r3, #0
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	4665      	mov	r5, ip
 8006f36:	e7b9      	b.n	8006eac <_printf_i+0x118>
 8006f38:	6813      	ldr	r3, [r2, #0]
 8006f3a:	1d19      	adds	r1, r3, #4
 8006f3c:	6011      	str	r1, [r2, #0]
 8006f3e:	681d      	ldr	r5, [r3, #0]
 8006f40:	6862      	ldr	r2, [r4, #4]
 8006f42:	2100      	movs	r1, #0
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7f9 f963 	bl	8000210 <memchr>
 8006f4a:	b108      	cbz	r0, 8006f50 <_printf_i+0x1bc>
 8006f4c:	1b40      	subs	r0, r0, r5
 8006f4e:	6060      	str	r0, [r4, #4]
 8006f50:	6863      	ldr	r3, [r4, #4]
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	2300      	movs	r3, #0
 8006f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5a:	e7a7      	b.n	8006eac <_printf_i+0x118>
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4639      	mov	r1, r7
 8006f62:	4630      	mov	r0, r6
 8006f64:	47c0      	blx	r8
 8006f66:	3001      	adds	r0, #1
 8006f68:	d0aa      	beq.n	8006ec0 <_printf_i+0x12c>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	079b      	lsls	r3, r3, #30
 8006f6e:	d413      	bmi.n	8006f98 <_printf_i+0x204>
 8006f70:	68e0      	ldr	r0, [r4, #12]
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	4298      	cmp	r0, r3
 8006f76:	bfb8      	it	lt
 8006f78:	4618      	movlt	r0, r3
 8006f7a:	e7a3      	b.n	8006ec4 <_printf_i+0x130>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	464a      	mov	r2, r9
 8006f80:	4639      	mov	r1, r7
 8006f82:	4630      	mov	r0, r6
 8006f84:	47c0      	blx	r8
 8006f86:	3001      	adds	r0, #1
 8006f88:	d09a      	beq.n	8006ec0 <_printf_i+0x12c>
 8006f8a:	3501      	adds	r5, #1
 8006f8c:	68e3      	ldr	r3, [r4, #12]
 8006f8e:	9a03      	ldr	r2, [sp, #12]
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	42ab      	cmp	r3, r5
 8006f94:	dcf2      	bgt.n	8006f7c <_printf_i+0x1e8>
 8006f96:	e7eb      	b.n	8006f70 <_printf_i+0x1dc>
 8006f98:	2500      	movs	r5, #0
 8006f9a:	f104 0919 	add.w	r9, r4, #25
 8006f9e:	e7f5      	b.n	8006f8c <_printf_i+0x1f8>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1ac      	bne.n	8006efe <_printf_i+0x16a>
 8006fa4:	7803      	ldrb	r3, [r0, #0]
 8006fa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fae:	e76c      	b.n	8006e8a <_printf_i+0xf6>
 8006fb0:	080076d5 	.word	0x080076d5
 8006fb4:	080076e6 	.word	0x080076e6

08006fb8 <_realloc_r>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	4607      	mov	r7, r0
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	460e      	mov	r6, r1
 8006fc0:	b921      	cbnz	r1, 8006fcc <_realloc_r+0x14>
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fc8:	f7ff bc32 	b.w	8006830 <_malloc_r>
 8006fcc:	b922      	cbnz	r2, 8006fd8 <_realloc_r+0x20>
 8006fce:	f7ff fbe1 	bl	8006794 <_free_r>
 8006fd2:	4625      	mov	r5, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd8:	f000 f814 	bl	8007004 <_malloc_usable_size_r>
 8006fdc:	42a0      	cmp	r0, r4
 8006fde:	d20f      	bcs.n	8007000 <_realloc_r+0x48>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff fc24 	bl	8006830 <_malloc_r>
 8006fe8:	4605      	mov	r5, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d0f2      	beq.n	8006fd4 <_realloc_r+0x1c>
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	f7ff fba3 	bl	800673c <memcpy>
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7ff fbcb 	bl	8006794 <_free_r>
 8006ffe:	e7e9      	b.n	8006fd4 <_realloc_r+0x1c>
 8007000:	4635      	mov	r5, r6
 8007002:	e7e7      	b.n	8006fd4 <_realloc_r+0x1c>

08007004 <_malloc_usable_size_r>:
 8007004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007008:	1f18      	subs	r0, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	bfbc      	itt	lt
 800700e:	580b      	ldrlt	r3, [r1, r0]
 8007010:	18c0      	addlt	r0, r0, r3
 8007012:	4770      	bx	lr

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
