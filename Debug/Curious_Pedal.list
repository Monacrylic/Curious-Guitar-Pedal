
Curious_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eac  08005eac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb4  08005eb4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a3c  20000074  08005f38  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ab0  08005f38  00022ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6b8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034e3  00000000  00000000  0003e75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  00041c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  00042fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028582  00000000  00000000  000441d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101c5  00000000  00000000  0006c75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3592  00000000  00000000  0007c91f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015feb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006994  00000000  00000000  0015ff2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005904 	.word	0x08005904

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08005904 	.word	0x08005904

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
OLED OLED1;

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
//First half of ADC buffer is now full
	inBufPtr =&adc_val[0];
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000520:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[DATA_SIZE];
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	20000a80 	.word	0x20000a80
 8000538:	20000280 	.word	0x20000280
 800053c:	20000a84 	.word	0x20000a84
 8000540:	20000880 	.word	0x20000880

08000544 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

	inBufPtr =&adc_val[DATA_SIZE];
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_ADC_ConvCpltCallback+0x20>)
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_ADC_ConvCpltCallback+0x24>)
 8000550:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[0];
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_ADC_ConvCpltCallback+0x28>)
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000a80 	.word	0x20000a80
 8000568:	20000480 	.word	0x20000480
 800056c:	20000a84 	.word	0x20000a84
 8000570:	20000680 	.word	0x20000680

08000574 <_Z10effectsDSPv>:

void effectsDSP(){
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
	// No -effect, just copy input to output
if (effectno == 0){
 800057a:	4b44      	ldr	r3, [pc, #272]	; (800068c <_Z10effectsDSPv+0x118>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d114      	bne.n	80005ac <_Z10effectsDSPv+0x38>
	for (int n=0; n< DATA_SIZE; n++){
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b7f      	cmp	r3, #127	; 0x7f
 800058a:	dc78      	bgt.n	800067e <_Z10effectsDSPv+0x10a>
		outBufPtr[n]=inBufPtr[n];
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <_Z10effectsDSPv+0x11c>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	441a      	add	r2, r3
 8000596:	4b3f      	ldr	r3, [pc, #252]	; (8000694 <_Z10effectsDSPv+0x120>)
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	440b      	add	r3, r1
 80005a0:	6812      	ldr	r2, [r2, #0]
 80005a2:	601a      	str	r2, [r3, #0]
	for (int n=0; n< DATA_SIZE; n++){
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e7ec      	b.n	8000586 <_Z10effectsDSPv+0x12>
	}
}
else if (effectno == 1) // Effect 1 is distortion, CLIPPING.
 80005ac:	4b37      	ldr	r3, [pc, #220]	; (800068c <_Z10effectsDSPv+0x118>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d150      	bne.n	8000656 <_Z10effectsDSPv+0xe2>
{
	for (int n=0; n< DATA_SIZE; n++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b7f      	cmp	r3, #127	; 0x7f
 80005bc:	dc5f      	bgt.n	800067e <_Z10effectsDSPv+0x10a>
		//Upper Clipping
		if(inBufPtr[n] >= uint16_t(2048 + distortionThreshold))
 80005be:	4b34      	ldr	r3, [pc, #208]	; (8000690 <_Z10effectsDSPv+0x11c>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a33      	ldr	r2, [pc, #204]	; (8000698 <_Z10effectsDSPv+0x124>)
 80005cc:	8812      	ldrh	r2, [r2, #0]
 80005ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80005d2:	b292      	uxth	r2, r2
 80005d4:	4293      	cmp	r3, r2
 80005d6:	bf2c      	ite	cs
 80005d8:	2301      	movcs	r3, #1
 80005da:	2300      	movcc	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d00b      	beq.n	80005fa <_Z10effectsDSPv+0x86>
			outBufPtr[n] = 2048+ distortionThreshold;
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <_Z10effectsDSPv+0x124>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <_Z10effectsDSPv+0x120>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	460a      	mov	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	e029      	b.n	800064e <_Z10effectsDSPv+0xda>
		//Lower Clipping
		else if(inBufPtr[n] <= uint16_t(2048 - distortionThreshold))
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <_Z10effectsDSPv+0x11c>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a24      	ldr	r2, [pc, #144]	; (8000698 <_Z10effectsDSPv+0x124>)
 8000608:	8812      	ldrh	r2, [r2, #0]
 800060a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 800060e:	b292      	uxth	r2, r2
 8000610:	4293      	cmp	r3, r2
 8000612:	bf94      	ite	ls
 8000614:	2301      	movls	r3, #1
 8000616:	2300      	movhi	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00b      	beq.n	8000636 <_Z10effectsDSPv+0xc2>
			outBufPtr[n] = 2048-distortionThreshold;
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <_Z10effectsDSPv+0x124>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <_Z10effectsDSPv+0x120>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	e00b      	b.n	800064e <_Z10effectsDSPv+0xda>
		else
			outBufPtr[n]=inBufPtr[n];
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <_Z10effectsDSPv+0x11c>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	441a      	add	r2, r3
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <_Z10effectsDSPv+0x120>)
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	440b      	add	r3, r1
 800064a:	6812      	ldr	r2, [r2, #0]
 800064c:	601a      	str	r2, [r3, #0]
	for (int n=0; n< DATA_SIZE; n++){
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	3301      	adds	r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	e7b0      	b.n	80005b8 <_Z10effectsDSPv+0x44>
	}
}

else if(effectno ==2){ //MUTE
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <_Z10effectsDSPv+0x118>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d10f      	bne.n	800067e <_Z10effectsDSPv+0x10a>
	for (int n=0; n< DATA_SIZE; n++){
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b7f      	cmp	r3, #127	; 0x7f
 8000666:	dc0a      	bgt.n	800067e <_Z10effectsDSPv+0x10a>
		outBufPtr[n]=0;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <_Z10effectsDSPv+0x120>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
	for (int n=0; n< DATA_SIZE; n++){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	e7f1      	b.n	8000662 <_Z10effectsDSPv+0xee>
	}
}
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000a88 	.word	0x20000a88
 8000690:	20000a80 	.word	0x20000a80
 8000694:	20000a84 	.word	0x20000a84
 8000698:	20000000 	.word	0x20000000

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09a      	sub	sp, #104	; 0x68
 80006a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 fe87 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f937 	bl	8000918 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 fb31 	bl	8000d10 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80006ae:	f000 faf9 	bl	8000ca4 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80006b2:	f000 fac9 	bl	8000c48 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80006b6:	f000 fa37 	bl	8000b28 <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 80006ba:	f000 f9a5 	bl	8000a08 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 80006be:	f000 f9ff 	bl	8000ac0 <_ZL11MX_DAC_Initv>
  MX_TIM2_Init();
 80006c2:	f000 fa65 	bl	8000b90 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80006c6:	4887      	ldr	r0, [pc, #540]	; (80008e4 <main+0x248>)
 80006c8:	f003 fdc9 	bl	800425e <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, FULL_BUFFER_SIZE);
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	4985      	ldr	r1, [pc, #532]	; (80008e8 <main+0x24c>)
 80006d2:	4886      	ldr	r0, [pc, #536]	; (80008ec <main+0x250>)
 80006d4:	f000 ff46 	bl	8001564 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*) dac_val, FULL_BUFFER_SIZE, DAC_ALIGN_12B_R);
 80006d8:	2300      	movs	r3, #0
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	4a83      	ldr	r2, [pc, #524]	; (80008f0 <main+0x254>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4883      	ldr	r0, [pc, #524]	; (80008f4 <main+0x258>)
 80006e6:	f001 fc1d 	bl	8001f24 <HAL_DAC_Start_DMA>
  /*-----------------ADC AND DAC START------------------------*/

  /*-----------------SECTION_END------------------------------*/

  if(HAL_I2C_IsDeviceReady(&hi2c1, OLED1.getCAddress(), 1, 10)== HAL_OK){
 80006ea:	4883      	ldr	r0, [pc, #524]	; (80008f8 <main+0x25c>)
 80006ec:	f004 fd52 	bl	8005194 <_ZN4OLED11getCAddressEv>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b299      	uxth	r1, r3
 80006f4:	230a      	movs	r3, #10
 80006f6:	2201      	movs	r2, #1
 80006f8:	4880      	ldr	r0, [pc, #512]	; (80008fc <main+0x260>)
 80006fa:	f002 fd39 	bl	8003170 <HAL_I2C_IsDeviceReady>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf0c      	ite	eq
 8000704:	2301      	moveq	r3, #1
 8000706:	2300      	movne	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x7c>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	487b      	ldr	r0, [pc, #492]	; (8000900 <main+0x264>)
 8000714:	f002 fac2 	bl	8002c9c <HAL_GPIO_WritePin>
  }

  OLED1.init(&hi2c1);
 8000718:	4978      	ldr	r1, [pc, #480]	; (80008fc <main+0x260>)
 800071a:	4877      	ldr	r0, [pc, #476]	; (80008f8 <main+0x25c>)
 800071c:	f004 fc35 	bl	8004f8a <_ZN4OLED4initEP19__I2C_HandleTypeDef>

  HAL_Delay(200);
 8000720:	20c8      	movs	r0, #200	; 0xc8
 8000722:	f000 feb9 	bl	8001498 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(BRIGHT_GPIO_Port, BRIGHT_Pin) == GPIO_PIN_SET){
 8000726:	2120      	movs	r1, #32
 8000728:	4876      	ldr	r0, [pc, #472]	; (8000904 <main+0x268>)
 800072a:	f002 fa9f 	bl	8002c6c <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d007      	beq.n	800074e <main+0xb2>
		  HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f000 feaa 	bl	8001498 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000744:	2120      	movs	r1, #32
 8000746:	486e      	ldr	r0, [pc, #440]	; (8000900 <main+0x264>)
 8000748:	f002 fac1 	bl	8002cce <HAL_GPIO_TogglePin>
 800074c:	e0c6      	b.n	80008dc <main+0x240>
	  }
	  else if (HAL_GPIO_ReadPin(BLEFT_GPIO_Port, BLEFT_Pin) == GPIO_PIN_SET){
 800074e:	2110      	movs	r1, #16
 8000750:	486c      	ldr	r0, [pc, #432]	; (8000904 <main+0x268>)
 8000752:	f002 fa8b 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	bf0c      	ite	eq
 800075c:	2301      	moveq	r3, #1
 800075e:	2300      	movne	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d007      	beq.n	8000776 <main+0xda>
		  HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 fe96 	bl	8001498 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800076c:	2120      	movs	r1, #32
 800076e:	4864      	ldr	r0, [pc, #400]	; (8000900 <main+0x264>)
 8000770:	f002 faad 	bl	8002cce <HAL_GPIO_TogglePin>
 8000774:	e0b2      	b.n	80008dc <main+0x240>
	  }

	  else if (HAL_GPIO_ReadPin(BDOWN_GPIO_Port, BDOWN_Pin) == GPIO_PIN_SET){
 8000776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077a:	4862      	ldr	r0, [pc, #392]	; (8000904 <main+0x268>)
 800077c:	f002 fa76 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	bf0c      	ite	eq
 8000786:	2301      	moveq	r3, #1
 8000788:	2300      	movne	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d007      	beq.n	80007a0 <main+0x104>
		  HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f000 fe81 	bl	8001498 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000796:	2120      	movs	r1, #32
 8000798:	4859      	ldr	r0, [pc, #356]	; (8000900 <main+0x264>)
 800079a:	f002 fa98 	bl	8002cce <HAL_GPIO_TogglePin>
 800079e:	e09d      	b.n	80008dc <main+0x240>
	  }
	  else if(HAL_GPIO_ReadPin(BUP_GPIO_Port, BUP_Pin)== GPIO_PIN_SET){
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	4858      	ldr	r0, [pc, #352]	; (8000904 <main+0x268>)
 80007a4:	f002 fa62 	bl	8002c6c <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	bf0c      	ite	eq
 80007ae:	2301      	moveq	r3, #1
 80007b0:	2300      	movne	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f000 8091 	beq.w	80008dc <main+0x240>
		  effectno += 1;
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <main+0x26c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b51      	ldr	r3, [pc, #324]	; (8000908 <main+0x26c>)
 80007c4:	701a      	strb	r2, [r3, #0]
		  if (effectno ==3){
 80007c6:	4b50      	ldr	r3, [pc, #320]	; (8000908 <main+0x26c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d102      	bne.n	80007d4 <main+0x138>
			  effectno=0;
 80007ce:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <main+0x26c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
		  }
		  OLED1.fill(0);
 80007d4:	2100      	movs	r1, #0
 80007d6:	4848      	ldr	r0, [pc, #288]	; (80008f8 <main+0x25c>)
 80007d8:	f004 fd23 	bl	8005222 <_ZN4OLED4fillEb>
		  if(effectno== 1){
 80007dc:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <main+0x26c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d122      	bne.n	800082a <main+0x18e>
		  OLED1.text(0,20, "Distortion", 1, 0, 2);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fe9b 	bl	8005524 <_ZNSaIcEC1Ev>
 80007ee:	f107 021c 	add.w	r2, r7, #28
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4945      	ldr	r1, [pc, #276]	; (800090c <main+0x270>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fefa 	bl	80055f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	2302      	movs	r3, #2
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2301      	movs	r3, #1
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	4613      	mov	r3, r2
 800080c:	2214      	movs	r2, #20
 800080e:	2100      	movs	r1, #0
 8000810:	4839      	ldr	r0, [pc, #228]	; (80008f8 <main+0x25c>)
 8000812:	f004 fe45 	bl	80054a0 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f004 feb9 	bl	8005590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4618      	mov	r0, r3
 8000824:	f004 fe7f 	bl	8005526 <_ZNSaIcED1Ev>
 8000828:	e052      	b.n	80008d0 <main+0x234>
		  }
		  else if(effectno == 0){
 800082a:	4b37      	ldr	r3, [pc, #220]	; (8000908 <main+0x26c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d125      	bne.n	800087e <main+0x1e2>
		  OLED1.text(0,20, "Clean", 1, 0, 2);
 8000832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fe74 	bl	8005524 <_ZNSaIcEC1Ev>
 800083c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4932      	ldr	r1, [pc, #200]	; (8000910 <main+0x274>)
 8000846:	4618      	mov	r0, r3
 8000848:	f004 fed2 	bl	80055f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800084c:	f107 0220 	add.w	r2, r7, #32
 8000850:	2302      	movs	r3, #2
 8000852:	9302      	str	r3, [sp, #8]
 8000854:	2300      	movs	r3, #0
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	2301      	movs	r3, #1
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	2214      	movs	r2, #20
 8000860:	2100      	movs	r1, #0
 8000862:	4825      	ldr	r0, [pc, #148]	; (80008f8 <main+0x25c>)
 8000864:	f004 fe1c 	bl	80054a0 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fe8f 	bl	8005590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000876:	4618      	mov	r0, r3
 8000878:	f004 fe55 	bl	8005526 <_ZNSaIcED1Ev>
 800087c:	e028      	b.n	80008d0 <main+0x234>
		  }
		  else if(effectno == 2){
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <main+0x26c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d124      	bne.n	80008d0 <main+0x234>
		  OLED1.text(0,20, "Zeros", 1, 0, 2);
 8000886:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fe4a 	bl	8005524 <_ZNSaIcEC1Ev>
 8000890:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000898:	491e      	ldr	r1, [pc, #120]	; (8000914 <main+0x278>)
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fea8 	bl	80055f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80008a0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80008a4:	2302      	movs	r3, #2
 80008a6:	9302      	str	r3, [sp, #8]
 80008a8:	2300      	movs	r3, #0
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	2301      	movs	r3, #1
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	4613      	mov	r3, r2
 80008b2:	2214      	movs	r2, #20
 80008b4:	2100      	movs	r1, #0
 80008b6:	4810      	ldr	r0, [pc, #64]	; (80008f8 <main+0x25c>)
 80008b8:	f004 fdf2 	bl	80054a0 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 80008bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fe65 	bl	8005590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fe2b 	bl	8005526 <_ZNSaIcED1Ev>
	  }

	  OLED1.drawFullscreen();
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <main+0x25c>)
 80008d2:	f004 fc11 	bl	80050f8 <_ZN4OLED14drawFullscreenEv>
	  HAL_Delay(200);
 80008d6:	20c8      	movs	r0, #200	; 0xc8
 80008d8:	f000 fdde 	bl	8001498 <HAL_Delay>
}
effectsDSP();
 80008dc:	f7ff fe4a 	bl	8000574 <_Z10effectsDSPv>
	  if (HAL_GPIO_ReadPin(BRIGHT_GPIO_Port, BRIGHT_Pin) == GPIO_PIN_SET){
 80008e0:	e721      	b.n	8000726 <main+0x8a>
 80008e2:	bf00      	nop
 80008e4:	20000200 	.word	0x20000200
 80008e8:	20000280 	.word	0x20000280
 80008ec:	20000090 	.word	0x20000090
 80008f0:	20000680 	.word	0x20000680
 80008f4:	20000138 	.word	0x20000138
 80008f8:	20000a8c 	.word	0x20000a8c
 80008fc:	200001ac 	.word	0x200001ac
 8000900:	40020000 	.word	0x40020000
 8000904:	40020400 	.word	0x40020400
 8000908:	20000a88 	.word	0x20000a88
 800090c:	0800591c 	.word	0x0800591c
 8000910:	08005928 	.word	0x08005928
 8000914:	08005930 	.word	0x08005930

08000918 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fee5 	bl	80056f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <_Z18SystemClock_Configv+0xe8>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a2e      	ldr	r2, [pc, #184]	; (8000a00 <_Z18SystemClock_Configv+0xe8>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <_Z18SystemClock_Configv+0xe8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000958:	2300      	movs	r3, #0
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <_Z18SystemClock_Configv+0xec>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <_Z18SystemClock_Configv+0xec>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <_Z18SystemClock_Configv+0xec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000990:	2348      	movs	r3, #72	; 0x48
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 f9d5 	bl	8003d54 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80009ba:	f000 fa27 	bl	8000e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 feff 	bl	80037e0 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80009f2:	f000 fa0b 	bl	8000e0c <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3750      	adds	r7, #80	; 0x50
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a1c:	4a27      	ldr	r2, [pc, #156]	; (8000abc <_ZL12MX_ADC1_Initv+0xb4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a4a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a6c:	f000 fd36 	bl	80014dc <HAL_ADC_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <_ZL12MX_ADC1_Initv+0x7c>
  {
    Error_Handler();
 8000a80:	f000 f9c4 	bl	8000e0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a96:	f000 fe61 	bl	800175c <HAL_ADC_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf14      	ite	ne
 8000aa0:	2301      	movne	r3, #1
 8000aa2:	2300      	moveq	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 8000aaa:	f000 f9af 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000090 	.word	0x20000090
 8000abc:	40012000 	.word	0x40012000

08000ac0 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <_ZL11MX_DAC_Initv+0x60>)
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <_ZL11MX_DAC_Initv+0x64>)
 8000ad2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ad4:	4812      	ldr	r0, [pc, #72]	; (8000b20 <_ZL11MX_DAC_Initv+0x60>)
 8000ad6:	f001 fa02 	bl	8001ede <HAL_DAC_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf14      	ite	ne
 8000ae0:	2301      	movne	r3, #1
 8000ae2:	2300      	moveq	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8000aea:	f000 f98f 	bl	8000e0c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000aee:	2324      	movs	r3, #36	; 0x24
 8000af0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <_ZL11MX_DAC_Initv+0x60>)
 8000afe:	f001 fadd 	bl	80020bc <HAL_DAC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 8000b12:	f000 f97b 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000138 	.word	0x20000138
 8000b24:	40007400 	.word	0x40007400

08000b28 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <_ZL12MX_I2C1_Initv+0x60>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b34:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <_ZL12MX_I2C1_Initv+0x64>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000b66:	f002 f8cd 	bl	8002d04 <HAL_I2C_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000b7a:	f000 f947 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200001ac 	.word	0x200001ac
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	00061a80 	.word	0x00061a80

08000b90 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1439;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bc2:	f240 529f 	movw	r2, #1439	; 0x59f
 8000bc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd4:	481b      	ldr	r0, [pc, #108]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bd6:	f003 fb17 	bl	8004208 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000bea:	f000 f90f 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4812      	ldr	r0, [pc, #72]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000bfc:	f003 fb53 	bl	80042a6 <HAL_TIM_ConfigClockSource>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000c10:	f000 f8fc 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c14:	2320      	movs	r3, #32
 8000c16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c22:	f003 fd31 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf14      	ite	ne
 8000c2c:	2301      	movne	r3, #1
 8000c2e:	2300      	moveq	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000c36:	f000 f8e9 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000200 	.word	0x20000200

08000c48 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c80:	f003 fd7e 	bl	8004780 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000c94:	f000 f8ba 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000240 	.word	0x20000240
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <_ZL11MX_DMA_Initv+0x68>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <_ZL11MX_DMA_Initv+0x68>)
 8000cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <_ZL11MX_DMA_Initv+0x68>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_ZL11MX_DMA_Initv+0x68>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <_ZL11MX_DMA_Initv+0x68>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <_ZL11MX_DMA_Initv+0x68>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f001 f8c3 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cec:	2010      	movs	r0, #16
 8000cee:	f001 f8dc 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2038      	movs	r0, #56	; 0x38
 8000cf8:	f001 f8bb 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cfc:	2038      	movs	r0, #56	; 0x38
 8000cfe:	f001 f8d4 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <_ZL12MX_GPIO_Initv+0xec>)
 8000d9c:	f001 ff7e 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <_ZL12MX_GPIO_Initv+0xf0>)
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4813      	ldr	r0, [pc, #76]	; (8000e04 <_ZL12MX_GPIO_Initv+0xf4>)
 8000db6:	f001 fdc7 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <_ZL12MX_GPIO_Initv+0xec>)
 8000dd2:	f001 fdb9 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : BDOWN_Pin BLEFT_Pin BRIGHT_Pin BUP_Pin */
  GPIO_InitStruct.Pin = BDOWN_Pin|BLEFT_Pin|BRIGHT_Pin|BUP_Pin;
 8000dd6:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <_ZL12MX_GPIO_Initv+0xf8>)
 8000dec:	f001 fdac 	bl	8002948 <HAL_GPIO_Init>

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	10210000 	.word	0x10210000
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020400 	.word	0x40020400

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_Z41__static_initialization_and_destruction_0ii>:
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d107      	bne.n	8000e3c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d102      	bne.n	8000e3c <_Z41__static_initialization_and_destruction_0ii+0x20>
OLED OLED1;
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000e38:	f004 f86c 	bl	8004f14 <_ZN4OLEDC1Ev>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d107      	bne.n	8000e52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000e4e:	f004 f87b 	bl	8004f48 <_ZN4OLEDD1Ev>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000a8c 	.word	0x20000a8c

08000e60 <_GLOBAL__sub_I_hadc1>:
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ffd7 	bl	8000e1c <_Z41__static_initialization_and_destruction_0ii>
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_GLOBAL__sub_D_hadc1>:
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff ffcf 	bl	8000e1c <_Z41__static_initialization_and_destruction_0ii>
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f000 ffcc 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_ADC_MspInit+0xdc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d158      	bne.n	8000fa4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_ADC_MspInit+0xe0>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <HAL_ADC_MspInit+0xe0>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_ADC_MspInit+0xe0>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_ADC_MspInit+0xe0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_ADC_MspInit+0xe0>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_ADC_MspInit+0xe0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <HAL_ADC_MspInit+0xe4>)
 8000f3e:	f001 fd03 	bl	8002948 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_ADC_MspInit+0xec>)
 8000f46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f8a:	f001 f96f 	bl	800226c <HAL_DMA_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000f94:	f7ff ff3a 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_ADC_MspInit+0xe8>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	200000d8 	.word	0x200000d8
 8000fbc:	40026410 	.word	0x40026410

08000fc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a30      	ldr	r2, [pc, #192]	; (80010a0 <HAL_DAC_MspInit+0xe0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d159      	bne.n	8001096 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_DAC_MspInit+0xe4>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <HAL_DAC_MspInit+0xe4>)
 8000fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <HAL_DAC_MspInit+0xe4>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_DAC_MspInit+0xe4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_DAC_MspInit+0xe4>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_DAC_MspInit+0xe4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800101a:	2310      	movs	r3, #16
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481e      	ldr	r0, [pc, #120]	; (80010a8 <HAL_DAC_MspInit+0xe8>)
 800102e:	f001 fc8b 	bl	8002948 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_DAC_MspInit+0xec>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_DAC_MspInit+0xf0>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_DAC_MspInit+0xec>)
 800103a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800103e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_DAC_MspInit+0xec>)
 8001042:	2240      	movs	r2, #64	; 0x40
 8001044:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_DAC_MspInit+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_DAC_MspInit+0xec>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_DAC_MspInit+0xec>)
 8001056:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800105a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_DAC_MspInit+0xec>)
 800105e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001062:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_DAC_MspInit+0xec>)
 8001066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_DAC_MspInit+0xec>)
 800106e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001072:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_DAC_MspInit+0xec>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800107a:	480c      	ldr	r0, [pc, #48]	; (80010ac <HAL_DAC_MspInit+0xec>)
 800107c:	f001 f8f6 	bl	800226c <HAL_DMA_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001086:	f7ff fec1 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_DAC_MspInit+0xec>)
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_DAC_MspInit+0xec>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40007400 	.word	0x40007400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	2000014c 	.word	0x2000014c
 80010b0:	40026088 	.word	0x40026088

080010b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_I2C_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12c      	bne.n	8001130 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_I2C_MspInit+0x88>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_I2C_MspInit+0x88>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_I2C_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001104:	2304      	movs	r3, #4
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <HAL_I2C_MspInit+0x8c>)
 8001110:	f001 fc1a 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_I2C_MspInit+0x88>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_I2C_MspInit+0x88>)
 800111e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_I2C_MspInit+0x88>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40005400 	.word	0x40005400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001154:	d10d      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_TIM_Base_MspInit+0x3c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_TIM_Base_MspInit+0x3c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_TIM_Base_MspInit+0x3c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_UART_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12b      	bne.n	80011fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_UART_MspInit+0x88>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_UART_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_UART_MspInit+0x88>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_UART_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011de:	230c      	movs	r3, #12
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ee:	2307      	movs	r3, #7
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_UART_MspInit+0x8c>)
 80011fa:	f001 fba5 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004400 	.word	0x40004400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f8f6 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA1_Stream5_IRQHandler+0x10>)
 8001276:	f001 f8ff 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000014c 	.word	0x2000014c

08001284 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA2_Stream0_IRQHandler+0x10>)
 800128a:	f001 f8f5 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000d8 	.word	0x200000d8

08001298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_kill>:

int _kill(int pid, int sig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012b2:	f004 f9db 	bl	800566c <__errno>
 80012b6:	4602      	mov	r2, r0
 80012b8:	2316      	movs	r3, #22
 80012ba:	6013      	str	r3, [r2, #0]
	return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_exit>:

void _exit (int status)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffe7 	bl	80012a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012da:	e7fe      	b.n	80012da <_exit+0x12>

080012dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x50>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x16>
		heap_end = &end;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <_sbrk+0x50>)
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <_sbrk+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <_sbrk+0x50>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <_sbrk+0x50>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	466a      	mov	r2, sp
 8001302:	4293      	cmp	r3, r2
 8001304:	d907      	bls.n	8001316 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001306:	f004 f9b1 	bl	800566c <__errno>
 800130a:	4602      	mov	r2, r0
 800130c:	230c      	movs	r3, #12
 800130e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	e006      	b.n	8001324 <_sbrk+0x48>
	}

	heap_end += incr;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <_sbrk+0x50>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <_sbrk+0x50>)
 8001320:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20002a98 	.word	0x20002a98
 8001330:	20002ab0 	.word	0x20002ab0

08001334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <SystemInit+0x28>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <SystemInit+0x28>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <SystemInit+0x28>)
 800134a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800134e:	609a      	str	r2, [r3, #8]
#endif
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001364:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001366:	e003      	b.n	8001370 <LoopCopyDataInit>

08001368 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800136a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800136c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800136e:	3104      	adds	r1, #4

08001370 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001374:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001378:	d3f6      	bcc.n	8001368 <CopyDataInit>
  ldr  r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800137c:	e002      	b.n	8001384 <LoopFillZerobss>

0800137e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800137e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001380:	f842 3b04 	str.w	r3, [r2], #4

08001384 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001386:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001388:	d3f9      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800138a:	f7ff ffd3 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f004 f973 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff f983 	bl	800069c <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800139c:	08005ec4 	.word	0x08005ec4
  ldr  r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013a4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80013a8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80013ac:	20002ab0 	.word	0x20002ab0

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 fd3d 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fd4a 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fd55 	bl	8001ec6 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 fd1d 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000004 	.word	0x20000004
 8001450:	2000000c 	.word	0x2000000c
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000000c 	.word	0x2000000c
 800147c:	20002aa8 	.word	0x20002aa8

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20002aa8 	.word	0x20002aa8

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_Delay+0x40>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000000c 	.word	0x2000000c

080014dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e033      	b.n	800155a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fce8 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001522:	f023 0302 	bic.w	r3, r3, #2
 8001526:	f043 0202 	orr.w	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fa46 	bl	80019c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
 800154a:	e001      	b.n	8001550 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Start_DMA+0x1e>
 800157e:	2302      	movs	r3, #2
 8001580:	e0cc      	b.n	800171c <HAL_ADC_Start_DMA+0x1b8>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d018      	beq.n	80015ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a8:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <HAL_ADC_Start_DMA+0x1c0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a5e      	ldr	r2, [pc, #376]	; (8001728 <HAL_ADC_Start_DMA+0x1c4>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f040 80a0 	bne.w	800171a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001618:	d106      	bne.n	8001628 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f023 0206 	bic.w	r2, r3, #6
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
 8001626:	e002      	b.n	800162e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_ADC_Start_DMA+0x1c8>)
 8001638:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	4a3c      	ldr	r2, [pc, #240]	; (8001730 <HAL_ADC_Start_DMA+0x1cc>)
 8001640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_ADC_Start_DMA+0x1d0>)
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	4a3a      	ldr	r2, [pc, #232]	; (8001738 <HAL_ADC_Start_DMA+0x1d4>)
 8001650:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800165a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800166a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	334c      	adds	r3, #76	; 0x4c
 8001686:	4619      	mov	r1, r3
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f000 fe9c 	bl	80023c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12a      	bne.n	80016f2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <HAL_ADC_Start_DMA+0x1d8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d015      	beq.n	80016d2 <HAL_ADC_Start_DMA+0x16e>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a25      	ldr	r2, [pc, #148]	; (8001740 <HAL_ADC_Start_DMA+0x1dc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_Start_DMA+0x158>
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_ADC_Start_DMA+0x1c8>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a20      	ldr	r2, [pc, #128]	; (8001744 <HAL_ADC_Start_DMA+0x1e0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d129      	bne.n	800171a <HAL_ADC_Start_DMA+0x1b6>
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_ADC_Start_DMA+0x1c8>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	d823      	bhi.n	800171a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d11c      	bne.n	800171a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e013      	b.n	800171a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <HAL_ADC_Start_DMA+0x1d8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d10e      	bne.n	800171a <HAL_ADC_Start_DMA+0x1b6>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001718:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000004 	.word	0x20000004
 8001728:	431bde83 	.word	0x431bde83
 800172c:	40012300 	.word	0x40012300
 8001730:	08001bb9 	.word	0x08001bb9
 8001734:	08001c73 	.word	0x08001c73
 8001738:	08001c8f 	.word	0x08001c8f
 800173c:	40012000 	.word	0x40012000
 8001740:	40012100 	.word	0x40012100
 8001744:	40012200 	.word	0x40012200

08001748 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1c>
 8001774:	2302      	movs	r3, #2
 8001776:	e113      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x244>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d925      	bls.n	80017d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68d9      	ldr	r1, [r3, #12]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	3b1e      	subs	r3, #30
 800179e:	2207      	movs	r2, #7
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43da      	mvns	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	400a      	ands	r2, r1
 80017ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68d9      	ldr	r1, [r3, #12]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4403      	add	r3, r0
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	409a      	lsls	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e022      	b.n	800181a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	2207      	movs	r2, #7
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	400a      	ands	r2, r1
 80017f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6919      	ldr	r1, [r3, #16]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	4603      	mov	r3, r0
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4403      	add	r3, r0
 8001810:	409a      	lsls	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b06      	cmp	r3, #6
 8001820:	d824      	bhi.n	800186c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b05      	subs	r3, #5
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	400a      	ands	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	3b05      	subs	r3, #5
 800185e:	fa00 f203 	lsl.w	r2, r0, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
 800186a:	e04c      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d824      	bhi.n	80018be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b23      	subs	r3, #35	; 0x23
 8001886:	221f      	movs	r2, #31
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43da      	mvns	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	400a      	ands	r2, r1
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b23      	subs	r3, #35	; 0x23
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
 80018bc:	e023      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b41      	subs	r3, #65	; 0x41
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	400a      	ands	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b41      	subs	r3, #65	; 0x41
 80018fa:	fa00 f203 	lsl.w	r2, r0, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_ADC_ConfigChannel+0x250>)
 8001908:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a28      	ldr	r2, [pc, #160]	; (80019b0 <HAL_ADC_ConfigChannel+0x254>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d10f      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x1d8>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b12      	cmp	r3, #18
 800191a:	d10b      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_ADC_ConfigChannel+0x254>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x23a>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <HAL_ADC_ConfigChannel+0x258>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x1f4>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b11      	cmp	r3, #17
 800194e:	d122      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_ADC_ConfigChannel+0x258>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d111      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_ADC_ConfigChannel+0x25c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a11      	ldr	r2, [pc, #68]	; (80019bc <HAL_ADC_ConfigChannel+0x260>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9a      	lsrs	r2, r3, #18
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001988:	e002      	b.n	8001990 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3b01      	subs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40012300 	.word	0x40012300
 80019b0:	40012000 	.word	0x40012000
 80019b4:	10000012 	.word	0x10000012
 80019b8:	20000004 	.word	0x20000004
 80019bc:	431bde83 	.word	0x431bde83

080019c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c8:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <ADC_Init+0x1f0>)
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	021a      	lsls	r2, r3, #8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6899      	ldr	r1, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <ADC_Init+0x1f4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d022      	beq.n	8001a9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6899      	ldr	r1, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6899      	ldr	r1, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	e00f      	b.n	8001abe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001abc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0202 	bic.w	r2, r2, #2
 8001acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6899      	ldr	r1, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7e1b      	ldrb	r3, [r3, #24]
 8001ad8:	005a      	lsls	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001afa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	3b01      	subs	r3, #1
 8001b18:	035a      	lsls	r2, r3, #13
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e007      	b.n	8001b34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	051a      	lsls	r2, r3, #20
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6899      	ldr	r1, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b76:	025a      	lsls	r2, r3, #9
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6899      	ldr	r1, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	029a      	lsls	r2, r3, #10
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	609a      	str	r2, [r3, #8]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40012300 	.word	0x40012300
 8001bb4:	0f000001 	.word	0x0f000001

08001bb8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13c      	bne.n	8001c4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12b      	bne.n	8001c44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d127      	bne.n	8001c44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d119      	bne.n	8001c44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0220 	bic.w	r2, r2, #32
 8001c1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7fe fc7d 	bl	8000544 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c4a:	e00e      	b.n	8001c6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fd75 	bl	8001748 <HAL_ADC_ErrorCallback>
}
 8001c5e:	e004      	b.n	8001c6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7fe fc47 	bl	8000514 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f043 0204 	orr.w	r2, r3, #4
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff fd4a 	bl	8001748 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff29 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff3e 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff8e 	bl	8001db0 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5d 	bl	8001d5c <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff31 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e014      	b.n	8001f1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	791b      	ldrb	r3, [r3, #4]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff f85d 	bl	8000fc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	795b      	ldrb	r3, [r3, #5]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_DAC_Start_DMA+0x1e>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e08e      	b.n	8002060 <HAL_DAC_Start_DMA+0x13c>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d12a      	bne.n	8001faa <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a43      	ldr	r2, [pc, #268]	; (8002068 <HAL_DAC_Start_DMA+0x144>)
 8001f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a42      	ldr	r2, [pc, #264]	; (800206c <HAL_DAC_Start_DMA+0x148>)
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a41      	ldr	r2, [pc, #260]	; (8002070 <HAL_DAC_Start_DMA+0x14c>)
 8001f6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f7a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d009      	beq.n	8001f96 <HAL_DAC_Start_DMA+0x72>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d00c      	beq.n	8001fa0 <HAL_DAC_Start_DMA+0x7c>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d000      	beq.n	8001f8c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001f8a:	e039      	b.n	8002000 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3308      	adds	r3, #8
 8001f92:	617b      	str	r3, [r7, #20]
        break;
 8001f94:	e034      	b.n	8002000 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	330c      	adds	r3, #12
 8001f9c:	617b      	str	r3, [r7, #20]
        break;
 8001f9e:	e02f      	b.n	8002000 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3310      	adds	r3, #16
 8001fa6:	617b      	str	r3, [r7, #20]
        break;
 8001fa8:	e02a      	b.n	8002000 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_DAC_Start_DMA+0x150>)
 8001fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	4a30      	ldr	r2, [pc, #192]	; (8002078 <HAL_DAC_Start_DMA+0x154>)
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4a2f      	ldr	r2, [pc, #188]	; (800207c <HAL_DAC_Start_DMA+0x158>)
 8001fc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d009      	beq.n	8001fec <HAL_DAC_Start_DMA+0xc8>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d00c      	beq.n	8001ff6 <HAL_DAC_Start_DMA+0xd2>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d000      	beq.n	8001fe2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001fe0:	e00e      	b.n	8002000 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	617b      	str	r3, [r7, #20]
        break;
 8001fea:	e009      	b.n	8002000 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	617b      	str	r3, [r7, #20]
        break;
 8001ff4:	e004      	b.n	8002000 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	617b      	str	r3, [r7, #20]
        break;
 8001ffe:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002014:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6898      	ldr	r0, [r3, #8]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	f000 f9d2 	bl	80023c8 <HAL_DMA_Start_IT>
 8002024:	e00e      	b.n	8002044 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002034:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	68d8      	ldr	r0, [r3, #12]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	f000 f9c2 	bl	80023c8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	08002157 	.word	0x08002157
 800206c:	08002179 	.word	0x08002179
 8002070:	08002195 	.word	0x08002195
 8002074:	080021ff 	.word	0x080021ff
 8002078:	08002221 	.word	0x08002221
 800207c:	0800223d 	.word	0x0800223d

08002080 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	795b      	ldrb	r3, [r3, #5]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_DAC_ConfigChannel+0x20>
 80020d8:	2302      	movs	r3, #2
 80020da:	e036      	b.n	800214a <HAL_DAC_ConfigChannel+0x8e>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2202      	movs	r2, #2
 80020e6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80020f0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4013      	ands	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	22c0      	movs	r2, #192	; 0xc0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff ff8b 	bl	8002080 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	711a      	strb	r2, [r3, #4]
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff ff84 	bl	8002094 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f043 0204 	orr.w	r2, r3, #4
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff ff7a 	bl	80020a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	711a      	strb	r2, [r3, #4]
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7ff ffd8 	bl	80021c2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	711a      	strb	r2, [r3, #4]
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7ff ffd1 	bl	80021d6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f043 0204 	orr.w	r2, r3, #4
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff ffc7 	bl	80021ea <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	711a      	strb	r2, [r3, #4]
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff f902 	bl	8001480 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e099      	b.n	80023bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	e00f      	b.n	80022ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022aa:	f7ff f8e9 	bl	8001480 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d908      	bls.n	80022ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e078      	b.n	80023bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e8      	bne.n	80022aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_DMA_Init+0x158>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4313      	orrs	r3, r2
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0307 	bic.w	r3, r3, #7
 800234a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b04      	cmp	r3, #4
 800235c:	d117      	bne.n	800238e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fa6f 	bl	8002854 <DMA_CheckFifoParam>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800238a:	2301      	movs	r3, #1
 800238c:	e016      	b.n	80023bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa26 	bl	80027e8 <DMA_CalcBaseAndBitshift>
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f010803f 	.word	0xf010803f

080023c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_DMA_Start_IT+0x26>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e040      	b.n	8002470 <HAL_DMA_Start_IT+0xa8>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12f      	bne.n	8002462 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f9b8 	bl	800278c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	223f      	movs	r2, #63	; 0x3f
 8002422:	409a      	lsls	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0216 	orr.w	r2, r2, #22
 8002436:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0208 	orr.w	r2, r2, #8
 800244e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e005      	b.n	800246e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246a:	2302      	movs	r3, #2
 800246c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002484:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_DMA_IRQHandler+0x258>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a92      	ldr	r2, [pc, #584]	; (80026d4 <HAL_DMA_IRQHandler+0x25c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2208      	movs	r2, #8
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01a      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2208      	movs	r2, #8
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2204      	movs	r2, #4
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2204      	movs	r2, #4
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2210      	movs	r2, #16
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d043      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03c      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2210      	movs	r2, #16
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d018      	beq.n	80025ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e01f      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0208 	bic.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2220      	movs	r2, #32
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 808e 	beq.w	8002716 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8086 	beq.w	8002716 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2220      	movs	r2, #32
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d136      	bne.n	8002690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0216 	bic.w	r2, r2, #22
 8002630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_DMA_IRQHandler+0x1da>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07d      	beq.n	8002782 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
        }
        return;
 800268e:	e078      	b.n	8002782 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01c      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d108      	bne.n	80026be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d030      	beq.n	8002716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e02b      	b.n	8002716 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d027      	beq.n	8002716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
 80026ce:	e022      	b.n	8002716 <HAL_DMA_IRQHandler+0x29e>
 80026d0:	20000004 	.word	0x20000004
 80026d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0210 	bic.w	r2, r2, #16
 80026f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	2b00      	cmp	r3, #0
 800271c:	d032      	beq.n	8002784 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d022      	beq.n	8002770 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2205      	movs	r2, #5
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3301      	adds	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	429a      	cmp	r2, r3
 800274c:	d307      	bcc.n	800275e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f2      	bne.n	8002742 <HAL_DMA_IRQHandler+0x2ca>
 800275c:	e000      	b.n	8002760 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800275e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e000      	b.n	8002784 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002782:	bf00      	nop
    }
  }
}
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop

0800278c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d108      	bne.n	80027cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ca:	e007      	b.n	80027dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	3b10      	subs	r3, #16
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <DMA_CalcBaseAndBitshift+0x64>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <DMA_CalcBaseAndBitshift+0x68>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d909      	bls.n	800282a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	1d1a      	adds	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
 8002828:	e007      	b.n	800283a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	aaaaaaab 	.word	0xaaaaaaab
 8002850:	08005950 	.word	0x08005950

08002854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11f      	bne.n	80028ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d855      	bhi.n	8002920 <DMA_CheckFifoParam+0xcc>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <DMA_CheckFifoParam+0x28>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	0800288d 	.word	0x0800288d
 8002880:	0800289f 	.word	0x0800289f
 8002884:	0800288d 	.word	0x0800288d
 8002888:	08002921 	.word	0x08002921
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d045      	beq.n	8002924 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289c:	e042      	b.n	8002924 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a6:	d13f      	bne.n	8002928 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e03c      	b.n	8002928 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d121      	bne.n	80028fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d836      	bhi.n	800292c <DMA_CheckFifoParam+0xd8>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <DMA_CheckFifoParam+0x70>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028db 	.word	0x080028db
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	080028ed 	.word	0x080028ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e02f      	b.n	800293a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d024      	beq.n	8002930 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ea:	e021      	b.n	8002930 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f4:	d11e      	bne.n	8002934 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028fa:	e01b      	b.n	8002934 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d902      	bls.n	8002908 <DMA_CheckFifoParam+0xb4>
 8002902:	2b03      	cmp	r3, #3
 8002904:	d003      	beq.n	800290e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002906:	e018      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e015      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      break;
 800291e:	e00b      	b.n	8002938 <DMA_CheckFifoParam+0xe4>
      break;
 8002920:	bf00      	nop
 8002922:	e00a      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002924:	bf00      	nop
 8002926:	e008      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002928:	bf00      	nop
 800292a:	e006      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 800292c:	bf00      	nop
 800292e:	e004      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002930:	bf00      	nop
 8002932:	e002      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;   
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002938:	bf00      	nop
    }
  } 
  
  return status; 
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e165      	b.n	8002c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8154 	bne.w	8002c2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d00b      	beq.n	80029a2 <HAL_GPIO_Init+0x5a>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002996:	2b11      	cmp	r3, #17
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b12      	cmp	r3, #18
 80029a0:	d130      	bne.n	8002a04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d8:	2201      	movs	r2, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 0201 	and.w	r2, r3, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0xfc>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b12      	cmp	r3, #18
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80ae 	beq.w	8002c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <HAL_GPIO_Init+0x2fc>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	; (8002c44 <HAL_GPIO_Init+0x2fc>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_GPIO_Init+0x2fc>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aea:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4e      	ldr	r2, [pc, #312]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x21a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_GPIO_Init+0x308>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x216>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4c      	ldr	r2, [pc, #304]	; (8002c54 <HAL_GPIO_Init+0x30c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x212>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4b      	ldr	r2, [pc, #300]	; (8002c58 <HAL_GPIO_Init+0x310>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x20e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4a      	ldr	r2, [pc, #296]	; (8002c5c <HAL_GPIO_Init+0x314>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x20a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a49      	ldr	r2, [pc, #292]	; (8002c60 <HAL_GPIO_Init+0x318>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a48      	ldr	r2, [pc, #288]	; (8002c64 <HAL_GPIO_Init+0x31c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x202>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4934      	ldr	r1, [pc, #208]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba6:	4a30      	ldr	r2, [pc, #192]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd0:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae96 	bls.w	8002964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3724      	adds	r7, #36	; 0x24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40021400 	.word	0x40021400
 8002c64:	40021800 	.word	0x40021800
 8002c68:	40013c00 	.word	0x40013c00

08002c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e001      	b.n	8002c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb8:	e003      	b.n	8002cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d104      	bne.n	8002cf2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	041a      	lsls	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e11f      	b.n	8002f56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe f9c2 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2224      	movs	r2, #36	; 0x24
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d68:	f000 fe2c 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8002d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a7b      	ldr	r2, [pc, #492]	; (8002f60 <HAL_I2C_Init+0x25c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d807      	bhi.n	8002d88 <HAL_I2C_Init+0x84>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a7a      	ldr	r2, [pc, #488]	; (8002f64 <HAL_I2C_Init+0x260>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	bf94      	ite	ls
 8002d80:	2301      	movls	r3, #1
 8002d82:	2300      	movhi	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e006      	b.n	8002d96 <HAL_I2C_Init+0x92>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a77      	ldr	r2, [pc, #476]	; (8002f68 <HAL_I2C_Init+0x264>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	bf94      	ite	ls
 8002d90:	2301      	movls	r3, #1
 8002d92:	2300      	movhi	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0db      	b.n	8002f56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4a72      	ldr	r2, [pc, #456]	; (8002f6c <HAL_I2C_Init+0x268>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0c9b      	lsrs	r3, r3, #18
 8002da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4a64      	ldr	r2, [pc, #400]	; (8002f60 <HAL_I2C_Init+0x25c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d802      	bhi.n	8002dd8 <HAL_I2C_Init+0xd4>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	e009      	b.n	8002dec <HAL_I2C_Init+0xe8>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	4a63      	ldr	r2, [pc, #396]	; (8002f70 <HAL_I2C_Init+0x26c>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	3301      	adds	r3, #1
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4956      	ldr	r1, [pc, #344]	; (8002f60 <HAL_I2C_Init+0x25c>)
 8002e08:	428b      	cmp	r3, r1
 8002e0a:	d80d      	bhi.n	8002e28 <HAL_I2C_Init+0x124>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e59      	subs	r1, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	bf38      	it	cc
 8002e24:	2304      	movcc	r3, #4
 8002e26:	e04f      	b.n	8002ec8 <HAL_I2C_Init+0x1c4>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <HAL_I2C_Init+0x150>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e012      	b.n	8002e7a <HAL_I2C_Init+0x176>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	0099      	lsls	r1, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Init+0x17e>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e022      	b.n	8002ec8 <HAL_I2C_Init+0x1c4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <HAL_I2C_Init+0x1a4>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e58      	subs	r0, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	440b      	add	r3, r1
 8002e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	e00f      	b.n	8002ec8 <HAL_I2C_Init+0x1c4>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	6809      	ldr	r1, [r1, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6911      	ldr	r1, [r2, #16]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	4311      	orrs	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	000186a0 	.word	0x000186a0
 8002f64:	001e847f 	.word	0x001e847f
 8002f68:	003d08ff 	.word	0x003d08ff
 8002f6c:	431bde83 	.word	0x431bde83
 8002f70:	10624dd3 	.word	0x10624dd3

08002f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	817b      	strh	r3, [r7, #10]
 8002f84:	4613      	mov	r3, r2
 8002f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7fe fa7a 	bl	8001480 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	f040 80e0 	bne.w	800315c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2319      	movs	r3, #25
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4970      	ldr	r1, [pc, #448]	; (8003168 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fa92 	bl	80034d0 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0d3      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_Master_Transmit+0x50>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0cc      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d007      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2210      	movs	r2, #16
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	893a      	ldrh	r2, [r7, #8]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_I2C_Master_Transmit+0x1f8>)
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800302c:	8979      	ldrh	r1, [r7, #10]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f9ca 	bl	80033cc <I2C_MasterRequestWrite>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e08d      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003058:	e066      	b.n	8003128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fb0c 	bl	800367c <I2C_WaitOnTXEFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b04      	cmp	r3, #4
 8003070:	d107      	bne.n	8003082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06b      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d11b      	bne.n	80030fc <HAL_I2C_Master_Transmit+0x188>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d017      	beq.n	80030fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	6a39      	ldr	r1, [r7, #32]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fafc 	bl	80036fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b04      	cmp	r3, #4
 8003112:	d107      	bne.n	8003124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e01a      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	d194      	bne.n	800305a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	00100002 	.word	0x00100002
 800316c:	ffff0000 	.word	0xffff0000

08003170 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	460b      	mov	r3, r1
 800317e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7fe f97e 	bl	8001480 <HAL_GetTick>
 8003184:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003186:	2301      	movs	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 8110 	bne.w	80033b8 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2319      	movs	r3, #25
 800319e:	2201      	movs	r2, #1
 80031a0:	4988      	ldr	r1, [pc, #544]	; (80033c4 <HAL_I2C_IsDeviceReady+0x254>)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f994 	bl	80034d0 <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	e103      	b.n	80033ba <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_I2C_IsDeviceReady+0x50>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0fc      	b.n	80033ba <HAL_I2C_IsDeviceReady+0x24a>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d007      	beq.n	80031e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2224      	movs	r2, #36	; 0x24
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a70      	ldr	r2, [pc, #448]	; (80033c8 <HAL_I2C_IsDeviceReady+0x258>)
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003218:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f952 	bl	80034d0 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0b6      	b.n	80033ba <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800325a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800325c:	f7fe f910 	bl	8001480 <HAL_GetTick>
 8003260:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003290:	e025      	b.n	80032de <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fe f8f5 	bl	8001480 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <HAL_I2C_IsDeviceReady+0x138>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	22a0      	movs	r2, #160	; 0xa0
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2ba0      	cmp	r3, #160	; 0xa0
 80032e8:	d005      	beq.n	80032f6 <HAL_I2C_IsDeviceReady+0x186>
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_I2C_IsDeviceReady+0x186>
 80032f0:	7dbb      	ldrb	r3, [r7, #22]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0cd      	beq.n	8003292 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d129      	bne.n	8003360 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2319      	movs	r3, #25
 8003338:	2201      	movs	r2, #1
 800333a:	4922      	ldr	r1, [pc, #136]	; (80033c4 <HAL_I2C_IsDeviceReady+0x254>)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f8c7 	bl	80034d0 <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e036      	b.n	80033ba <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e02c      	b.n	80033ba <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003378:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2319      	movs	r3, #25
 8003380:	2201      	movs	r2, #1
 8003382:	4910      	ldr	r1, [pc, #64]	; (80033c4 <HAL_I2C_IsDeviceReady+0x254>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f8a3 	bl	80034d0 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e012      	b.n	80033ba <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	3301      	adds	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	429a      	cmp	r2, r3
 80033a0:	f4ff af33 	bcc.w	800320a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	00100002 	.word	0x00100002
 80033c8:	ffff0000 	.word	0xffff0000

080033cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	460b      	mov	r3, r1
 80033da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d006      	beq.n	80033f6 <I2C_MasterRequestWrite+0x2a>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d003      	beq.n	80033f6 <I2C_MasterRequestWrite+0x2a>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f4:	d108      	bne.n	8003408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e00b      	b.n	8003420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b12      	cmp	r3, #18
 800340e:	d107      	bne.n	8003420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f84f 	bl	80034d0 <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00c      	beq.n	8003452 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e035      	b.n	80034be <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800345a:	d108      	bne.n	800346e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345c:	897b      	ldrh	r3, [r7, #10]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800346a:	611a      	str	r2, [r3, #16]
 800346c:	e01b      	b.n	80034a6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	11db      	asrs	r3, r3, #7
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0306 	and.w	r3, r3, #6
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f063 030f 	orn	r3, r3, #15
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	490f      	ldr	r1, [pc, #60]	; (80034c8 <I2C_MasterRequestWrite+0xfc>)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f876 	bl	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e010      	b.n	80034be <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <I2C_MasterRequestWrite+0x100>)
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f866 	bl	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	00010008 	.word	0x00010008
 80034cc:	00010002 	.word	0x00010002

080034d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e0:	e025      	b.n	800352e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d021      	beq.n	800352e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ea:	f7fd ffc9 	bl	8001480 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d302      	bcc.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d116      	bne.n	800352e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e023      	b.n	8003576 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10d      	bne.n	8003554 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	e00c      	b.n	800356e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d0b6      	beq.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800358c:	e051      	b.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359c:	d123      	bne.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e046      	b.n	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d021      	beq.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fd ff47 	bl	8001480 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d116      	bne.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e020      	b.n	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10c      	bne.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf14      	ite	ne
 800364e:	2301      	movne	r3, #1
 8003650:	2300      	moveq	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	e00b      	b.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	43da      	mvns	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d18d      	bne.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003688:	e02d      	b.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f878 	bl	8003780 <I2C_IsAcknowledgeFailed>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e02d      	b.n	80036f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d021      	beq.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fd feed 	bl	8001480 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e007      	b.n	80036f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f0:	2b80      	cmp	r3, #128	; 0x80
 80036f2:	d1ca      	bne.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800370a:	e02d      	b.n	8003768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f837 	bl	8003780 <I2C_IsAcknowledgeFailed>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e02d      	b.n	8003778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d021      	beq.n	8003768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003724:	f7fd feac 	bl	8001480 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d116      	bne.n	8003768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e007      	b.n	8003778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d1ca      	bne.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d11b      	bne.n	80037d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 0204 	orr.w	r2, r3, #4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0cc      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f4:	4b68      	ldr	r3, [pc, #416]	; (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d90c      	bls.n	800381c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0b8      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003834:	4b59      	ldr	r3, [pc, #356]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a58      	ldr	r2, [pc, #352]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800383e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a52      	ldr	r2, [pc, #328]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	494d      	ldr	r1, [pc, #308]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d044      	beq.n	8003900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d119      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07f      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d003      	beq.n	800389e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	2b03      	cmp	r3, #3
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389e:	4b3f      	ldr	r3, [pc, #252]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e06f      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e067      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f023 0203 	bic.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4934      	ldr	r1, [pc, #208]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d0:	f7fd fdd6 	bl	8001480 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fd fdd2 	bl	8001480 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e04f      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 020c 	and.w	r2, r3, #12
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d1eb      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d20c      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e032      	b.n	800398e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4916      	ldr	r1, [pc, #88]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	490e      	ldr	r1, [pc, #56]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003966:	f000 f855 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 800396a:	4601      	mov	r1, r0
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	fa21 f303 	lsr.w	r3, r1, r3
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fd36 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023c00 	.word	0x40023c00
 800399c:	40023800 	.word	0x40023800
 80039a0:	08005938 	.word	0x08005938
 80039a4:	20000004 	.word	0x20000004
 80039a8:	20000008 	.word	0x20000008

080039ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039c8:	f7ff fff0 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039cc:	4601      	mov	r1, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0a9b      	lsrs	r3, r3, #10
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	08005948 	.word	0x08005948

080039ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039f0:	f7ff ffdc 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039f4:	4601      	mov	r1, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0b5b      	lsrs	r3, r3, #13
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	08005948 	.word	0x08005948

08003a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a2e:	4bc6      	ldr	r3, [pc, #792]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	f200 817e 	bhi.w	8003d38 <HAL_RCC_GetSysClockFreq+0x324>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_RCC_GetSysClockFreq+0x30>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003d39 	.word	0x08003d39
 8003a4c:	08003d39 	.word	0x08003d39
 8003a50:	08003d39 	.word	0x08003d39
 8003a54:	08003a7f 	.word	0x08003a7f
 8003a58:	08003d39 	.word	0x08003d39
 8003a5c:	08003d39 	.word	0x08003d39
 8003a60:	08003d39 	.word	0x08003d39
 8003a64:	08003a85 	.word	0x08003a85
 8003a68:	08003d39 	.word	0x08003d39
 8003a6c:	08003d39 	.word	0x08003d39
 8003a70:	08003d39 	.word	0x08003d39
 8003a74:	08003be1 	.word	0x08003be1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4bb4      	ldr	r3, [pc, #720]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x338>)
 8003a7a:	613b      	str	r3, [r7, #16]
       break;
 8003a7c:	e15f      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7e:	4bb4      	ldr	r3, [pc, #720]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003a80:	613b      	str	r3, [r7, #16]
      break;
 8003a82:	e15c      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4bb0      	ldr	r3, [pc, #704]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8e:	4bae      	ldr	r3, [pc, #696]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04a      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4bab      	ldr	r3, [pc, #684]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	f04f 0400 	mov.w	r4, #0
 8003aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	ea03 0501 	and.w	r5, r3, r1
 8003ab0:	ea04 0602 	and.w	r6, r4, r2
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	f04f 0400 	mov.w	r4, #0
 8003ac0:	0154      	lsls	r4, r2, #5
 8003ac2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ac6:	014b      	lsls	r3, r1, #5
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4622      	mov	r2, r4
 8003acc:	1b49      	subs	r1, r1, r5
 8003ace:	eb62 0206 	sbc.w	r2, r2, r6
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f04f 0400 	mov.w	r4, #0
 8003ada:	0194      	lsls	r4, r2, #6
 8003adc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ae0:	018b      	lsls	r3, r1, #6
 8003ae2:	1a5b      	subs	r3, r3, r1
 8003ae4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	00e2      	lsls	r2, r4, #3
 8003af2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003af6:	00d9      	lsls	r1, r3, #3
 8003af8:	460b      	mov	r3, r1
 8003afa:	4614      	mov	r4, r2
 8003afc:	195b      	adds	r3, r3, r5
 8003afe:	eb44 0406 	adc.w	r4, r4, r6
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	0262      	lsls	r2, r4, #9
 8003b0c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b10:	0259      	lsls	r1, r3, #9
 8003b12:	460b      	mov	r3, r1
 8003b14:	4614      	mov	r4, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f04f 0400 	mov.w	r4, #0
 8003b20:	461a      	mov	r2, r3
 8003b22:	4623      	mov	r3, r4
 8003b24:	f7fc fb76 	bl	8000214 <__aeabi_uldivmod>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	e049      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4b85      	ldr	r3, [pc, #532]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	f04f 0400 	mov.w	r4, #0
 8003b3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	ea03 0501 	and.w	r5, r3, r1
 8003b46:	ea04 0602 	and.w	r6, r4, r2
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4632      	mov	r2, r6
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f04f 0400 	mov.w	r4, #0
 8003b56:	0154      	lsls	r4, r2, #5
 8003b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b5c:	014b      	lsls	r3, r1, #5
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4622      	mov	r2, r4
 8003b62:	1b49      	subs	r1, r1, r5
 8003b64:	eb62 0206 	sbc.w	r2, r2, r6
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	0194      	lsls	r4, r2, #6
 8003b72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b76:	018b      	lsls	r3, r1, #6
 8003b78:	1a5b      	subs	r3, r3, r1
 8003b7a:	eb64 0402 	sbc.w	r4, r4, r2
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	00e2      	lsls	r2, r4, #3
 8003b88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b8c:	00d9      	lsls	r1, r3, #3
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4614      	mov	r4, r2
 8003b92:	195b      	adds	r3, r3, r5
 8003b94:	eb44 0406 	adc.w	r4, r4, r6
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	02a2      	lsls	r2, r4, #10
 8003ba2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ba6:	0299      	lsls	r1, r3, #10
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4614      	mov	r4, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	4621      	mov	r1, r4
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4623      	mov	r3, r4
 8003bba:	f7fc fb2b 	bl	8000214 <__aeabi_uldivmod>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc4:	4b60      	ldr	r3, [pc, #384]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	613b      	str	r3, [r7, #16]
      break;
 8003bde:	e0ae      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b59      	ldr	r3, [pc, #356]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bea:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d04a      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b54      	ldr	r3, [pc, #336]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	f04f 0400 	mov.w	r4, #0
 8003c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	ea03 0501 	and.w	r5, r3, r1
 8003c0c:	ea04 0602 	and.w	r6, r4, r2
 8003c10:	4629      	mov	r1, r5
 8003c12:	4632      	mov	r2, r6
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	0154      	lsls	r4, r2, #5
 8003c1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c22:	014b      	lsls	r3, r1, #5
 8003c24:	4619      	mov	r1, r3
 8003c26:	4622      	mov	r2, r4
 8003c28:	1b49      	subs	r1, r1, r5
 8003c2a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	f04f 0400 	mov.w	r4, #0
 8003c36:	0194      	lsls	r4, r2, #6
 8003c38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c3c:	018b      	lsls	r3, r1, #6
 8003c3e:	1a5b      	subs	r3, r3, r1
 8003c40:	eb64 0402 	sbc.w	r4, r4, r2
 8003c44:	f04f 0100 	mov.w	r1, #0
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	00e2      	lsls	r2, r4, #3
 8003c4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c52:	00d9      	lsls	r1, r3, #3
 8003c54:	460b      	mov	r3, r1
 8003c56:	4614      	mov	r4, r2
 8003c58:	195b      	adds	r3, r3, r5
 8003c5a:	eb44 0406 	adc.w	r4, r4, r6
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	0262      	lsls	r2, r4, #9
 8003c68:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c6c:	0259      	lsls	r1, r3, #9
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	4621      	mov	r1, r4
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f04f 0400 	mov.w	r4, #0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	f7fc fac8 	bl	8000214 <__aeabi_uldivmod>
 8003c84:	4603      	mov	r3, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e049      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	ea03 0501 	and.w	r5, r3, r1
 8003ca2:	ea04 0602 	and.w	r6, r4, r2
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4632      	mov	r2, r6
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	f04f 0400 	mov.w	r4, #0
 8003cb2:	0154      	lsls	r4, r2, #5
 8003cb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cb8:	014b      	lsls	r3, r1, #5
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	1b49      	subs	r1, r1, r5
 8003cc0:	eb62 0206 	sbc.w	r2, r2, r6
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	f04f 0400 	mov.w	r4, #0
 8003ccc:	0194      	lsls	r4, r2, #6
 8003cce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cd2:	018b      	lsls	r3, r1, #6
 8003cd4:	1a5b      	subs	r3, r3, r1
 8003cd6:	eb64 0402 	sbc.w	r4, r4, r2
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	00e2      	lsls	r2, r4, #3
 8003ce4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ce8:	00d9      	lsls	r1, r3, #3
 8003cea:	460b      	mov	r3, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	195b      	adds	r3, r3, r5
 8003cf0:	eb44 0406 	adc.w	r4, r4, r6
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	02a2      	lsls	r2, r4, #10
 8003cfe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d02:	0299      	lsls	r1, r3, #10
 8003d04:	460b      	mov	r3, r1
 8003d06:	4614      	mov	r4, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f04f 0400 	mov.w	r4, #0
 8003d12:	461a      	mov	r2, r3
 8003d14:	4623      	mov	r3, r4
 8003d16:	f7fc fa7d 	bl	8000214 <__aeabi_uldivmod>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0f1b      	lsrs	r3, r3, #28
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	613b      	str	r3, [r7, #16]
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x338>)
 8003d3a:	613b      	str	r3, [r7, #16]
      break;
 8003d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3e:	693b      	ldr	r3, [r7, #16]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	007a1200 	.word	0x007a1200

08003d54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8083 	beq.w	8003e74 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d6e:	4b95      	ldr	r3, [pc, #596]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d019      	beq.n	8003dae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d7a:	4b92      	ldr	r3, [pc, #584]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d86:	4b8f      	ldr	r3, [pc, #572]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d92:	d00c      	beq.n	8003dae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d94:	4b8b      	ldr	r3, [pc, #556]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d112      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da0:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dae:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d05b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x11e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d157      	bne.n	8003e72 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e216      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x8a>
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a7b      	ldr	r2, [pc, #492]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e01d      	b.n	8003e1a <HAL_RCC_OscConfig+0xc6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCC_OscConfig+0xae>
 8003de8:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a75      	ldr	r2, [pc, #468]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a72      	ldr	r2, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e00b      	b.n	8003e1a <HAL_RCC_OscConfig+0xc6>
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6f      	ldr	r2, [pc, #444]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a6c      	ldr	r2, [pc, #432]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d013      	beq.n	8003e4a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd fb2d 	bl	8001480 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2a:	f7fd fb29 	bl	8001480 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	; 0x64
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1db      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3c:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0xd6>
 8003e48:	e014      	b.n	8003e74 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fb19 	bl	8001480 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e52:	f7fd fb15 	bl	8001480 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b64      	cmp	r3, #100	; 0x64
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1c7      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e64:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0xfe>
 8003e70:	e000      	b.n	8003e74 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d06f      	beq.n	8003f60 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e80:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d017      	beq.n	8003ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e98:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea4:	4b47      	ldr	r3, [pc, #284]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d11c      	bne.n	8003eea <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb0:	4b44      	ldr	r3, [pc, #272]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d116      	bne.n	8003eea <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ebc:	4b41      	ldr	r3, [pc, #260]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x180>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e18f      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4938      	ldr	r1, [pc, #224]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee8:	e03a      	b.n	8003f60 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d020      	beq.n	8003f34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef2:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fac2 	bl	8001480 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fd fabe 	bl	8001480 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e170      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4925      	ldr	r1, [pc, #148]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]
 8003f32:	e015      	b.n	8003f60 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCC_OscConfig+0x274>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fd faa1 	bl	8001480 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fd fa9d 	bl	8001480 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e14f      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d037      	beq.n	8003fdc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d016      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_RCC_OscConfig+0x278>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fd fa81 	bl	8001480 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fd fa7d 	bl	8001480 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e12f      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x22e>
 8003fa0:	e01c      	b.n	8003fdc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_RCC_OscConfig+0x278>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd fa6a 	bl	8001480 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fae:	e00f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd fa66 	bl	8001480 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d908      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e118      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	42470000 	.word	0x42470000
 8003fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	4b8a      	ldr	r3, [pc, #552]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8003fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e9      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8097 	beq.w	8004118 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fee:	4b83      	ldr	r3, [pc, #524]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b7f      	ldr	r3, [pc, #508]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4a7e      	ldr	r2, [pc, #504]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	; 0x40
 800400a:	4b7c      	ldr	r3, [pc, #496]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401a:	4b79      	ldr	r3, [pc, #484]	; (8004200 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d118      	bne.n	8004058 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004026:	4b76      	ldr	r3, [pc, #472]	; (8004200 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a75      	ldr	r2, [pc, #468]	; (8004200 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004032:	f7fd fa25 	bl	8001480 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403a:	f7fd fa21 	bl	8001480 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0d3      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <HAL_RCC_OscConfig+0x4ac>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x31a>
 8004060:	4b66      	ldr	r3, [pc, #408]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a65      	ldr	r2, [pc, #404]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
 800406c:	e01c      	b.n	80040a8 <HAL_RCC_OscConfig+0x354>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b05      	cmp	r3, #5
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x33c>
 8004076:	4b61      	ldr	r3, [pc, #388]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	4a60      	ldr	r2, [pc, #384]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6713      	str	r3, [r2, #112]	; 0x70
 8004082:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6713      	str	r3, [r2, #112]	; 0x70
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0x354>
 8004090:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	4a59      	ldr	r2, [pc, #356]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	4b57      	ldr	r3, [pc, #348]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a56      	ldr	r2, [pc, #344]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 80040a2:	f023 0304 	bic.w	r3, r3, #4
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd f9e6 	bl	8001480 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7fd f9e2 	bl	8001480 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e092      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0ee      	beq.n	80040b8 <HAL_RCC_OscConfig+0x364>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd f9d0 	bl	8001480 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fd f9cc 	bl	8001480 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e07c      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fa:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1ee      	bne.n	80040e4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	4a3a      	ldr	r2, [pc, #232]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d068      	beq.n	80041f2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d060      	beq.n	80041ee <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d145      	bne.n	80041c0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCC_OscConfig+0x4b0>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fd f9a1 	bl	8001480 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004142:	f7fd f99d 	bl	8001480 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e04f      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	019b      	lsls	r3, r3, #6
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	3b01      	subs	r3, #1
 800417a:	041b      	lsls	r3, r3, #16
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	061b      	lsls	r3, r3, #24
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	071b      	lsls	r3, r3, #28
 800418c:	491b      	ldr	r1, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004192:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <HAL_RCC_OscConfig+0x4b0>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fd f972 	bl	8001480 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd f96e 	bl	8001480 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e020      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x44c>
 80041be:	e018      	b.n	80041f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_OscConfig+0x4b0>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fd f95b 	bl	8001480 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fd f957 	bl	8001480 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e009      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_OscConfig+0x4a8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f0      	bne.n	80041ce <HAL_RCC_OscConfig+0x47a>
 80041ec:	e001      	b.n	80041f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	40007000 	.word	0x40007000
 8004204:	42470060 	.word	0x42470060

08004208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e01d      	b.n	8004256 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc ff88 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 f8e4 	bl	8004414 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d007      	beq.n	8004290 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_TIM_ConfigClockSource+0x18>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0a6      	b.n	800440c <HAL_TIM_ConfigClockSource+0x166>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d067      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x120>
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d80b      	bhi.n	8004312 <HAL_TIM_ConfigClockSource+0x6c>
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d073      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x140>
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d802      	bhi.n	8004308 <HAL_TIM_ConfigClockSource+0x62>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06f      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004306:	e078      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004308:	2b20      	cmp	r3, #32
 800430a:	d06c      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x140>
 800430c:	2b30      	cmp	r3, #48	; 0x30
 800430e:	d06a      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004310:	e073      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004312:	2b70      	cmp	r3, #112	; 0x70
 8004314:	d00d      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x8c>
 8004316:	2b70      	cmp	r3, #112	; 0x70
 8004318:	d804      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x7e>
 800431a:	2b50      	cmp	r3, #80	; 0x50
 800431c:	d033      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0xe0>
 800431e:	2b60      	cmp	r3, #96	; 0x60
 8004320:	d041      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004322:	e06a      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d066      	beq.n	80043f8 <HAL_TIM_ConfigClockSource+0x152>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432e:	d017      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004330:	e063      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f000 f981 	bl	8004648 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004354:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	609a      	str	r2, [r3, #8]
      break;
 800435e:	e04c      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f000 f96a 	bl	8004648 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004382:	609a      	str	r2, [r3, #8]
      break;
 8004384:	e039      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	461a      	mov	r2, r3
 8004394:	f000 f8de 	bl	8004554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2150      	movs	r1, #80	; 0x50
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f937 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043a4:	e029      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 f8fd 	bl	80045b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2160      	movs	r1, #96	; 0x60
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f927 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e019      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 f8be 	bl	8004554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2140      	movs	r1, #64	; 0x40
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f917 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e009      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f000 f90e 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043f6:	e000      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x154>
      break;
 80043f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a40      	ldr	r2, [pc, #256]	; (8004528 <TIM_Base_SetConfig+0x114>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004432:	d00f      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3d      	ldr	r2, [pc, #244]	; (800452c <TIM_Base_SetConfig+0x118>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00b      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a3c      	ldr	r2, [pc, #240]	; (8004530 <TIM_Base_SetConfig+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a3b      	ldr	r2, [pc, #236]	; (8004534 <TIM_Base_SetConfig+0x120>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3a      	ldr	r2, [pc, #232]	; (8004538 <TIM_Base_SetConfig+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <TIM_Base_SetConfig+0x114>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d02b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d027      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2c      	ldr	r2, [pc, #176]	; (800452c <TIM_Base_SetConfig+0x118>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d023      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <TIM_Base_SetConfig+0x11c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <TIM_Base_SetConfig+0x120>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a29      	ldr	r2, [pc, #164]	; (8004538 <TIM_Base_SetConfig+0x124>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <TIM_Base_SetConfig+0x128>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <TIM_Base_SetConfig+0x12c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a26      	ldr	r2, [pc, #152]	; (8004544 <TIM_Base_SetConfig+0x130>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a25      	ldr	r2, [pc, #148]	; (8004548 <TIM_Base_SetConfig+0x134>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a24      	ldr	r2, [pc, #144]	; (800454c <TIM_Base_SetConfig+0x138>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a23      	ldr	r2, [pc, #140]	; (8004550 <TIM_Base_SetConfig+0x13c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <TIM_Base_SetConfig+0x114>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0xf8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <TIM_Base_SetConfig+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	615a      	str	r2, [r3, #20]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40010400 	.word	0x40010400
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800
 8004548:	40001800 	.word	0x40001800
 800454c:	40001c00 	.word	0x40001c00
 8004550:	40002000 	.word	0x40002000

08004554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 030a 	bic.w	r3, r3, #10
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0210 	bic.w	r2, r3, #16
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	f043 0307 	orr.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e05a      	b.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a21      	ldr	r2, [pc, #132]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d01d      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10c      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4313      	orrs	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40010400 	.word	0x40010400
 8004778:	40014000 	.word	0x40014000
 800477c:	40001800 	.word	0x40001800

08004780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e03f      	b.n	8004812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc fcec 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	; 0x24
 80047b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f829 	bl	800481c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800485e:	f023 030c 	bic.w	r3, r3, #12
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	430b      	orrs	r3, r1
 800486a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488a:	f040 818b 	bne.w	8004ba4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4ac1      	ldr	r2, [pc, #772]	; (8004b98 <UART_SetConfig+0x37c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d005      	beq.n	80048a4 <UART_SetConfig+0x88>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4abf      	ldr	r2, [pc, #764]	; (8004b9c <UART_SetConfig+0x380>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	f040 80bd 	bne.w	8004a1e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7ff f8a2 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 80048a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	461d      	mov	r5, r3
 80048ae:	f04f 0600 	mov.w	r6, #0
 80048b2:	46a8      	mov	r8, r5
 80048b4:	46b1      	mov	r9, r6
 80048b6:	eb18 0308 	adds.w	r3, r8, r8
 80048ba:	eb49 0409 	adc.w	r4, r9, r9
 80048be:	4698      	mov	r8, r3
 80048c0:	46a1      	mov	r9, r4
 80048c2:	eb18 0805 	adds.w	r8, r8, r5
 80048c6:	eb49 0906 	adc.w	r9, r9, r6
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048de:	4688      	mov	r8, r1
 80048e0:	4691      	mov	r9, r2
 80048e2:	eb18 0005 	adds.w	r0, r8, r5
 80048e6:	eb49 0106 	adc.w	r1, r9, r6
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	461d      	mov	r5, r3
 80048f0:	f04f 0600 	mov.w	r6, #0
 80048f4:	196b      	adds	r3, r5, r5
 80048f6:	eb46 0406 	adc.w	r4, r6, r6
 80048fa:	461a      	mov	r2, r3
 80048fc:	4623      	mov	r3, r4
 80048fe:	f7fb fc89 	bl	8000214 <__aeabi_uldivmod>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
 8004906:	461a      	mov	r2, r3
 8004908:	4ba5      	ldr	r3, [pc, #660]	; (8004ba0 <UART_SetConfig+0x384>)
 800490a:	fba3 2302 	umull	r2, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	461d      	mov	r5, r3
 8004918:	f04f 0600 	mov.w	r6, #0
 800491c:	46a9      	mov	r9, r5
 800491e:	46b2      	mov	sl, r6
 8004920:	eb19 0309 	adds.w	r3, r9, r9
 8004924:	eb4a 040a 	adc.w	r4, sl, sl
 8004928:	4699      	mov	r9, r3
 800492a:	46a2      	mov	sl, r4
 800492c:	eb19 0905 	adds.w	r9, r9, r5
 8004930:	eb4a 0a06 	adc.w	sl, sl, r6
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004948:	4689      	mov	r9, r1
 800494a:	4692      	mov	sl, r2
 800494c:	eb19 0005 	adds.w	r0, r9, r5
 8004950:	eb4a 0106 	adc.w	r1, sl, r6
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	461d      	mov	r5, r3
 800495a:	f04f 0600 	mov.w	r6, #0
 800495e:	196b      	adds	r3, r5, r5
 8004960:	eb46 0406 	adc.w	r4, r6, r6
 8004964:	461a      	mov	r2, r3
 8004966:	4623      	mov	r3, r4
 8004968:	f7fb fc54 	bl	8000214 <__aeabi_uldivmod>
 800496c:	4603      	mov	r3, r0
 800496e:	460c      	mov	r4, r1
 8004970:	461a      	mov	r2, r3
 8004972:	4b8b      	ldr	r3, [pc, #556]	; (8004ba0 <UART_SetConfig+0x384>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	; 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	3332      	adds	r3, #50	; 0x32
 8004986:	4a86      	ldr	r2, [pc, #536]	; (8004ba0 <UART_SetConfig+0x384>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004994:	4498      	add	r8, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	461d      	mov	r5, r3
 800499a:	f04f 0600 	mov.w	r6, #0
 800499e:	46a9      	mov	r9, r5
 80049a0:	46b2      	mov	sl, r6
 80049a2:	eb19 0309 	adds.w	r3, r9, r9
 80049a6:	eb4a 040a 	adc.w	r4, sl, sl
 80049aa:	4699      	mov	r9, r3
 80049ac:	46a2      	mov	sl, r4
 80049ae:	eb19 0905 	adds.w	r9, r9, r5
 80049b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ca:	4689      	mov	r9, r1
 80049cc:	4692      	mov	sl, r2
 80049ce:	eb19 0005 	adds.w	r0, r9, r5
 80049d2:	eb4a 0106 	adc.w	r1, sl, r6
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	461d      	mov	r5, r3
 80049dc:	f04f 0600 	mov.w	r6, #0
 80049e0:	196b      	adds	r3, r5, r5
 80049e2:	eb46 0406 	adc.w	r4, r6, r6
 80049e6:	461a      	mov	r2, r3
 80049e8:	4623      	mov	r3, r4
 80049ea:	f7fb fc13 	bl	8000214 <__aeabi_uldivmod>
 80049ee:	4603      	mov	r3, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b6a      	ldr	r3, [pc, #424]	; (8004ba0 <UART_SetConfig+0x384>)
 80049f6:	fba3 1302 	umull	r1, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2164      	movs	r1, #100	; 0x64
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	3332      	adds	r3, #50	; 0x32
 8004a08:	4a65      	ldr	r2, [pc, #404]	; (8004ba0 <UART_SetConfig+0x384>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	f003 0207 	and.w	r2, r3, #7
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4442      	add	r2, r8
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	e26f      	b.n	8004efe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1e:	f7fe ffd1 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8004a22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	461d      	mov	r5, r3
 8004a28:	f04f 0600 	mov.w	r6, #0
 8004a2c:	46a8      	mov	r8, r5
 8004a2e:	46b1      	mov	r9, r6
 8004a30:	eb18 0308 	adds.w	r3, r8, r8
 8004a34:	eb49 0409 	adc.w	r4, r9, r9
 8004a38:	4698      	mov	r8, r3
 8004a3a:	46a1      	mov	r9, r4
 8004a3c:	eb18 0805 	adds.w	r8, r8, r5
 8004a40:	eb49 0906 	adc.w	r9, r9, r6
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a58:	4688      	mov	r8, r1
 8004a5a:	4691      	mov	r9, r2
 8004a5c:	eb18 0005 	adds.w	r0, r8, r5
 8004a60:	eb49 0106 	adc.w	r1, r9, r6
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	461d      	mov	r5, r3
 8004a6a:	f04f 0600 	mov.w	r6, #0
 8004a6e:	196b      	adds	r3, r5, r5
 8004a70:	eb46 0406 	adc.w	r4, r6, r6
 8004a74:	461a      	mov	r2, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	f7fb fbcc 	bl	8000214 <__aeabi_uldivmod>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b47      	ldr	r3, [pc, #284]	; (8004ba0 <UART_SetConfig+0x384>)
 8004a84:	fba3 2302 	umull	r2, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	461d      	mov	r5, r3
 8004a92:	f04f 0600 	mov.w	r6, #0
 8004a96:	46a9      	mov	r9, r5
 8004a98:	46b2      	mov	sl, r6
 8004a9a:	eb19 0309 	adds.w	r3, r9, r9
 8004a9e:	eb4a 040a 	adc.w	r4, sl, sl
 8004aa2:	4699      	mov	r9, r3
 8004aa4:	46a2      	mov	sl, r4
 8004aa6:	eb19 0905 	adds.w	r9, r9, r5
 8004aaa:	eb4a 0a06 	adc.w	sl, sl, r6
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004abe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ac2:	4689      	mov	r9, r1
 8004ac4:	4692      	mov	sl, r2
 8004ac6:	eb19 0005 	adds.w	r0, r9, r5
 8004aca:	eb4a 0106 	adc.w	r1, sl, r6
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	f04f 0600 	mov.w	r6, #0
 8004ad8:	196b      	adds	r3, r5, r5
 8004ada:	eb46 0406 	adc.w	r4, r6, r6
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	f7fb fb97 	bl	8000214 <__aeabi_uldivmod>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	461a      	mov	r2, r3
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <UART_SetConfig+0x384>)
 8004aee:	fba3 1302 	umull	r1, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2164      	movs	r1, #100	; 0x64
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <UART_SetConfig+0x384>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b0e:	4498      	add	r8, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	461d      	mov	r5, r3
 8004b14:	f04f 0600 	mov.w	r6, #0
 8004b18:	46a9      	mov	r9, r5
 8004b1a:	46b2      	mov	sl, r6
 8004b1c:	eb19 0309 	adds.w	r3, r9, r9
 8004b20:	eb4a 040a 	adc.w	r4, sl, sl
 8004b24:	4699      	mov	r9, r3
 8004b26:	46a2      	mov	sl, r4
 8004b28:	eb19 0905 	adds.w	r9, r9, r5
 8004b2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b44:	4689      	mov	r9, r1
 8004b46:	4692      	mov	sl, r2
 8004b48:	eb19 0005 	adds.w	r0, r9, r5
 8004b4c:	eb4a 0106 	adc.w	r1, sl, r6
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	461d      	mov	r5, r3
 8004b56:	f04f 0600 	mov.w	r6, #0
 8004b5a:	196b      	adds	r3, r5, r5
 8004b5c:	eb46 0406 	adc.w	r4, r6, r6
 8004b60:	461a      	mov	r2, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	f7fb fb56 	bl	8000214 <__aeabi_uldivmod>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <UART_SetConfig+0x384>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <UART_SetConfig+0x384>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0207 	and.w	r2, r3, #7
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4442      	add	r2, r8
 8004b94:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b96:	e1b2      	b.n	8004efe <UART_SetConfig+0x6e2>
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	40011400 	.word	0x40011400
 8004ba0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4ad7      	ldr	r2, [pc, #860]	; (8004f08 <UART_SetConfig+0x6ec>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d005      	beq.n	8004bba <UART_SetConfig+0x39e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4ad6      	ldr	r2, [pc, #856]	; (8004f0c <UART_SetConfig+0x6f0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	f040 80d1 	bne.w	8004d5c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bba:	f7fe ff17 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 8004bbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	469a      	mov	sl, r3
 8004bc4:	f04f 0b00 	mov.w	fp, #0
 8004bc8:	46d0      	mov	r8, sl
 8004bca:	46d9      	mov	r9, fp
 8004bcc:	eb18 0308 	adds.w	r3, r8, r8
 8004bd0:	eb49 0409 	adc.w	r4, r9, r9
 8004bd4:	4698      	mov	r8, r3
 8004bd6:	46a1      	mov	r9, r4
 8004bd8:	eb18 080a 	adds.w	r8, r8, sl
 8004bdc:	eb49 090b 	adc.w	r9, r9, fp
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bf4:	4688      	mov	r8, r1
 8004bf6:	4691      	mov	r9, r2
 8004bf8:	eb1a 0508 	adds.w	r5, sl, r8
 8004bfc:	eb4b 0609 	adc.w	r6, fp, r9
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4619      	mov	r1, r3
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	f04f 0400 	mov.w	r4, #0
 8004c12:	0094      	lsls	r4, r2, #2
 8004c14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c18:	008b      	lsls	r3, r1, #2
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	4628      	mov	r0, r5
 8004c20:	4631      	mov	r1, r6
 8004c22:	f7fb faf7 	bl	8000214 <__aeabi_uldivmod>
 8004c26:	4603      	mov	r3, r0
 8004c28:	460c      	mov	r4, r1
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4bb8      	ldr	r3, [pc, #736]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	469b      	mov	fp, r3
 8004c3c:	f04f 0c00 	mov.w	ip, #0
 8004c40:	46d9      	mov	r9, fp
 8004c42:	46e2      	mov	sl, ip
 8004c44:	eb19 0309 	adds.w	r3, r9, r9
 8004c48:	eb4a 040a 	adc.w	r4, sl, sl
 8004c4c:	4699      	mov	r9, r3
 8004c4e:	46a2      	mov	sl, r4
 8004c50:	eb19 090b 	adds.w	r9, r9, fp
 8004c54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c6c:	4689      	mov	r9, r1
 8004c6e:	4692      	mov	sl, r2
 8004c70:	eb1b 0509 	adds.w	r5, fp, r9
 8004c74:	eb4c 060a 	adc.w	r6, ip, sl
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	f04f 0400 	mov.w	r4, #0
 8004c8a:	0094      	lsls	r4, r2, #2
 8004c8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c90:	008b      	lsls	r3, r1, #2
 8004c92:	461a      	mov	r2, r3
 8004c94:	4623      	mov	r3, r4
 8004c96:	4628      	mov	r0, r5
 8004c98:	4631      	mov	r1, r6
 8004c9a:	f7fb fabb 	bl	8000214 <__aeabi_uldivmod>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b9a      	ldr	r3, [pc, #616]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2164      	movs	r1, #100	; 0x64
 8004cae:	fb01 f303 	mul.w	r3, r1, r3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	3332      	adds	r3, #50	; 0x32
 8004cb8:	4a95      	ldr	r2, [pc, #596]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cc4:	4498      	add	r8, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	469b      	mov	fp, r3
 8004cca:	f04f 0c00 	mov.w	ip, #0
 8004cce:	46d9      	mov	r9, fp
 8004cd0:	46e2      	mov	sl, ip
 8004cd2:	eb19 0309 	adds.w	r3, r9, r9
 8004cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8004cda:	4699      	mov	r9, r3
 8004cdc:	46a2      	mov	sl, r4
 8004cde:	eb19 090b 	adds.w	r9, r9, fp
 8004ce2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cfa:	4689      	mov	r9, r1
 8004cfc:	4692      	mov	sl, r2
 8004cfe:	eb1b 0509 	adds.w	r5, fp, r9
 8004d02:	eb4c 060a 	adc.w	r6, ip, sl
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	0094      	lsls	r4, r2, #2
 8004d1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d1e:	008b      	lsls	r3, r1, #2
 8004d20:	461a      	mov	r2, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	4631      	mov	r1, r6
 8004d28:	f7fb fa74 	bl	8000214 <__aeabi_uldivmod>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	460c      	mov	r4, r1
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b77      	ldr	r3, [pc, #476]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004d34:	fba3 1302 	umull	r1, r3, r3, r2
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	2164      	movs	r1, #100	; 0x64
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	3332      	adds	r3, #50	; 0x32
 8004d46:	4a72      	ldr	r2, [pc, #456]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	f003 020f 	and.w	r2, r3, #15
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4442      	add	r2, r8
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	e0d0      	b.n	8004efe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe fe32 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8004d60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	469a      	mov	sl, r3
 8004d66:	f04f 0b00 	mov.w	fp, #0
 8004d6a:	46d0      	mov	r8, sl
 8004d6c:	46d9      	mov	r9, fp
 8004d6e:	eb18 0308 	adds.w	r3, r8, r8
 8004d72:	eb49 0409 	adc.w	r4, r9, r9
 8004d76:	4698      	mov	r8, r3
 8004d78:	46a1      	mov	r9, r4
 8004d7a:	eb18 080a 	adds.w	r8, r8, sl
 8004d7e:	eb49 090b 	adc.w	r9, r9, fp
 8004d82:	f04f 0100 	mov.w	r1, #0
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d96:	4688      	mov	r8, r1
 8004d98:	4691      	mov	r9, r2
 8004d9a:	eb1a 0508 	adds.w	r5, sl, r8
 8004d9e:	eb4b 0609 	adc.w	r6, fp, r9
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4619      	mov	r1, r3
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	f04f 0400 	mov.w	r4, #0
 8004db4:	0094      	lsls	r4, r2, #2
 8004db6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dba:	008b      	lsls	r3, r1, #2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	f7fb fa26 	bl	8000214 <__aeabi_uldivmod>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	469b      	mov	fp, r3
 8004dde:	f04f 0c00 	mov.w	ip, #0
 8004de2:	46d9      	mov	r9, fp
 8004de4:	46e2      	mov	sl, ip
 8004de6:	eb19 0309 	adds.w	r3, r9, r9
 8004dea:	eb4a 040a 	adc.w	r4, sl, sl
 8004dee:	4699      	mov	r9, r3
 8004df0:	46a2      	mov	sl, r4
 8004df2:	eb19 090b 	adds.w	r9, r9, fp
 8004df6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e0e:	4689      	mov	r9, r1
 8004e10:	4692      	mov	sl, r2
 8004e12:	eb1b 0509 	adds.w	r5, fp, r9
 8004e16:	eb4c 060a 	adc.w	r6, ip, sl
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	0094      	lsls	r4, r2, #2
 8004e2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e32:	008b      	lsls	r3, r1, #2
 8004e34:	461a      	mov	r2, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	f7fb f9ea 	bl	8000214 <__aeabi_uldivmod>
 8004e40:	4603      	mov	r3, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b32      	ldr	r3, [pc, #200]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004e48:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	2164      	movs	r1, #100	; 0x64
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	3332      	adds	r3, #50	; 0x32
 8004e5a:	4a2d      	ldr	r2, [pc, #180]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e66:	4498      	add	r8, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	469b      	mov	fp, r3
 8004e6c:	f04f 0c00 	mov.w	ip, #0
 8004e70:	46d9      	mov	r9, fp
 8004e72:	46e2      	mov	sl, ip
 8004e74:	eb19 0309 	adds.w	r3, r9, r9
 8004e78:	eb4a 040a 	adc.w	r4, sl, sl
 8004e7c:	4699      	mov	r9, r3
 8004e7e:	46a2      	mov	sl, r4
 8004e80:	eb19 090b 	adds.w	r9, r9, fp
 8004e84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e9c:	4689      	mov	r9, r1
 8004e9e:	4692      	mov	sl, r2
 8004ea0:	eb1b 0509 	adds.w	r5, fp, r9
 8004ea4:	eb4c 060a 	adc.w	r6, ip, sl
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4619      	mov	r1, r3
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	f04f 0400 	mov.w	r4, #0
 8004eba:	0094      	lsls	r4, r2, #2
 8004ebc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ec0:	008b      	lsls	r3, r1, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	4631      	mov	r1, r6
 8004eca:	f7fb f9a3 	bl	8000214 <__aeabi_uldivmod>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2164      	movs	r1, #100	; 0x64
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	3332      	adds	r3, #50	; 0x32
 8004ee8:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <UART_SetConfig+0x6f4>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4442      	add	r2, r8
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	e7ff      	b.n	8004efe <UART_SetConfig+0x6e2>
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	40011400 	.word	0x40011400
 8004f10:	51eb851f 	.word	0x51eb851f

08004f14 <_ZN4OLEDC1Ev>:

#include "RJA_SSD1306.h"

constexpr unsigned char OLED::font1[];

OLED::OLED()
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <_ZN4OLEDC1Ev+0x30>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2278      	movs	r2, #120	; 0x78
 8004f26:	711a      	strb	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	227a      	movs	r2, #122	; 0x7a
 8004f2c:	715a      	strb	r2, [r3, #5]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	719a      	strb	r2, [r3, #6]
{
	// TODO Auto-generated constructor stub

}
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	08005e60 	.word	0x08005e60

08004f48 <_ZN4OLEDD1Ev>:

OLED::~OLED()
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <_ZN4OLEDD1Ev+0x1c>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	08005e60 	.word	0x08005e60

08004f68 <_ZN4OLEDD0Ev>:
OLED::~OLED()
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
}
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ffe9 	bl	8004f48 <_ZN4OLEDD1Ev>
 8004f76:	f242 010c 	movw	r1, #8204	; 0x200c
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 face 	bl	800551c <_ZdlPvj>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZN4OLED4initEP19__I2C_HandleTypeDef>:

void OLED::init(I2C_HandleTypeDef *hi2c1)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b088      	sub	sp, #32
 8004f8e:	af02      	add	r7, sp, #8
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
	uint8_t I2CBuff[2];
		//uint16_t OLEDCAddress = 0x78;
		hi2cI = hi2c1;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	609a      	str	r2, [r3, #8]

		//display off
		I2CBuff[0] = 0x00;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 8004f9e:	23ae      	movs	r3, #174	; 0xae
 8004fa0:	737b      	strb	r3, [r7, #13]
		//memory mode: horizontal addressing
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6898      	ldr	r0, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	791b      	ldrb	r3, [r3, #4]
 8004faa:	b299      	uxth	r1, r3
 8004fac:	f107 020c 	add.w	r2, r7, #12
 8004fb0:	230a      	movs	r3, #10
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	f7fd ffdd 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x20;	//memory mode
 8004fbe:	2320      	movs	r3, #32
 8004fc0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6898      	ldr	r0, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	b299      	uxth	r1, r3
 8004fcc:	f107 020c 	add.w	r2, r7, #12
 8004fd0:	230a      	movs	r3, #10
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f7fd ffcd 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00;	//horizontal addressing
 8004fde:	2300      	movs	r3, #0
 8004fe0:	737b      	strb	r3, [r7, #13]
		//scan starting line
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6898      	ldr	r0, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	791b      	ldrb	r3, [r3, #4]
 8004fea:	b299      	uxth	r1, r3
 8004fec:	f107 020c 	add.w	r2, r7, #12
 8004ff0:	230a      	movs	r3, #10
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f7fd ffbd 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6898      	ldr	r0, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	791b      	ldrb	r3, [r3, #4]
 800500a:	b299      	uxth	r1, r3
 800500c:	f107 020c 	add.w	r2, r7, #12
 8005010:	230a      	movs	r3, #10
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	2302      	movs	r3, #2
 8005016:	f7fd ffad 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800501a:	2300      	movs	r3, #0
 800501c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 800501e:	2300      	movs	r3, #0
 8005020:	737b      	strb	r3, [r7, #13]
		//charge pump on (2 commands)
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6898      	ldr	r0, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	791b      	ldrb	r3, [r3, #4]
 800502a:	b299      	uxth	r1, r3
 800502c:	f107 020c 	add.w	r2, r7, #12
 8005030:	230a      	movs	r3, #10
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	2302      	movs	r3, #2
 8005036:	f7fd ff9d 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800503a:	2300      	movs	r3, #0
 800503c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x8D;
 800503e:	238d      	movs	r3, #141	; 0x8d
 8005040:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6898      	ldr	r0, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	791b      	ldrb	r3, [r3, #4]
 800504a:	b299      	uxth	r1, r3
 800504c:	f107 020c 	add.w	r2, r7, #12
 8005050:	230a      	movs	r3, #10
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2302      	movs	r3, #2
 8005056:	f7fd ff8d 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800505a:	2300      	movs	r3, #0
 800505c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x14;
 800505e:	2314      	movs	r3, #20
 8005060:	737b      	strb	r3, [r7, #13]
		//entire display on, from RAM content
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6898      	ldr	r0, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	b299      	uxth	r1, r3
 800506c:	f107 020c 	add.w	r2, r7, #12
 8005070:	230a      	movs	r3, #10
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2302      	movs	r3, #2
 8005076:	f7fd ff7d 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800507a:	2300      	movs	r3, #0
 800507c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 800507e:	23a4      	movs	r3, #164	; 0xa4
 8005080:	737b      	strb	r3, [r7, #13]
		//display on
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6898      	ldr	r0, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	791b      	ldrb	r3, [r3, #4]
 800508a:	b299      	uxth	r1, r3
 800508c:	f107 020c 	add.w	r2, r7, #12
 8005090:	230a      	movs	r3, #10
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2302      	movs	r3, #2
 8005096:	f7fd ff6d 	bl	8002f74 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800509a:	2300      	movs	r3, #0
 800509c:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 800509e:	23af      	movs	r3, #175	; 0xaf
 80050a0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6898      	ldr	r0, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	791b      	ldrb	r3, [r3, #4]
 80050aa:	b299      	uxth	r1, r3
 80050ac:	f107 020c 	add.w	r2, r7, #12
 80050b0:	230a      	movs	r3, #10
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2302      	movs	r3, #2
 80050b6:	f7fd ff5d 	bl	8002f74 <HAL_I2C_Master_Transmit>

		//initialise frame to zeros i.e. "empty" GDDRAM
		for(int r = 0; r < 64; r++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b3f      	cmp	r3, #63	; 0x3f
 80050c2:	dc15      	bgt.n	80050f0 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x166>
		{
			for(int c = 0; c < 128; c++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b7f      	cmp	r3, #127	; 0x7f
 80050cc:	dc0c      	bgt.n	80050e8 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x15e>
			{
				//pixel(c,r,0);	//problem!
				frame[c][r] = 0;
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	019b      	lsls	r3, r3, #6
 80050d4:	441a      	add	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	330c      	adds	r3, #12
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
			for(int c = 0; c < 128; c++)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3301      	adds	r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e7ef      	b.n	80050c8 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x13e>
		for(int r = 0; r < 64; r++)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3301      	adds	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e7e6      	b.n	80050be <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x134>
			}
		}
}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <_ZN4OLED14drawFullscreenEv>:

void OLED::drawFullscreen() //I2C_HandleTypeDef *hi2c1
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
	uint8_t I2CBuff[2];
	int r, c, b, row, col;
	for (r = 0; r < 8; r++)
 8005100:	2300      	movs	r3, #0
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	2b07      	cmp	r3, #7
 8005108:	dc40      	bgt.n	800518c <_ZN4OLED14drawFullscreenEv+0x94>
	{
		for (c = 0; c < 128; c++)
 800510a:	2300      	movs	r3, #0
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b7f      	cmp	r3, #127	; 0x7f
 8005112:	dc37      	bgt.n	8005184 <_ZN4OLED14drawFullscreenEv+0x8c>
		{
			uint8_t temp = 0x00;
 8005114:	2300      	movs	r3, #0
 8005116:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b07      	cmp	r3, #7
 8005120:	dc1c      	bgt.n	800515c <_ZN4OLED14drawFullscreenEv+0x64>
			{
				row = r*8 + b;
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
				col = c;
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	613b      	str	r3, [r7, #16]
				temp |= (frame[col][row]) << b;
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	019b      	lsls	r3, r3, #6
 8005136:	441a      	add	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	330c      	adds	r3, #12
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	b25a      	sxtb	r2, r3
 800514a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800514e:	4313      	orrs	r3, r2
 8005150:	b25b      	sxtb	r3, r3
 8005152:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	3301      	adds	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e7df      	b.n	800511c <_ZN4OLED14drawFullscreenEv+0x24>
			}
			//
			I2CBuff[0] = 0x40;	//to write data
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	733b      	strb	r3, [r7, #12]
			I2CBuff[1] = temp;
 8005160:	7efb      	ldrb	r3, [r7, #27]
 8005162:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6898      	ldr	r0, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	791b      	ldrb	r3, [r3, #4]
 800516c:	b299      	uxth	r1, r3
 800516e:	f107 020c 	add.w	r2, r7, #12
 8005172:	2305      	movs	r3, #5
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2302      	movs	r3, #2
 8005178:	f7fd fefc 	bl	8002f74 <HAL_I2C_Master_Transmit>
		for (c = 0; c < 128; c++)
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	3301      	adds	r3, #1
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	e7c4      	b.n	800510e <_ZN4OLED14drawFullscreenEv+0x16>
	for (r = 0; r < 8; r++)
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	3301      	adds	r3, #1
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
 800518a:	e7bb      	b.n	8005104 <_ZN4OLED14drawFullscreenEv+0xc>
		}
	}
}
 800518c:	bf00      	nop
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <_ZN4OLED11getCAddressEv>:
	}
	HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
}

uint8_t OLED::getCAddress()
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	return CAddress;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	791b      	ldrb	r3, [r3, #4]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <_ZN4OLED5pixelEiibb>:
{
	return DAddress;
}

void OLED::pixel(int x, int y, bool colour, bool locked)	//use locked when inconvenient to lock from outside
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	70fb      	strb	r3, [r7, #3]
	if(locked)
 80051ba:	7e3b      	ldrb	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <_ZN4OLED5pixelEiibb+0x2c>
	{
		if(x < 0 || y < 0 || x >= width || y >= height)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	db12      	blt.n	80051ec <_ZN4OLED5pixelEiibb+0x40>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db0f      	blt.n	80051ec <_ZN4OLED5pixelEiibb+0x40>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b7f      	cmp	r3, #127	; 0x7f
 80051d0:	dc0c      	bgt.n	80051ec <_ZN4OLED5pixelEiibb+0x40>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b3f      	cmp	r3, #63	; 0x3f
 80051d6:	dc09      	bgt.n	80051ec <_ZN4OLED5pixelEiibb+0x40>
		{
			return;
		}
	}
	frame[x][y] = colour;
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	330c      	adds	r3, #12
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e000      	b.n	80051ee <_ZN4OLED5pixelEiibb+0x42>
			return;
 80051ec:	bf00      	nop
}
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <_ZN4OLED8fillRectEiiiib>:
	line(x0, y0, x0, y0+rectHeight, colour, lineWidth);
	line(x1, y1-rectHeight, x1, y1, colour, lineWidth);
}

void OLED::fillRect(int x0, int y0, int x1, int y1, bool colour)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
	fill(x0, y0, x1, y1, colour);
 8005206:	7f3b      	ldrb	r3, [r7, #28]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f829 	bl	800526c <_ZN4OLED4fillEiiiib>
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <_ZN4OLED4fillEb>:
	connectPoints(X, Y, pointsNum, colour, lineWidth);
	line(X[pointsNum - 1], Y[pointsNum - 1], X[0], Y[0], colour, lineWidth);
}

void OLED::fill(bool colour)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	af02      	add	r7, sp, #8
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	70fb      	strb	r3, [r7, #3]
	for(int r = 0; r < 64; r++)
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b3f      	cmp	r3, #63	; 0x3f
 8005236:	dc15      	bgt.n	8005264 <_ZN4OLED4fillEb+0x42>
	{
		for(int c = 0; c < 128; c++)
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b7f      	cmp	r3, #127	; 0x7f
 8005240:	dc0c      	bgt.n	800525c <_ZN4OLED4fillEb+0x3a>
		{
			pixel(c,r,colour);	//frame[c][r] = colour;
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	2300      	movs	r3, #0
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ffac 	bl	80051ac <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	3301      	adds	r3, #1
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	e7ef      	b.n	800523c <_ZN4OLED4fillEb+0x1a>
	for(int r = 0; r < 64; r++)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	e7e6      	b.n	8005232 <_ZN4OLED4fillEb+0x10>
		}
	}
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <_ZN4OLED4fillEiiiib>:
void OLED::fill(int x0, int y0, int x1, int y1, bool colour)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
	for(int r = y0; r <= y1; r++)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	429a      	cmp	r2, r3
 8005284:	dc17      	bgt.n	80052b6 <_ZN4OLED4fillEiiiib+0x4a>
	{
		for(int c = x0; c <= x1; c++)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	dc0d      	bgt.n	80052ae <_ZN4OLED4fillEiiiib+0x42>
		{
			pixel(c, r, colour, 1);	//frame[c][r] = colour;
 8005292:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005296:	2301      	movs	r3, #1
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	6939      	ldr	r1, [r7, #16]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff ff83 	bl	80051ac <_ZN4OLED5pixelEiibb>
		for(int c = x0; c <= x1; c++)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3301      	adds	r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	e7ed      	b.n	800528a <_ZN4OLED4fillEiiiib+0x1e>
	for(int r = y0; r <= y1; r++)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3301      	adds	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e7e3      	b.n	800527e <_ZN4OLED4fillEiiiib+0x12>
		}
	}
}
 80052b6:	bf00      	nop
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <_ZN4OLED9characterEiihbbi>:
		}
	}
}

void OLED::character(int x, int y, unsigned char c, bool colour, bool bg, int size)
{
 80052c0:	b5b0      	push	{r4, r5, r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	70fb      	strb	r3, [r7, #3]
	if((x >= width)            || // Clip right
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b7f      	cmp	r3, #127	; 0x7f
 80052d2:	f300 80df 	bgt.w	8005494 <_ZN4OLED9characterEiihbbi+0x1d4>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b3f      	cmp	r3, #63	; 0x3f
 80052da:	f300 80db 	bgt.w	8005494 <_ZN4OLED9characterEiihbbi+0x1d4>
	 (y >= height)           || // Clip bottom
	 ((x + 6 * size - 1) < 0) || // Clip left
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	461a      	mov	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4413      	add	r3, r2
 80052ee:	3b01      	subs	r3, #1
	 (y >= height)           || // Clip bottom
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f2c0 80cf 	blt.w	8005494 <_ZN4OLED9characterEiihbbi+0x1d4>
	 ((y + 8 * size - 1) < 0))   // Clip top
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	00da      	lsls	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	3b01      	subs	r3, #1
	 ((x + 6 * size - 1) < 0) || // Clip left
 8005300:	2b00      	cmp	r3, #0
 8005302:	f2c0 80c7 	blt.w	8005494 <_ZN4OLED9characterEiihbbi+0x1d4>
	return;

	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	799b      	ldrb	r3, [r3, #6]
 800530a:	f083 0301 	eor.w	r3, r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <_ZN4OLED9characterEiihbbi+0x60>
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	2baf      	cmp	r3, #175	; 0xaf
 8005318:	d902      	bls.n	8005320 <_ZN4OLED9characterEiihbbi+0x60>
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	3301      	adds	r3, #1
 800531e:	70fb      	strb	r3, [r7, #3]

	for (int8_t i=0; i<6; i++ )
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
 8005324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005328:	2b05      	cmp	r3, #5
 800532a:	f300 80b4 	bgt.w	8005496 <_ZN4OLED9characterEiihbbi+0x1d6>
	{
		uint8_t line;
		if (i == 5)
 800532e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005332:	2b05      	cmp	r3, #5
 8005334:	d102      	bne.n	800533c <_ZN4OLED9characterEiihbbi+0x7c>
			line = 0x0;
 8005336:	2300      	movs	r3, #0
 8005338:	75bb      	strb	r3, [r7, #22]
 800533a:	e009      	b.n	8005350 <_ZN4OLED9characterEiihbbi+0x90>
		else
		{
			line = pgm_read_byte(&font1[(c*5)+i]);
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005348:	4413      	add	r3, r2
 800534a:	4a54      	ldr	r2, [pc, #336]	; (800549c <_ZN4OLED9characterEiihbbi+0x1dc>)
 800534c:	5cd3      	ldrb	r3, [r2, r3]
 800534e:	75bb      	strb	r3, [r7, #22]
		}
		for (int8_t j = 0; j<8; j++)
 8005350:	2300      	movs	r3, #0
 8005352:	757b      	strb	r3, [r7, #21]
 8005354:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005358:	2b07      	cmp	r3, #7
 800535a:	f300 8094 	bgt.w	8005486 <_ZN4OLED9characterEiihbbi+0x1c6>
		{
			if (line & 0x1)
 800535e:	7dbb      	ldrb	r3, [r7, #22]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d03f      	beq.n	80053e8 <_ZN4OLED9characterEiihbbi+0x128>
			{
				if (size == 1) // default size
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2b01      	cmp	r3, #1
 800536c:	d110      	bne.n	8005390 <_ZN4OLED9characterEiihbbi+0xd0>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = colour;
 800536e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	18d1      	adds	r1, r2, r3
 8005376:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	441a      	add	r2, r3
 800537e:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8005382:	2301      	movs	r3, #1
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4603      	mov	r3, r0
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff ff0f 	bl	80051ac <_ZN4OLED5pixelEiibb>
 800538e:	e070      	b.n	8005472 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), colour);
 8005390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005396:	fb02 f203 	mul.w	r2, r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	18d0      	adds	r0, r2, r3
 800539e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80053a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a4:	fb02 f203 	mul.w	r2, r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	18d4      	adds	r4, r2, r3
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	441a      	add	r2, r3
 80053b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	18d5      	adds	r5, r2, r3
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	441a      	add	r2, r3
 80053c6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80053ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80053d6:	9201      	str	r2, [sp, #4]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	462b      	mov	r3, r5
 80053dc:	4622      	mov	r2, r4
 80053de:	4601      	mov	r1, r0
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff ff09 	bl	80051f8 <_ZN4OLED8fillRectEiiiib>
 80053e6:	e044      	b.n	8005472 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
			}
			else if (bg != colour)
 80053e8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80053ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d03e      	beq.n	8005472 <_ZN4OLED9characterEiihbbi+0x1b2>
			{
				if (size == 1) // default size
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d110      	bne.n	800541c <_ZN4OLED9characterEiihbbi+0x15c>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = bg;
 80053fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	18d1      	adds	r1, r2, r3
 8005402:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	441a      	add	r2, r3
 800540a:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800540e:	2301      	movs	r3, #1
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	4603      	mov	r3, r0
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff fec9 	bl	80051ac <_ZN4OLED5pixelEiibb>
 800541a:	e02a      	b.n	8005472 <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800541c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005422:	fb02 f203 	mul.w	r2, r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	18d0      	adds	r0, r2, r3
 800542a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800542e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005430:	fb02 f203 	mul.w	r2, r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	18d4      	adds	r4, r2, r3
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	441a      	add	r2, r3
 800543e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	18d5      	adds	r5, r2, r3
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	441a      	add	r2, r3
 8005452:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	4413      	add	r3, r2
 800545e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005462:	9201      	str	r2, [sp, #4]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	462b      	mov	r3, r5
 8005468:	4622      	mov	r2, r4
 800546a:	4601      	mov	r1, r0
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff fec3 	bl	80051f8 <_ZN4OLED8fillRectEiiiib>
				}
			}
			line >>= 1;
 8005472:	7dbb      	ldrb	r3, [r7, #22]
 8005474:	105b      	asrs	r3, r3, #1
 8005476:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j<8; j++)
 8005478:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	3301      	adds	r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	757b      	strb	r3, [r7, #21]
 8005484:	e766      	b.n	8005354 <_ZN4OLED9characterEiihbbi+0x94>
	for (int8_t i=0; i<6; i++ )
 8005486:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	3301      	adds	r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	75fb      	strb	r3, [r7, #23]
 8005492:	e747      	b.n	8005324 <_ZN4OLED9characterEiihbbi+0x64>
	return;
 8005494:	bf00      	nop
		}
	}
}
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bdb0      	pop	{r4, r5, r7, pc}
 800549c:	08005958 	.word	0x08005958

080054a0 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>:

void OLED::text(int x, int y, string s, bool colour, bool bg, int size)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b08b      	sub	sp, #44	; 0x2c
 80054a4:	af04      	add	r7, sp, #16
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	int offset = size*6;
 80054ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b0:	4613      	mov	r3, r2
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4413      	add	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
	for(string::size_type i = 0; i < s.size(); i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	6838      	ldr	r0, [r7, #0]
 80054c0:	f000 f86c 	bl	800559c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80054c4:	4602      	mov	r2, r0
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bf34      	ite	cc
 80054cc:	2301      	movcc	r3, #1
 80054ce:	2300      	movcs	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01e      	beq.n	8005514 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x74>
	{
		character(x+(offset*i), y, s[i], colour, bg, size);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	fb02 f203 	mul.w	r2, r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4413      	add	r3, r2
 80054e2:	461c      	mov	r4, r3
 80054e4:	6979      	ldr	r1, [r7, #20]
 80054e6:	6838      	ldr	r0, [r7, #0]
 80054e8:	f000 f85a 	bl	80055a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80054ec:	4603      	mov	r3, r0
 80054ee:	781a      	ldrb	r2, [r3, #0]
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	9302      	str	r3, [sp, #8]
 80054f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	4621      	mov	r1, r4
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff feda 	bl	80052c0 <_ZN4OLED9characterEiihbbi>
	for(string::size_type i = 0; i < s.size(); i++)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	3301      	adds	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e7d4      	b.n	80054be <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x1e>
	}
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}

0800551c <_ZdlPvj>:
 800551c:	f000 b800 	b.w	8005520 <_ZdlPv>

08005520 <_ZdlPv>:
 8005520:	f000 b8d6 	b.w	80056d0 <free>

08005524 <_ZNSaIcEC1Ev>:
 8005524:	4770      	bx	lr

08005526 <_ZNSaIcED1Ev>:
 8005526:	4770      	bx	lr

08005528 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005528:	b10a      	cbz	r2, 800552e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800552a:	f000 b8d9 	b.w	80056e0 <memcpy>
 800552e:	4770      	bx	lr

08005530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005530:	b508      	push	{r3, lr}
 8005532:	680b      	ldr	r3, [r1, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	da02      	bge.n	800553e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005538:	4809      	ldr	r0, [pc, #36]	; (8005560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800553a:	f000 f88c 	bl	8005656 <_ZSt20__throw_length_errorPKc>
 800553e:	4293      	cmp	r3, r2
 8005540:	d908      	bls.n	8005554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005542:	0052      	lsls	r2, r2, #1
 8005544:	4293      	cmp	r3, r2
 8005546:	d205      	bcs.n	8005554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005548:	2a00      	cmp	r2, #0
 800554a:	bfb6      	itet	lt
 800554c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8005550:	600a      	strge	r2, [r1, #0]
 8005552:	600b      	strlt	r3, [r1, #0]
 8005554:	6808      	ldr	r0, [r1, #0]
 8005556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800555a:	3001      	adds	r0, #1
 800555c:	f000 b85e 	b.w	800561c <_Znwj>
 8005560:	08005e92 	.word	0x08005e92

08005564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005564:	4603      	mov	r3, r0
 8005566:	f853 0b08 	ldr.w	r0, [r3], #8
 800556a:	4298      	cmp	r0, r3
 800556c:	d001      	beq.n	8005572 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800556e:	f7ff bfd7 	b.w	8005520 <_ZdlPv>
 8005572:	4770      	bx	lr

08005574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005574:	2a01      	cmp	r2, #1
 8005576:	b510      	push	{r4, lr}
 8005578:	d102      	bne.n	8005580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800557a:	780a      	ldrb	r2, [r1, #0]
 800557c:	7002      	strb	r2, [r0, #0]
 800557e:	bd10      	pop	{r4, pc}
 8005580:	f7ff ffd2 	bl	8005528 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005584:	e7fb      	b.n	800557e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005586:	b508      	push	{r3, lr}
 8005588:	1a52      	subs	r2, r2, r1
 800558a:	f7ff fff3 	bl	8005574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800558e:	bd08      	pop	{r3, pc}

08005590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005590:	b510      	push	{r4, lr}
 8005592:	4604      	mov	r4, r0
 8005594:	f7ff ffe6 	bl	8005564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005598:	4620      	mov	r0, r4
 800559a:	bd10      	pop	{r4, pc}

0800559c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800559c:	6840      	ldr	r0, [r0, #4]
 800559e:	4770      	bx	lr

080055a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80055a0:	6800      	ldr	r0, [r0, #0]
 80055a2:	4408      	add	r0, r1
 80055a4:	4770      	bx	lr
	...

080055a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80055a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055aa:	4604      	mov	r4, r0
 80055ac:	4616      	mov	r6, r2
 80055ae:	460d      	mov	r5, r1
 80055b0:	b919      	cbnz	r1, 80055ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80055b2:	b112      	cbz	r2, 80055ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80055b4:	480d      	ldr	r0, [pc, #52]	; (80055ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80055b6:	f000 f84b 	bl	8005650 <_ZSt19__throw_logic_errorPKc>
 80055ba:	1b73      	subs	r3, r6, r5
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	d907      	bls.n	80055d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80055c2:	2200      	movs	r2, #0
 80055c4:	a901      	add	r1, sp, #4
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff ffb2 	bl	8005530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80055cc:	9b01      	ldr	r3, [sp, #4]
 80055ce:	6020      	str	r0, [r4, #0]
 80055d0:	60a3      	str	r3, [r4, #8]
 80055d2:	4632      	mov	r2, r6
 80055d4:	4629      	mov	r1, r5
 80055d6:	6820      	ldr	r0, [r4, #0]
 80055d8:	f7ff ffd5 	bl	8005586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	6063      	str	r3, [r4, #4]
 80055e2:	2100      	movs	r1, #0
 80055e4:	54d1      	strb	r1, [r2, r3]
 80055e6:	b002      	add	sp, #8
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	bf00      	nop
 80055ec:	08005e68 	.word	0x08005e68

080055f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	f100 0308 	add.w	r3, r0, #8
 80055f6:	4604      	mov	r4, r0
 80055f8:	6003      	str	r3, [r0, #0]
 80055fa:	460d      	mov	r5, r1
 80055fc:	b159      	cbz	r1, 8005616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80055fe:	4608      	mov	r0, r1
 8005600:	f7fa fe00 	bl	8000204 <strlen>
 8005604:	182a      	adds	r2, r5, r0
 8005606:	4620      	mov	r0, r4
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	4629      	mov	r1, r5
 800560e:	f7ff ffcb 	bl	80055a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8005612:	4620      	mov	r0, r4
 8005614:	bd38      	pop	{r3, r4, r5, pc}
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	e7f4      	b.n	8005606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800561c <_Znwj>:
 800561c:	b510      	push	{r4, lr}
 800561e:	2800      	cmp	r0, #0
 8005620:	bf14      	ite	ne
 8005622:	4604      	movne	r4, r0
 8005624:	2401      	moveq	r4, #1
 8005626:	4620      	mov	r0, r4
 8005628:	f000 f84a 	bl	80056c0 <malloc>
 800562c:	b930      	cbnz	r0, 800563c <_Znwj+0x20>
 800562e:	f000 f807 	bl	8005640 <_ZSt15get_new_handlerv>
 8005632:	b908      	cbnz	r0, 8005638 <_Znwj+0x1c>
 8005634:	f000 f812 	bl	800565c <abort>
 8005638:	4780      	blx	r0
 800563a:	e7f4      	b.n	8005626 <_Znwj+0xa>
 800563c:	bd10      	pop	{r4, pc}
	...

08005640 <_ZSt15get_new_handlerv>:
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <_ZSt15get_new_handlerv+0xc>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	f3bf 8f5b 	dmb	ish
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20002a9c 	.word	0x20002a9c

08005650 <_ZSt19__throw_logic_errorPKc>:
 8005650:	b508      	push	{r3, lr}
 8005652:	f000 f803 	bl	800565c <abort>

08005656 <_ZSt20__throw_length_errorPKc>:
 8005656:	b508      	push	{r3, lr}
 8005658:	f000 f800 	bl	800565c <abort>

0800565c <abort>:
 800565c:	b508      	push	{r3, lr}
 800565e:	2006      	movs	r0, #6
 8005660:	f000 f932 	bl	80058c8 <raise>
 8005664:	2001      	movs	r0, #1
 8005666:	f7fb fe2f 	bl	80012c8 <_exit>
	...

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000010 	.word	0x20000010

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4e0d      	ldr	r6, [pc, #52]	; (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	; (80056b4 <__libc_init_array+0x3c>)
 800567e:	1ba4      	subs	r4, r4, r6
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2500      	movs	r5, #0
 8005684:	42a5      	cmp	r5, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4e0b      	ldr	r6, [pc, #44]	; (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	; (80056bc <__libc_init_array+0x44>)
 800568c:	f000 f93a 	bl	8005904 <_init>
 8005690:	1ba4      	subs	r4, r4, r6
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2500      	movs	r5, #0
 8005696:	42a5      	cmp	r5, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056a0:	4798      	blx	r3
 80056a2:	3501      	adds	r5, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056aa:	4798      	blx	r3
 80056ac:	3501      	adds	r5, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	08005eb4 	.word	0x08005eb4
 80056b4:	08005eb4 	.word	0x08005eb4
 80056b8:	08005eb4 	.word	0x08005eb4
 80056bc:	08005ebc 	.word	0x08005ebc

080056c0 <malloc>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <malloc+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f000 b86d 	b.w	80057a4 <_malloc_r>
 80056ca:	bf00      	nop
 80056cc:	20000010 	.word	0x20000010

080056d0 <free>:
 80056d0:	4b02      	ldr	r3, [pc, #8]	; (80056dc <free+0xc>)
 80056d2:	4601      	mov	r1, r0
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f000 b817 	b.w	8005708 <_free_r>
 80056da:	bf00      	nop
 80056dc:	20000010 	.word	0x20000010

080056e0 <memcpy>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	1e43      	subs	r3, r0, #1
 80056e4:	440a      	add	r2, r1
 80056e6:	4291      	cmp	r1, r2
 80056e8:	d100      	bne.n	80056ec <memcpy+0xc>
 80056ea:	bd10      	pop	{r4, pc}
 80056ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056f4:	e7f7      	b.n	80056e6 <memcpy+0x6>

080056f6 <memset>:
 80056f6:	4402      	add	r2, r0
 80056f8:	4603      	mov	r3, r0
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d100      	bne.n	8005700 <memset+0xa>
 80056fe:	4770      	bx	lr
 8005700:	f803 1b01 	strb.w	r1, [r3], #1
 8005704:	e7f9      	b.n	80056fa <memset+0x4>
	...

08005708 <_free_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4605      	mov	r5, r0
 800570c:	2900      	cmp	r1, #0
 800570e:	d045      	beq.n	800579c <_free_r+0x94>
 8005710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005714:	1f0c      	subs	r4, r1, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	bfb8      	it	lt
 800571a:	18e4      	addlt	r4, r4, r3
 800571c:	f000 f8f0 	bl	8005900 <__malloc_lock>
 8005720:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <_free_r+0x98>)
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	4610      	mov	r0, r2
 8005726:	b933      	cbnz	r3, 8005736 <_free_r+0x2e>
 8005728:	6063      	str	r3, [r4, #4]
 800572a:	6014      	str	r4, [r2, #0]
 800572c:	4628      	mov	r0, r5
 800572e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005732:	f000 b8e6 	b.w	8005902 <__malloc_unlock>
 8005736:	42a3      	cmp	r3, r4
 8005738:	d90c      	bls.n	8005754 <_free_r+0x4c>
 800573a:	6821      	ldr	r1, [r4, #0]
 800573c:	1862      	adds	r2, r4, r1
 800573e:	4293      	cmp	r3, r2
 8005740:	bf04      	itt	eq
 8005742:	681a      	ldreq	r2, [r3, #0]
 8005744:	685b      	ldreq	r3, [r3, #4]
 8005746:	6063      	str	r3, [r4, #4]
 8005748:	bf04      	itt	eq
 800574a:	1852      	addeq	r2, r2, r1
 800574c:	6022      	streq	r2, [r4, #0]
 800574e:	6004      	str	r4, [r0, #0]
 8005750:	e7ec      	b.n	800572c <_free_r+0x24>
 8005752:	4613      	mov	r3, r2
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	b10a      	cbz	r2, 800575c <_free_r+0x54>
 8005758:	42a2      	cmp	r2, r4
 800575a:	d9fa      	bls.n	8005752 <_free_r+0x4a>
 800575c:	6819      	ldr	r1, [r3, #0]
 800575e:	1858      	adds	r0, r3, r1
 8005760:	42a0      	cmp	r0, r4
 8005762:	d10b      	bne.n	800577c <_free_r+0x74>
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	4401      	add	r1, r0
 8005768:	1858      	adds	r0, r3, r1
 800576a:	4282      	cmp	r2, r0
 800576c:	6019      	str	r1, [r3, #0]
 800576e:	d1dd      	bne.n	800572c <_free_r+0x24>
 8005770:	6810      	ldr	r0, [r2, #0]
 8005772:	6852      	ldr	r2, [r2, #4]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	4401      	add	r1, r0
 8005778:	6019      	str	r1, [r3, #0]
 800577a:	e7d7      	b.n	800572c <_free_r+0x24>
 800577c:	d902      	bls.n	8005784 <_free_r+0x7c>
 800577e:	230c      	movs	r3, #12
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	e7d3      	b.n	800572c <_free_r+0x24>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	1821      	adds	r1, r4, r0
 8005788:	428a      	cmp	r2, r1
 800578a:	bf04      	itt	eq
 800578c:	6811      	ldreq	r1, [r2, #0]
 800578e:	6852      	ldreq	r2, [r2, #4]
 8005790:	6062      	str	r2, [r4, #4]
 8005792:	bf04      	itt	eq
 8005794:	1809      	addeq	r1, r1, r0
 8005796:	6021      	streq	r1, [r4, #0]
 8005798:	605c      	str	r4, [r3, #4]
 800579a:	e7c7      	b.n	800572c <_free_r+0x24>
 800579c:	bd38      	pop	{r3, r4, r5, pc}
 800579e:	bf00      	nop
 80057a0:	20002aa0 	.word	0x20002aa0

080057a4 <_malloc_r>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	1ccd      	adds	r5, r1, #3
 80057a8:	f025 0503 	bic.w	r5, r5, #3
 80057ac:	3508      	adds	r5, #8
 80057ae:	2d0c      	cmp	r5, #12
 80057b0:	bf38      	it	cc
 80057b2:	250c      	movcc	r5, #12
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	4606      	mov	r6, r0
 80057b8:	db01      	blt.n	80057be <_malloc_r+0x1a>
 80057ba:	42a9      	cmp	r1, r5
 80057bc:	d903      	bls.n	80057c6 <_malloc_r+0x22>
 80057be:	230c      	movs	r3, #12
 80057c0:	6033      	str	r3, [r6, #0]
 80057c2:	2000      	movs	r0, #0
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	f000 f89b 	bl	8005900 <__malloc_lock>
 80057ca:	4a21      	ldr	r2, [pc, #132]	; (8005850 <_malloc_r+0xac>)
 80057cc:	6814      	ldr	r4, [r2, #0]
 80057ce:	4621      	mov	r1, r4
 80057d0:	b991      	cbnz	r1, 80057f8 <_malloc_r+0x54>
 80057d2:	4c20      	ldr	r4, [pc, #128]	; (8005854 <_malloc_r+0xb0>)
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	b91b      	cbnz	r3, 80057e0 <_malloc_r+0x3c>
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 f83d 	bl	8005858 <_sbrk_r>
 80057de:	6020      	str	r0, [r4, #0]
 80057e0:	4629      	mov	r1, r5
 80057e2:	4630      	mov	r0, r6
 80057e4:	f000 f838 	bl	8005858 <_sbrk_r>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d124      	bne.n	8005836 <_malloc_r+0x92>
 80057ec:	230c      	movs	r3, #12
 80057ee:	6033      	str	r3, [r6, #0]
 80057f0:	4630      	mov	r0, r6
 80057f2:	f000 f886 	bl	8005902 <__malloc_unlock>
 80057f6:	e7e4      	b.n	80057c2 <_malloc_r+0x1e>
 80057f8:	680b      	ldr	r3, [r1, #0]
 80057fa:	1b5b      	subs	r3, r3, r5
 80057fc:	d418      	bmi.n	8005830 <_malloc_r+0x8c>
 80057fe:	2b0b      	cmp	r3, #11
 8005800:	d90f      	bls.n	8005822 <_malloc_r+0x7e>
 8005802:	600b      	str	r3, [r1, #0]
 8005804:	50cd      	str	r5, [r1, r3]
 8005806:	18cc      	adds	r4, r1, r3
 8005808:	4630      	mov	r0, r6
 800580a:	f000 f87a 	bl	8005902 <__malloc_unlock>
 800580e:	f104 000b 	add.w	r0, r4, #11
 8005812:	1d23      	adds	r3, r4, #4
 8005814:	f020 0007 	bic.w	r0, r0, #7
 8005818:	1ac3      	subs	r3, r0, r3
 800581a:	d0d3      	beq.n	80057c4 <_malloc_r+0x20>
 800581c:	425a      	negs	r2, r3
 800581e:	50e2      	str	r2, [r4, r3]
 8005820:	e7d0      	b.n	80057c4 <_malloc_r+0x20>
 8005822:	428c      	cmp	r4, r1
 8005824:	684b      	ldr	r3, [r1, #4]
 8005826:	bf16      	itet	ne
 8005828:	6063      	strne	r3, [r4, #4]
 800582a:	6013      	streq	r3, [r2, #0]
 800582c:	460c      	movne	r4, r1
 800582e:	e7eb      	b.n	8005808 <_malloc_r+0x64>
 8005830:	460c      	mov	r4, r1
 8005832:	6849      	ldr	r1, [r1, #4]
 8005834:	e7cc      	b.n	80057d0 <_malloc_r+0x2c>
 8005836:	1cc4      	adds	r4, r0, #3
 8005838:	f024 0403 	bic.w	r4, r4, #3
 800583c:	42a0      	cmp	r0, r4
 800583e:	d005      	beq.n	800584c <_malloc_r+0xa8>
 8005840:	1a21      	subs	r1, r4, r0
 8005842:	4630      	mov	r0, r6
 8005844:	f000 f808 	bl	8005858 <_sbrk_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d0cf      	beq.n	80057ec <_malloc_r+0x48>
 800584c:	6025      	str	r5, [r4, #0]
 800584e:	e7db      	b.n	8005808 <_malloc_r+0x64>
 8005850:	20002aa0 	.word	0x20002aa0
 8005854:	20002aa4 	.word	0x20002aa4

08005858 <_sbrk_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4c06      	ldr	r4, [pc, #24]	; (8005874 <_sbrk_r+0x1c>)
 800585c:	2300      	movs	r3, #0
 800585e:	4605      	mov	r5, r0
 8005860:	4608      	mov	r0, r1
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	f7fb fd3a 	bl	80012dc <_sbrk>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_sbrk_r+0x1a>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	b103      	cbz	r3, 8005872 <_sbrk_r+0x1a>
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	20002aac 	.word	0x20002aac

08005878 <_raise_r>:
 8005878:	291f      	cmp	r1, #31
 800587a:	b538      	push	{r3, r4, r5, lr}
 800587c:	4604      	mov	r4, r0
 800587e:	460d      	mov	r5, r1
 8005880:	d904      	bls.n	800588c <_raise_r+0x14>
 8005882:	2316      	movs	r3, #22
 8005884:	6003      	str	r3, [r0, #0]
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800588e:	b112      	cbz	r2, 8005896 <_raise_r+0x1e>
 8005890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005894:	b94b      	cbnz	r3, 80058aa <_raise_r+0x32>
 8005896:	4620      	mov	r0, r4
 8005898:	f000 f830 	bl	80058fc <_getpid_r>
 800589c:	462a      	mov	r2, r5
 800589e:	4601      	mov	r1, r0
 80058a0:	4620      	mov	r0, r4
 80058a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a6:	f000 b817 	b.w	80058d8 <_kill_r>
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d00a      	beq.n	80058c4 <_raise_r+0x4c>
 80058ae:	1c59      	adds	r1, r3, #1
 80058b0:	d103      	bne.n	80058ba <_raise_r+0x42>
 80058b2:	2316      	movs	r3, #22
 80058b4:	6003      	str	r3, [r0, #0]
 80058b6:	2001      	movs	r0, #1
 80058b8:	e7e7      	b.n	800588a <_raise_r+0x12>
 80058ba:	2400      	movs	r4, #0
 80058bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058c0:	4628      	mov	r0, r5
 80058c2:	4798      	blx	r3
 80058c4:	2000      	movs	r0, #0
 80058c6:	e7e0      	b.n	800588a <_raise_r+0x12>

080058c8 <raise>:
 80058c8:	4b02      	ldr	r3, [pc, #8]	; (80058d4 <raise+0xc>)
 80058ca:	4601      	mov	r1, r0
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	f7ff bfd3 	b.w	8005878 <_raise_r>
 80058d2:	bf00      	nop
 80058d4:	20000010 	.word	0x20000010

080058d8 <_kill_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4c07      	ldr	r4, [pc, #28]	; (80058f8 <_kill_r+0x20>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4605      	mov	r5, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	f7fb fcdf 	bl	80012a8 <_kill>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	d102      	bne.n	80058f4 <_kill_r+0x1c>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	b103      	cbz	r3, 80058f4 <_kill_r+0x1c>
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
 80058f6:	bf00      	nop
 80058f8:	20002aac 	.word	0x20002aac

080058fc <_getpid_r>:
 80058fc:	f7fb bccc 	b.w	8001298 <_getpid>

08005900 <__malloc_lock>:
 8005900:	4770      	bx	lr

08005902 <__malloc_unlock>:
 8005902:	4770      	bx	lr

08005904 <_init>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <_fini>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr
