
Curious_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000665c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f00  08006f00  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f08  08006f08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a3c  20000078  08006f90  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ab4  08006f90  00022ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee72  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003586  00000000  00000000  0003ef1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  000424a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a0  00000000  00000000  00043868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002856a  00000000  00000000  00044b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000102f5  00000000  00000000  0006d072  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3c8a  00000000  00000000  0007d367  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160ff1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd0  00000000  00000000  0016106c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006814 	.word	0x08006814

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006814 	.word	0x08006814

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <_ZNSt7__cxx119to_stringEi+0x24>)
 80005d2:	2210      	movs	r2, #16
 80005d4:	4904      	ldr	r1, [pc, #16]	; (80005e8 <_ZNSt7__cxx119to_stringEi+0x28>)
 80005d6:	f000 fd62 	bl	800109e <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	0800682c 	.word	0x0800682c
 80005e8:	080061e5 	.word	0x080061e5

080005ec <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
OLED OLED1;

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
//First half of ADC buffer is now full
	inBufPtr =&adc_val[0];
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80005f8:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[DATA_SIZE];
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20000a84 	.word	0x20000a84
 8000610:	20000284 	.word	0x20000284
 8000614:	20000a88 	.word	0x20000a88
 8000618:	20000884 	.word	0x20000884

0800061c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	inBufPtr =&adc_val[DATA_SIZE];
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_ADC_ConvCpltCallback+0x20>)
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_ADC_ConvCpltCallback+0x24>)
 8000628:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_val[0];
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_ADC_ConvCpltCallback+0x28>)
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_ADC_ConvCpltCallback+0x2c>)
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	20000a84 	.word	0x20000a84
 8000640:	20000484 	.word	0x20000484
 8000644:	20000a88 	.word	0x20000a88
 8000648:	20000684 	.word	0x20000684

0800064c <_Z6mapvalmmmmmm>:
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
}

uint32_t mapval(uint32_t input, uint32_t input_start, uint32_t input_end,uint32_t input_offset, uint32_t output_start, uint32_t output_end)
{
 800064c:	b480      	push	{r7}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
	uint32_t slope = (output_end - output_start) / (input_end - input_start);
 800065a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065e:	1ad2      	subs	r2, r2, r3
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	1acb      	subs	r3, r1, r3
 8000666:	fbb2 f3f3 	udiv	r3, r2, r3
 800066a:	61fb      	str	r3, [r7, #28]
	uint32_t output_zero=  output_start + slope * (input_offset - input_start);
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	69fa      	ldr	r2, [r7, #28]
 8000674:	fb02 f303 	mul.w	r3, r2, r3
 8000678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067a:	4413      	add	r3, r2
 800067c:	61bb      	str	r3, [r7, #24]
	uint32_t output = 2048- output_zero+ output_start + slope * (input - input_start);
 800067e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	1ad2      	subs	r2, r2, r3
 8000684:	68f9      	ldr	r1, [r7, #12]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1acb      	subs	r3, r1, r3
 800068a:	69f9      	ldr	r1, [r7, #28]
 800068c:	fb01 f303 	mul.w	r3, r1, r3
 8000690:	4413      	add	r3, r2
 8000692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000696:	617b      	str	r3, [r7, #20]
	return output;
 8000698:	697b      	ldr	r3, [r7, #20]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <_Z10effectsDSPv>:
/*
 * _________________UTILITY FUNCTIONS END_______________________________________
 */

void effectsDSP(){
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af02      	add	r7, sp, #8
	// No -effect, just copy input to output
if (effectno == 0){
 80006ae:	4b4a      	ldr	r3, [pc, #296]	; (80007d8 <_Z10effectsDSPv+0x130>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d122      	bne.n	80006fc <_Z10effectsDSPv+0x54>
	for (int n=0; n< DATA_SIZE; n++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b7f      	cmp	r3, #127	; 0x7f
 80006be:	f300 8086 	bgt.w	80007ce <_Z10effectsDSPv+0x126>
		outBufPtr[n]=mapval(inBufPtr[n], 0, 4096, 2048, 0 , volume);
 80006c2:	4b46      	ldr	r3, [pc, #280]	; (80007dc <_Z10effectsDSPv+0x134>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	4b44      	ldr	r3, [pc, #272]	; (80007e0 <_Z10effectsDSPv+0x138>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a44      	ldr	r2, [pc, #272]	; (80007e4 <_Z10effectsDSPv+0x13c>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	188c      	adds	r4, r1, r2
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2300      	movs	r3, #0
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ea:	2100      	movs	r1, #0
 80006ec:	f7ff ffae 	bl	800064c <_Z6mapvalmmmmmm>
 80006f0:	4603      	mov	r3, r0
 80006f2:	6023      	str	r3, [r4, #0]
	for (int n=0; n< DATA_SIZE; n++){
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e7de      	b.n	80006ba <_Z10effectsDSPv+0x12>

	}
}
else if (effectno == 1) // Effect 1 is distortion, CLIPPING.
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <_Z10effectsDSPv+0x130>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d150      	bne.n	80007a6 <_Z10effectsDSPv+0xfe>
{
	for (int n=0; n< DATA_SIZE; n++){
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b7f      	cmp	r3, #127	; 0x7f
 800070c:	dc5f      	bgt.n	80007ce <_Z10effectsDSPv+0x126>
		//Upper Clipping
		if(inBufPtr[n] >= uint16_t(2048 + distortionThreshold))
 800070e:	4b33      	ldr	r3, [pc, #204]	; (80007dc <_Z10effectsDSPv+0x134>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <_Z10effectsDSPv+0x140>)
 800071c:	8812      	ldrh	r2, [r2, #0]
 800071e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000722:	b292      	uxth	r2, r2
 8000724:	4293      	cmp	r3, r2
 8000726:	bf2c      	ite	cs
 8000728:	2301      	movcs	r3, #1
 800072a:	2300      	movcc	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00b      	beq.n	800074a <_Z10effectsDSPv+0xa2>
			outBufPtr[n] = 2048+ distortionThreshold;
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <_Z10effectsDSPv+0x140>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <_Z10effectsDSPv+0x13c>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	e029      	b.n	800079e <_Z10effectsDSPv+0xf6>
		//Lower Clipping
		else if(inBufPtr[n] <= uint16_t(2048 - distortionThreshold))
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <_Z10effectsDSPv+0x134>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <_Z10effectsDSPv+0x140>)
 8000758:	8812      	ldrh	r2, [r2, #0]
 800075a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 800075e:	b292      	uxth	r2, r2
 8000760:	4293      	cmp	r3, r2
 8000762:	bf94      	ite	ls
 8000764:	2301      	movls	r3, #1
 8000766:	2300      	movhi	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00b      	beq.n	8000786 <_Z10effectsDSPv+0xde>
			outBufPtr[n] = 2048-distortionThreshold;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <_Z10effectsDSPv+0x140>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <_Z10effectsDSPv+0x13c>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	460a      	mov	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	e00b      	b.n	800079e <_Z10effectsDSPv+0xf6>
		else
			outBufPtr[n]=inBufPtr[n];
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <_Z10effectsDSPv+0x134>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	441a      	add	r2, r3
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <_Z10effectsDSPv+0x13c>)
 8000792:	6819      	ldr	r1, [r3, #0]
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	440b      	add	r3, r1
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	601a      	str	r2, [r3, #0]
	for (int n=0; n< DATA_SIZE; n++){
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	e7b0      	b.n	8000708 <_Z10effectsDSPv+0x60>
	}
}

else if(effectno ==2){ //MUTE
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <_Z10effectsDSPv+0x130>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d10f      	bne.n	80007ce <_Z10effectsDSPv+0x126>
	for (int n=0; n< DATA_SIZE; n++){
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b7f      	cmp	r3, #127	; 0x7f
 80007b6:	dc0a      	bgt.n	80007ce <_Z10effectsDSPv+0x126>
		outBufPtr[n]=0;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <_Z10effectsDSPv+0x13c>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
	for (int n=0; n< DATA_SIZE; n++){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3301      	adds	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	e7f1      	b.n	80007b2 <_Z10effectsDSPv+0x10a>
	}
}
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000a8c 	.word	0x20000a8c
 80007dc:	20000a84 	.word	0x20000a84
 80007e0:	20000004 	.word	0x20000004
 80007e4:	20000a88 	.word	0x20000a88
 80007e8:	20000000 	.word	0x20000000

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0be      	sub	sp, #248	; 0xf8
 80007f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f001 f83d 	bl	8001870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f9d1 	bl	8000b9c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 fbcb 	bl	8000f94 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80007fe:	f000 fb93 	bl	8000f28 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000802:	f000 fb63 	bl	8000ecc <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000806:	f000 fad1 	bl	8000dac <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 800080a:	f000 fa3f 	bl	8000c8c <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 800080e:	f000 fa99 	bl	8000d44 <_ZL11MX_DAC_Initv>
  MX_TIM2_Init();
 8000812:	f000 faff 	bl	8000e14 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000816:	48b5      	ldr	r0, [pc, #724]	; (8000aec <main+0x300>)
 8000818:	f003 ff65 	bl	80046e6 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, FULL_BUFFER_SIZE);
 800081c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000820:	49b3      	ldr	r1, [pc, #716]	; (8000af0 <main+0x304>)
 8000822:	48b4      	ldr	r0, [pc, #720]	; (8000af4 <main+0x308>)
 8000824:	f001 f8fc 	bl	8001a20 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*) dac_val, FULL_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000828:	2300      	movs	r3, #0
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000830:	4ab1      	ldr	r2, [pc, #708]	; (8000af8 <main+0x30c>)
 8000832:	2100      	movs	r1, #0
 8000834:	48b1      	ldr	r0, [pc, #708]	; (8000afc <main+0x310>)
 8000836:	f001 fdd3 	bl	80023e0 <HAL_DAC_Start_DMA>
  /*-----------------ADC AND DAC START------------------------*/

  /*-----------------SECTION_END------------------------------*/

  if(HAL_I2C_IsDeviceReady(&hi2c1, OLED1.getCAddress(), 1, 10)== HAL_OK){
 800083a:	48b1      	ldr	r0, [pc, #708]	; (8000b00 <main+0x314>)
 800083c:	f004 feee 	bl	800561c <_ZN4OLED11getCAddressEv>
 8000840:	4603      	mov	r3, r0
 8000842:	b299      	uxth	r1, r3
 8000844:	230a      	movs	r3, #10
 8000846:	2201      	movs	r2, #1
 8000848:	48ae      	ldr	r0, [pc, #696]	; (8000b04 <main+0x318>)
 800084a:	f002 fed5 	bl	80035f8 <HAL_I2C_IsDeviceReady>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf0c      	ite	eq
 8000854:	2301      	moveq	r3, #1
 8000856:	2300      	movne	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00c      	beq.n	8000878 <main+0x8c>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2120      	movs	r1, #32
 8000862:	48a9      	ldr	r0, [pc, #676]	; (8000b08 <main+0x31c>)
 8000864:	f002 fc78 	bl	8003158 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000868:	2064      	movs	r0, #100	; 0x64
 800086a:	f001 f873 	bl	8001954 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	48a5      	ldr	r0, [pc, #660]	; (8000b08 <main+0x31c>)
 8000874:	f002 fc70 	bl	8003158 <HAL_GPIO_WritePin>
  }

  OLED1.init(&hi2c1);
 8000878:	49a2      	ldr	r1, [pc, #648]	; (8000b04 <main+0x318>)
 800087a:	48a1      	ldr	r0, [pc, #644]	; (8000b00 <main+0x314>)
 800087c:	f004 fdc9 	bl	8005412 <_ZN4OLED4initEP19__I2C_HandleTypeDef>

  HAL_Delay(200);
 8000880:	20c8      	movs	r0, #200	; 0xc8
 8000882:	f001 f867 	bl	8001954 <HAL_Delay>
    /* USER CODE BEGIN 3 */

/*-------------------------------------USER INTERFACE-------------------------------
 * All buttons and OLED updates happen in this block
 ***********************************************************************************/
	  if (HAL_GPIO_ReadPin(BRIGHT_GPIO_Port, BRIGHT_Pin) == GPIO_PIN_SET){
 8000886:	2120      	movs	r1, #32
 8000888:	48a0      	ldr	r0, [pc, #640]	; (8000b0c <main+0x320>)
 800088a:	f002 fc4d 	bl	8003128 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	bf0c      	ite	eq
 8000894:	2301      	moveq	r3, #1
 8000896:	2300      	movne	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d03d      	beq.n	800091a <main+0x12e>
		  volumeUI++;
 800089e:	4b9c      	ldr	r3, [pc, #624]	; (8000b10 <main+0x324>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b9a      	ldr	r3, [pc, #616]	; (8000b10 <main+0x324>)
 80008a8:	701a      	strb	r2, [r3, #0]
		  volume= (volumeUI/100) * 4096;
 80008aa:	4b99      	ldr	r3, [pc, #612]	; (8000b10 <main+0x324>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4a99      	ldr	r2, [pc, #612]	; (8000b14 <main+0x328>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	095b      	lsrs	r3, r3, #5
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	031b      	lsls	r3, r3, #12
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b96      	ldr	r3, [pc, #600]	; (8000b18 <main+0x32c>)
 80008be:	601a      	str	r2, [r3, #0]
		  OLED1.text(0,20, "Vol: " + to_string(volumeUI), 1, 0, 2);
 80008c0:	4b93      	ldr	r3, [pc, #588]	; (8000b10 <main+0x324>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe77 	bl	80005c0 <_ZNSt7__cxx119to_stringEi>
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	f107 021c 	add.w	r2, r7, #28
 80008d8:	4990      	ldr	r1, [pc, #576]	; (8000b1c <main+0x330>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fc17 	bl	800110e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80008e0:	1d3a      	adds	r2, r7, #4
 80008e2:	2302      	movs	r3, #2
 80008e4:	9302      	str	r3, [sp, #8]
 80008e6:	2300      	movs	r3, #0
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	4613      	mov	r3, r2
 80008f0:	2214      	movs	r2, #20
 80008f2:	2100      	movs	r1, #0
 80008f4:	4882      	ldr	r0, [pc, #520]	; (8000b00 <main+0x314>)
 80008f6:	f005 f817 	bl	8005928 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f005 f949 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4618      	mov	r0, r3
 8000908:	f005 f944 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  OLED1.drawFullscreen();
 800090c:	487c      	ldr	r0, [pc, #496]	; (8000b00 <main+0x314>)
 800090e:	f004 fe37 	bl	8005580 <_ZN4OLED14drawFullscreenEv>
		  HAL_Delay(200);
 8000912:	20c8      	movs	r0, #200	; 0xc8
 8000914:	f001 f81e 	bl	8001954 <HAL_Delay>
 8000918:	e137      	b.n	8000b8a <main+0x39e>
	  }
	  else if (HAL_GPIO_ReadPin(BLEFT_GPIO_Port, BLEFT_Pin) == GPIO_PIN_SET){
 800091a:	2110      	movs	r1, #16
 800091c:	487b      	ldr	r0, [pc, #492]	; (8000b0c <main+0x320>)
 800091e:	f002 fc03 	bl	8003128 <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	bf0c      	ite	eq
 8000928:	2301      	moveq	r3, #1
 800092a:	2300      	movne	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d040      	beq.n	80009b4 <main+0x1c8>
		  volumeUI--;
 8000932:	4b77      	ldr	r3, [pc, #476]	; (8000b10 <main+0x324>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b75      	ldr	r3, [pc, #468]	; (8000b10 <main+0x324>)
 800093c:	701a      	strb	r2, [r3, #0]
		  volume= (volumeUI/100) * 4096;
 800093e:	4b74      	ldr	r3, [pc, #464]	; (8000b10 <main+0x324>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	4a74      	ldr	r2, [pc, #464]	; (8000b14 <main+0x328>)
 8000944:	fba2 2303 	umull	r2, r3, r2, r3
 8000948:	095b      	lsrs	r3, r3, #5
 800094a:	b2db      	uxtb	r3, r3
 800094c:	031b      	lsls	r3, r3, #12
 800094e:	461a      	mov	r2, r3
 8000950:	4b71      	ldr	r3, [pc, #452]	; (8000b18 <main+0x32c>)
 8000952:	601a      	str	r2, [r3, #0]
		  OLED1.text(0,20, "Vol: " + to_string(volumeUI), 1, 0, 2);
 8000954:	4b6e      	ldr	r3, [pc, #440]	; (8000b10 <main+0x324>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe2d 	bl	80005c0 <_ZNSt7__cxx119to_stringEi>
 8000966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800096a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800096e:	496b      	ldr	r1, [pc, #428]	; (8000b1c <main+0x330>)
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fbcc 	bl	800110e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8000976:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800097a:	2302      	movs	r3, #2
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	2300      	movs	r3, #0
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	2301      	movs	r3, #1
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4613      	mov	r3, r2
 8000988:	2214      	movs	r2, #20
 800098a:	2100      	movs	r1, #0
 800098c:	485c      	ldr	r0, [pc, #368]	; (8000b00 <main+0x314>)
 800098e:	f004 ffcb 	bl	8005928 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000992:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000996:	4618      	mov	r0, r3
 8000998:	f005 f8fc 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800099c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 f8f7 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  OLED1.drawFullscreen();
 80009a6:	4856      	ldr	r0, [pc, #344]	; (8000b00 <main+0x314>)
 80009a8:	f004 fdea 	bl	8005580 <_ZN4OLED14drawFullscreenEv>
		  HAL_Delay(200);
 80009ac:	20c8      	movs	r0, #200	; 0xc8
 80009ae:	f000 ffd1 	bl	8001954 <HAL_Delay>
 80009b2:	e0ea      	b.n	8000b8a <main+0x39e>
// The pcb has a wrong connection in the present version, will correct in next iteration
//	  else if (HAL_GPIO_ReadPin(BDOWN_GPIO_Port, BDOWN_Pin) == GPIO_PIN_SET){
//		  HAL_Delay(100);
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  }
	  else if(HAL_GPIO_ReadPin(BUP_GPIO_Port, BUP_Pin)== GPIO_PIN_SET){
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4855      	ldr	r0, [pc, #340]	; (8000b0c <main+0x320>)
 80009b8:	f002 fbb6 	bl	8003128 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	bf0c      	ite	eq
 80009c2:	2301      	moveq	r3, #1
 80009c4:	2300      	movne	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 80de 	beq.w	8000b8a <main+0x39e>
		  effectno += 1;
 80009ce:	4b54      	ldr	r3, [pc, #336]	; (8000b20 <main+0x334>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <main+0x334>)
 80009d8:	701a      	strb	r2, [r3, #0]
		  if (effectno ==3){
 80009da:	4b51      	ldr	r3, [pc, #324]	; (8000b20 <main+0x334>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d102      	bne.n	80009e8 <main+0x1fc>
			  effectno=0;
 80009e2:	4b4f      	ldr	r3, [pc, #316]	; (8000b20 <main+0x334>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
		  }
		  OLED1.fill(0);
 80009e8:	2100      	movs	r1, #0
 80009ea:	4845      	ldr	r0, [pc, #276]	; (8000b00 <main+0x314>)
 80009ec:	f004 fe5d 	bl	80056aa <_ZN4OLED4fillEb>
		  if(effectno== 1){
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <main+0x334>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d125      	bne.n	8000a44 <main+0x258>
		  OLED1.text(0,20, "Distortion", 1, 0, 2);
 80009f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 ffd5 	bl	80059ac <_ZNSaIcEC1Ev>
 8000a02:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000a06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a0a:	4946      	ldr	r1, [pc, #280]	; (8000b24 <main+0x338>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f005 f995 	bl	8005d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000a12:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000a16:	2302      	movs	r3, #2
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	4613      	mov	r3, r2
 8000a24:	2214      	movs	r2, #20
 8000a26:	2100      	movs	r1, #0
 8000a28:	4835      	ldr	r0, [pc, #212]	; (8000b00 <main+0x314>)
 8000a2a:	f004 ff7d 	bl	8005928 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000a2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 f8ae 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000a38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 ffb6 	bl	80059ae <_ZNSaIcED1Ev>
 8000a42:	e09c      	b.n	8000b7e <main+0x392>
		  }
		  else if(effectno == 0){
 8000a44:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <main+0x334>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d16f      	bne.n	8000b2c <main+0x340>
		  OLED1.text(0,5, "Clean", 1, 0, 2);
 8000a4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 ffab 	bl	80059ac <_ZNSaIcEC1Ev>
 8000a56:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000a5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a5e:	4932      	ldr	r1, [pc, #200]	; (8000b28 <main+0x33c>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f005 f96b 	bl	8005d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000a66:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	4613      	mov	r3, r2
 8000a78:	2205      	movs	r2, #5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4820      	ldr	r0, [pc, #128]	; (8000b00 <main+0x314>)
 8000a7e:	f004 ff53 	bl	8005928 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000a82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 f884 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000a8c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 ff8c 	bl	80059ae <_ZNSaIcED1Ev>
		  OLED1.text(0,20, "Vol: " + to_string(volumeUI), 1, 0, 2);
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <main+0x324>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fd8c 	bl	80005c0 <_ZNSt7__cxx119to_stringEi>
 8000aa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aac:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000ab0:	491a      	ldr	r1, [pc, #104]	; (8000b1c <main+0x330>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fb2b 	bl	800110e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8000ab8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000abc:	2302      	movs	r3, #2
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	2214      	movs	r2, #20
 8000acc:	2100      	movs	r1, #0
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <main+0x314>)
 8000ad0:	f004 ff2a 	bl	8005928 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000ad4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f005 f85b 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000ade:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 f856 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000ae8:	e049      	b.n	8000b7e <main+0x392>
 8000aea:	bf00      	nop
 8000aec:	20000204 	.word	0x20000204
 8000af0:	20000284 	.word	0x20000284
 8000af4:	20000094 	.word	0x20000094
 8000af8:	20000684 	.word	0x20000684
 8000afc:	2000013c 	.word	0x2000013c
 8000b00:	20000a90 	.word	0x20000a90
 8000b04:	200001b0 	.word	0x200001b0
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	20000002 	.word	0x20000002
 8000b14:	51eb851f 	.word	0x51eb851f
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	08006830 	.word	0x08006830
 8000b20:	20000a8c 	.word	0x20000a8c
 8000b24:	08006838 	.word	0x08006838
 8000b28:	08006844 	.word	0x08006844

		  }
		  else if(effectno == 2){
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <main+0x3a4>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d124      	bne.n	8000b7e <main+0x392>
		  OLED1.text(0,20, "Zeros", 1, 0, 2);
 8000b34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 ff37 	bl	80059ac <_ZNSaIcEC1Ev>
 8000b3e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8000b42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b46:	4913      	ldr	r1, [pc, #76]	; (8000b94 <main+0x3a8>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 f8f7 	bl	8005d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000b4e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000b52:	2302      	movs	r3, #2
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	2300      	movs	r3, #0
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	2214      	movs	r2, #20
 8000b62:	2100      	movs	r1, #0
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <main+0x3ac>)
 8000b66:	f004 fedf 	bl	8005928 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000b6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f005 f810 	bl	8005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000b74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 ff18 	bl	80059ae <_ZNSaIcED1Ev>
	  }

	  OLED1.drawFullscreen();
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <main+0x3ac>)
 8000b80:	f004 fcfe 	bl	8005580 <_ZN4OLED14drawFullscreenEv>
	  HAL_Delay(200);
 8000b84:	20c8      	movs	r0, #200	; 0xc8
 8000b86:	f000 fee5 	bl	8001954 <HAL_Delay>
	  }

	 /* ************************************************************************************/

	  effectsDSP(); // Process the audio
 8000b8a:	f7ff fd8d 	bl	80006a8 <_Z10effectsDSPv>
	  if (HAL_GPIO_ReadPin(BRIGHT_GPIO_Port, BRIGHT_Pin) == GPIO_PIN_SET){
 8000b8e:	e67a      	b.n	8000886 <main+0x9a>
 8000b90:	20000a8c 	.word	0x20000a8c
 8000b94:	0800684c 	.word	0x0800684c
 8000b98:	20000a90 	.word	0x20000a90

08000b9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	2234      	movs	r2, #52	; 0x34
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 f9ea 	bl	8005f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <_Z18SystemClock_Configv+0xe8>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <_Z18SystemClock_Configv+0xe8>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <_Z18SystemClock_Configv+0xe8>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <_Z18SystemClock_Configv+0xec>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000be8:	4a27      	ldr	r2, [pc, #156]	; (8000c88 <_Z18SystemClock_Configv+0xec>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <_Z18SystemClock_Configv+0xec>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c14:	2348      	movs	r3, #72	; 0x48
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 fad7 	bl	80041dc <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf14      	ite	ne
 8000c34:	2301      	movne	r3, #1
 8000c36:	2300      	moveq	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000c3e:	f000 fa27 	bl	8001090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c58:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 f801 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf14      	ite	ne
 8000c6c:	2301      	movne	r3, #1
 8000c6e:	2300      	moveq	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000c76:	f000 fa0b 	bl	8001090 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <_ZL12MX_ADC1_Initv+0xb4>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cee:	4813      	ldr	r0, [pc, #76]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000cf0:	f000 fe52 	bl	8001998 <HAL_ADC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bf14      	ite	ne
 8000cfa:	2301      	movne	r3, #1
 8000cfc:	2300      	moveq	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <_ZL12MX_ADC1_Initv+0x7c>
  {
    Error_Handler();
 8000d04:	f000 f9c4 	bl	8001090 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <_ZL12MX_ADC1_Initv+0xb0>)
 8000d1a:	f000 ff7d 	bl	8001c18 <HAL_ADC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 8000d2e:	f000 f9af 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000094 	.word	0x20000094
 8000d40:	40012000 	.word	0x40012000

08000d44 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <_ZL11MX_DAC_Initv+0x60>)
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_ZL11MX_DAC_Initv+0x64>)
 8000d56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d58:	4812      	ldr	r0, [pc, #72]	; (8000da4 <_ZL11MX_DAC_Initv+0x60>)
 8000d5a:	f001 fb1e 	bl	800239a <HAL_DAC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8000d6e:	f000 f98f 	bl	8001090 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d72:	2324      	movs	r3, #36	; 0x24
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <_ZL11MX_DAC_Initv+0x60>)
 8000d82:	f001 fbf9 	bl	8002578 <HAL_DAC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 8000d96:	f000 f97b 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000013c 	.word	0x2000013c
 8000da8:	40007400 	.word	0x40007400

08000dac <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000db2:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <_ZL12MX_I2C1_Initv+0x60>)
 8000db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000db8:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <_ZL12MX_I2C1_Initv+0x64>)
 8000dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de8:	4807      	ldr	r0, [pc, #28]	; (8000e08 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dea:	f002 f9cf 	bl	800318c <HAL_I2C_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000dfe:	f000 f947 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200001b0 	.word	0x200001b0
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	00061a80 	.word	0x00061a80

08000e14 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1439;
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e46:	f240 529f 	movw	r2, #1439	; 0x59f
 8000e4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e58:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e5a:	f003 fc19 	bl	8004690 <HAL_TIM_Base_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bf14      	ite	ne
 8000e64:	2301      	movne	r3, #1
 8000e66:	2300      	moveq	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000e6e:	f000 f90f 	bl	8001090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000e80:	f003 fc55 	bl	800472e <HAL_TIM_ConfigClockSource>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000e94:	f000 f8fc 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ea6:	f003 fe33 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000eba:	f000 f8e9 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000204 	.word	0x20000204

08000ecc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f04:	f003 fe80 	bl	8004c08 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000f18:	f000 f8ba 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000244 	.word	0x20000244
 8000f24:	40004400 	.word	0x40004400

08000f28 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <_ZL11MX_DMA_Initv+0x68>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <_ZL11MX_DMA_Initv+0x68>)
 8000f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <_ZL11MX_DMA_Initv+0x68>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_ZL11MX_DMA_Initv+0x68>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <_ZL11MX_DMA_Initv+0x68>)
 8000f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <_ZL11MX_DMA_Initv+0x68>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2010      	movs	r0, #16
 8000f6c:	f001 f9df 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f001 f9f8 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2038      	movs	r0, #56	; 0x38
 8000f7c:	f001 f9d7 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f80:	2038      	movs	r0, #56	; 0x38
 8000f82:	f001 f9f0 	bl	8002366 <HAL_NVIC_EnableIRQ>

}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a2b      	ldr	r2, [pc, #172]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a24      	ldr	r2, [pc, #144]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <_ZL12MX_GPIO_Initv+0xe8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <_ZL12MX_GPIO_Initv+0xec>)
 8001020:	f002 f89a 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <_ZL12MX_GPIO_Initv+0xf0>)
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <_ZL12MX_GPIO_Initv+0xf4>)
 800103a:	f001 fee3 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800103e:	2320      	movs	r3, #32
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <_ZL12MX_GPIO_Initv+0xec>)
 8001056:	f001 fed5 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLEFT_Pin BRIGHT_Pin BUP_Pin */
  GPIO_InitStruct.Pin = BLEFT_Pin|BRIGHT_Pin|BUP_Pin;
 800105a:	2370      	movs	r3, #112	; 0x70
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001062:	2302      	movs	r3, #2
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <_ZL12MX_GPIO_Initv+0xf8>)
 800106e:	f001 fec9 	bl	8002e04 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	10210000 	.word	0x10210000
 8001088:	40020800 	.word	0x40020800
 800108c:	40020400 	.word	0x40020400

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800109e:	b408      	push	{r3}
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3307      	adds	r3, #7
 80010b0:	3307      	adds	r3, #7
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	ebad 0d03 	sub.w	sp, sp, r3
 80010ba:	466b      	mov	r3, sp
 80010bc:	3307      	adds	r3, #7
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80010c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c8:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80010ca:	68bc      	ldr	r4, [r7, #8]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	69f8      	ldr	r0, [r7, #28]
 80010d4:	47a0      	blx	r4
 80010d6:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	18d4      	adds	r4, r2, r3
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fc62 	bl	80059ac <_ZNSaIcEC1Ev>
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4622      	mov	r2, r4
 80010ee:	69f9      	ldr	r1, [r7, #28]
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f000 f824 	bl	800113e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fc57 	bl	80059ae <_ZNSaIcED1Ev>
    }
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800110a:	b001      	add	sp, #4
 800110c:	4770      	bx	lr

0800110e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f004 fdd6 	bl	8005cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f824 	bl	8001174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800112c:	4603      	mov	r3, r0
 800112e:	4619      	mov	r1, r3
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f004 fd15 	bl	8005b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800113e:	b590      	push	{r4, r7, lr}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800114c:	68fc      	ldr	r4, [r7, #12]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f004 fc57 	bl	8005a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001154:	4603      	mov	r3, r0
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4620      	mov	r0, r4
 800115c:	f004 fdc8 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f810 	bl	800118a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f804 	bl	80011a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80011b6:	4623      	mov	r3, r4
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 f805 	bl	80011cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
	...

080011cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f000 f83e 	bl	800125c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d001      	beq.n	80011f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80011f2:	2300      	movs	r3, #0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80011fa:	f004 fbd9 	bl	80059b0 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f000 f845 	bl	8001290 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001206:	4603      	mov	r3, r0
 8001208:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d910      	bls.n	8001232 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f004 fbfb 	bl	8005a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800121e:	4603      	mov	r3, r0
 8001220:	4619      	mov	r1, r3
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f004 fbe9 	bl	80059fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4619      	mov	r1, r3
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f004 fbea 	bl	8005a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f004 fbe3 	bl	80059fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001238:	4603      	mov	r3, r0
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	4618      	mov	r0, r3
 8001240:	f004 fc45 	bl	8005ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	4619      	mov	r1, r3
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f004 fbde 	bl	8005a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	08006854 	.word	0x08006854

0800125c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800129a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffec 	bl	800127c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80012a4:	462a      	mov	r2, r5
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	4620      	mov	r0, r4
 80012aa:	f000 f805 	bl	80012b8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80012ae:	4603      	mov	r3, r0
    }
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}

080012b8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
    }
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <_Z41__static_initialization_and_destruction_0ii>:
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d107      	bne.n	80012f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d102      	bne.n	80012f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
OLED OLED1;
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80012f4:	f004 f852 	bl	800539c <_ZN4OLEDC1Ev>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d107      	bne.n	800130e <_Z41__static_initialization_and_destruction_0ii+0x36>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001304:	4293      	cmp	r3, r2
 8001306:	d102      	bne.n	800130e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800130a:	f004 f861 	bl	80053d0 <_ZN4OLEDD1Ev>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000a90 	.word	0x20000a90

0800131c <_GLOBAL__sub_I_hadc1>:
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
 8001320:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff ffd7 	bl	80012d8 <_Z41__static_initialization_and_destruction_0ii>
 800132a:	bd80      	pop	{r7, pc}

0800132c <_GLOBAL__sub_D_hadc1>:
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
 8001330:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffcf 	bl	80012d8 <_Z41__static_initialization_and_destruction_0ii>
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_MspInit+0x4c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_MspInit+0x4c>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800137a:	2007      	movs	r0, #7
 800137c:	f000 ffcc 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2f      	ldr	r2, [pc, #188]	; (8001468 <HAL_ADC_MspInit+0xdc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d158      	bne.n	8001460 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_ADC_MspInit+0xe0>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a2d      	ldr	r2, [pc, #180]	; (800146c <HAL_ADC_MspInit+0xe0>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_ADC_MspInit+0xe0>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_ADC_MspInit+0xe0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a26      	ldr	r2, [pc, #152]	; (800146c <HAL_ADC_MspInit+0xe0>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_ADC_MspInit+0xe0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e6:	2301      	movs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	481d      	ldr	r0, [pc, #116]	; (8001470 <HAL_ADC_MspInit+0xe4>)
 80013fa:	f001 fd03 	bl	8002e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_ADC_MspInit+0xec>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001424:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001434:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001438:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800143c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001446:	f001 f96f 	bl	8002728 <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001450:	f7ff fe1e 	bl	8001090 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
 800145a:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_ADC_MspInit+0xe8>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40012000 	.word	0x40012000
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	200000dc 	.word	0x200000dc
 8001478:	40026410 	.word	0x40026410

0800147c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a30      	ldr	r2, [pc, #192]	; (800155c <HAL_DAC_MspInit+0xe0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d159      	bne.n	8001552 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_DAC_MspInit+0xe4>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <HAL_DAC_MspInit+0xe4>)
 80014a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_DAC_MspInit+0xe4>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_DAC_MspInit+0xe4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_DAC_MspInit+0xe4>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_DAC_MspInit+0xe4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d6:	2310      	movs	r3, #16
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014da:	2303      	movs	r3, #3
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	481e      	ldr	r0, [pc, #120]	; (8001564 <HAL_DAC_MspInit+0xe8>)
 80014ea:	f001 fc8b 	bl	8002e04 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_DAC_MspInit+0xec>)
 80014f0:	4a1e      	ldr	r2, [pc, #120]	; (800156c <HAL_DAC_MspInit+0xf0>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_DAC_MspInit+0xec>)
 80014f6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_DAC_MspInit+0xec>)
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_DAC_MspInit+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_DAC_MspInit+0xec>)
 800150a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_DAC_MspInit+0xec>)
 8001512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001516:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_DAC_MspInit+0xec>)
 800151a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_DAC_MspInit+0xec>)
 8001522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001526:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_DAC_MspInit+0xec>)
 800152a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_DAC_MspInit+0xec>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <HAL_DAC_MspInit+0xec>)
 8001538:	f001 f8f6 	bl	8002728 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001542:	f7ff fda5 	bl	8001090 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_DAC_MspInit+0xec>)
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_DAC_MspInit+0xec>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40007400 	.word	0x40007400
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000
 8001568:	20000150 	.word	0x20000150
 800156c:	40026088 	.word	0x40026088

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_I2C_MspInit+0x84>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12c      	bne.n	80015ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <HAL_I2C_MspInit+0x8c>)
 80015cc:	f001 fc1a 	bl	8002e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d10d      	bne.n	800162e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_UART_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12b      	bne.n	80016ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0x88>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800169a:	230c      	movs	r3, #12
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2307      	movs	r3, #7
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_UART_MspInit+0x8c>)
 80016b6:	f001 fba5 	bl	8002e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40004400 	.word	0x40004400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f8f6 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA1_Stream5_IRQHandler+0x10>)
 8001732:	f001 f8ff 	bl	8002934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000150 	.word	0x20000150

08001740 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <DMA2_Stream0_IRQHandler+0x10>)
 8001746:	f001 f8f5 	bl	8002934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000dc 	.word	0x200000dc

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_kill>:

int _kill(int pid, int sig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800176e:	f004 fbab 	bl	8005ec8 <__errno>
 8001772:	4602      	mov	r2, r0
 8001774:	2316      	movs	r3, #22
 8001776:	6013      	str	r3, [r2, #0]
	return -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_exit>:

void _exit (int status)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe7 	bl	8001764 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001796:	e7fe      	b.n	8001796 <_exit+0x12>

08001798 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <_sbrk+0x50>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x16>
		heap_end = &end;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <_sbrk+0x50>)
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <_sbrk+0x54>)
 80017ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <_sbrk+0x50>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <_sbrk+0x50>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	466a      	mov	r2, sp
 80017be:	4293      	cmp	r3, r2
 80017c0:	d907      	bls.n	80017d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017c2:	f004 fb81 	bl	8005ec8 <__errno>
 80017c6:	4602      	mov	r2, r0
 80017c8:	230c      	movs	r3, #12
 80017ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	e006      	b.n	80017e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <_sbrk+0x50>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <_sbrk+0x50>)
 80017dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20002a9c 	.word	0x20002a9c
 80017ec:	20002ab8 	.word	0x20002ab8

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <SystemInit+0x28>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <SystemInit+0x28>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SystemInit+0x28>)
 8001806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800180a:	609a      	str	r2, [r3, #8]
#endif
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001854 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001820:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001822:	e003      	b.n	800182c <LoopCopyDataInit>

08001824 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001826:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001828:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800182a:	3104      	adds	r1, #4

0800182c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001830:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001832:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001834:	d3f6      	bcc.n	8001824 <CopyDataInit>
  ldr  r2, =_sbss
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001838:	e002      	b.n	8001840 <LoopFillZerobss>

0800183a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800183a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800183c:	f842 3b04 	str.w	r3, [r2], #4

08001840 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001842:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001844:	d3f9      	bcc.n	800183a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001846:	f7ff ffd3 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184a:	f004 fb43 	bl	8005ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184e:	f7fe ffcd 	bl	80007ec <main>
  bx  lr    
 8001852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001858:	08006f18 	.word	0x08006f18
  ldr  r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001860:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001864:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001868:	20002ab4 	.word	0x20002ab4

0800186c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC_IRQHandler>
	...

08001870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_Init+0x40>)
 800187a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_Init+0x40>)
 8001886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <HAL_Init+0x40>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f000 fd3d 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 f808 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a4:	f7ff fd4a 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00

080018b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x54>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_InitTick+0x58>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fd55 	bl	8002382 <HAL_SYSTICK_Config>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e00e      	b.n	8001900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d80a      	bhi.n	80018fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f000 fd1d 	bl	800232e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_InitTick+0x5c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000008 	.word	0x20000008
 800190c:	20000010 	.word	0x20000010
 8001910:	2000000c 	.word	0x2000000c

08001914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x20>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x24>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_IncTick+0x24>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000010 	.word	0x20000010
 8001938:	20002aac 	.word	0x20002aac

0800193c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20002aac 	.word	0x20002aac

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_Delay+0x40>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffde 	bl	800193c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000010 	.word	0x20000010

08001998 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e033      	b.n	8001a16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fce8 	bl	800138c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d118      	bne.n	8001a08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019de:	f023 0302 	bic.w	r3, r3, #2
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fa46 	bl	8001e7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
 8001a06:	e001      	b.n	8001a0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Start_DMA+0x1e>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e0cc      	b.n	8001bd8 <HAL_ADC_Start_DMA+0x1b8>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d018      	beq.n	8001a86 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a64:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <HAL_ADC_Start_DMA+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <HAL_ADC_Start_DMA+0x1c4>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9a      	lsrs	r2, r3, #18
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a78:	e002      	b.n	8001a80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	f040 80a0 	bne.w	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ac0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f023 0206 	bic.w	r2, r3, #6
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ae2:	e002      	b.n	8001aea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_ADC_Start_DMA+0x1c8>)
 8001af4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	4a3c      	ldr	r2, [pc, #240]	; (8001bec <HAL_ADC_Start_DMA+0x1cc>)
 8001afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_ADC_Start_DMA+0x1d0>)
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <HAL_ADC_Start_DMA+0x1d4>)
 8001b0c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b26:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b36:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	334c      	adds	r3, #76	; 0x4c
 8001b42:	4619      	mov	r1, r3
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f000 fe9c 	bl	8002884 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d12a      	bne.n	8001bae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <HAL_ADC_Start_DMA+0x1d8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d015      	beq.n	8001b8e <HAL_ADC_Start_DMA+0x16e>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_ADC_Start_DMA+0x1dc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x158>
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_ADC_Start_DMA+0x1c8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00a      	beq.n	8001b8e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <HAL_ADC_Start_DMA+0x1e0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d129      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_ADC_Start_DMA+0x1c8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d823      	bhi.n	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11c      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e013      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_Start_DMA+0x1d8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d10e      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d107      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bd4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000008 	.word	0x20000008
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	40012300 	.word	0x40012300
 8001bec:	08002075 	.word	0x08002075
 8001bf0:	0800212f 	.word	0x0800212f
 8001bf4:	0800214b 	.word	0x0800214b
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	40012100 	.word	0x40012100
 8001c00:	40012200 	.word	0x40012200

08001c04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e113      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x244>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d925      	bls.n	8001c90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1e      	subs	r3, #30
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68d9      	ldr	r1, [r3, #12]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4403      	add	r3, r0
 8001c82:	3b1e      	subs	r3, #30
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	e022      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6919      	ldr	r1, [r3, #16]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6919      	ldr	r1, [r3, #16]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d824      	bhi.n	8001d28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3b05      	subs	r3, #5
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b05      	subs	r3, #5
 8001d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
 8001d26:	e04c      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	d824      	bhi.n	8001d7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b23      	subs	r3, #35	; 0x23
 8001d42:	221f      	movs	r2, #31
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b23      	subs	r3, #35	; 0x23
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
 8001d78:	e023      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b41      	subs	r3, #65	; 0x41
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b41      	subs	r3, #65	; 0x41
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_ADC_ConfigChannel+0x250>)
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a28      	ldr	r2, [pc, #160]	; (8001e6c <HAL_ADC_ConfigChannel+0x254>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10f      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d8>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d10b      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <HAL_ADC_ConfigChannel+0x254>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d12b      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_ADC_ConfigChannel+0x258>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d003      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x1f4>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b11      	cmp	r3, #17
 8001e0a:	d122      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_ADC_ConfigChannel+0x258>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d111      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_ADC_ConfigChannel+0x25c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_ADC_ConfigChannel+0x260>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0c9a      	lsrs	r2, r3, #18
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40012300 	.word	0x40012300
 8001e6c:	40012000 	.word	0x40012000
 8001e70:	10000012 	.word	0x10000012
 8001e74:	20000008 	.word	0x20000008
 8001e78:	431bde83 	.word	0x431bde83

08001e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e84:	4b79      	ldr	r3, [pc, #484]	; (800206c <ADC_Init+0x1f0>)
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	021a      	lsls	r2, r3, #8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6899      	ldr	r1, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	4a58      	ldr	r2, [pc, #352]	; (8002070 <ADC_Init+0x1f4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e00f      	b.n	8001f7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0202 	bic.w	r2, r2, #2
 8001f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
 8001f94:	005a      	lsls	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	035a      	lsls	r2, r3, #13
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	e007      	b.n	8001ff0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	3b01      	subs	r3, #1
 800200c:	051a      	lsls	r2, r3, #20
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002032:	025a      	lsls	r2, r3, #9
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	029a      	lsls	r2, r3, #10
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40012300 	.word	0x40012300
 8002070:	0f000001 	.word	0x0f000001

08002074 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800208a:	2b00      	cmp	r3, #0
 800208c:	d13c      	bne.n	8002108 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12b      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d127      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d119      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0220 	bic.w	r2, r2, #32
 80020da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7fe fa8b 	bl	800061c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002106:	e00e      	b.n	8002126 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fd75 	bl	8001c04 <HAL_ADC_ErrorCallback>
}
 800211a:	e004      	b.n	8002126 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7fe fa55 	bl	80005ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fd4a 	bl	8001c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db0b      	blt.n	8002206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4907      	ldr	r1, [pc, #28]	; (8002214 <__NVIC_EnableIRQ+0x38>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff29 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff3e 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff8e 	bl	800226c <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff31 	bl	80021dc <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffa2 	bl	80022d4 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e014      	b.n	80023d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	791b      	ldrb	r3, [r3, #4]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff f85d 	bl	800147c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	795b      	ldrb	r3, [r3, #5]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_DAC_Start_DMA+0x1e>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e08e      	b.n	800251c <HAL_DAC_Start_DMA+0x13c>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2202      	movs	r2, #2
 8002408:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d12a      	bne.n	8002466 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a43      	ldr	r2, [pc, #268]	; (8002524 <HAL_DAC_Start_DMA+0x144>)
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a42      	ldr	r2, [pc, #264]	; (8002528 <HAL_DAC_Start_DMA+0x148>)
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a41      	ldr	r2, [pc, #260]	; (800252c <HAL_DAC_Start_DMA+0x14c>)
 8002426:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002436:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d009      	beq.n	8002452 <HAL_DAC_Start_DMA+0x72>
 800243e:	2b08      	cmp	r3, #8
 8002440:	d00c      	beq.n	800245c <HAL_DAC_Start_DMA+0x7c>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d000      	beq.n	8002448 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002446:	e039      	b.n	80024bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3308      	adds	r3, #8
 800244e:	617b      	str	r3, [r7, #20]
        break;
 8002450:	e034      	b.n	80024bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	617b      	str	r3, [r7, #20]
        break;
 800245a:	e02f      	b.n	80024bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3310      	adds	r3, #16
 8002462:	617b      	str	r3, [r7, #20]
        break;
 8002464:	e02a      	b.n	80024bc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4a31      	ldr	r2, [pc, #196]	; (8002530 <HAL_DAC_Start_DMA+0x150>)
 800246c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_DAC_Start_DMA+0x154>)
 8002474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <HAL_DAC_Start_DMA+0x158>)
 800247c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800248c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d009      	beq.n	80024a8 <HAL_DAC_Start_DMA+0xc8>
 8002494:	2b08      	cmp	r3, #8
 8002496:	d00c      	beq.n	80024b2 <HAL_DAC_Start_DMA+0xd2>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d000      	beq.n	800249e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800249c:	e00e      	b.n	80024bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3314      	adds	r3, #20
 80024a4:	617b      	str	r3, [r7, #20]
        break;
 80024a6:	e009      	b.n	80024bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3318      	adds	r3, #24
 80024ae:	617b      	str	r3, [r7, #20]
        break;
 80024b0:	e004      	b.n	80024bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	331c      	adds	r3, #28
 80024b8:	617b      	str	r3, [r7, #20]
        break;
 80024ba:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10f      	bne.n	80024e2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6898      	ldr	r0, [r3, #8]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	f000 f9d2 	bl	8002884 <HAL_DMA_Start_IT>
 80024e0:	e00e      	b.n	8002500 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024f0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68d8      	ldr	r0, [r3, #12]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f000 f9c2 	bl	8002884 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	08002613 	.word	0x08002613
 8002528:	08002635 	.word	0x08002635
 800252c:	08002651 	.word	0x08002651
 8002530:	080026bb 	.word	0x080026bb
 8002534:	080026dd 	.word	0x080026dd
 8002538:	080026f9 	.word	0x080026f9

0800253c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	795b      	ldrb	r3, [r3, #5]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_DAC_ConfigChannel+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e036      	b.n	8002606 <HAL_DAC_ConfigChannel+0x8e>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2202      	movs	r2, #2
 80025a2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80025ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4013      	ands	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	22c0      	movs	r2, #192	; 0xc0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	400a      	ands	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff ff8b 	bl	800253c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	711a      	strb	r2, [r3, #4]
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff ff84 	bl	8002550 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff ff7a 	bl	8002564 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	711a      	strb	r2, [r3, #4]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7ff ffd8 	bl	800267e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	711a      	strb	r2, [r3, #4]
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff ffd1 	bl	8002692 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f043 0204 	orr.w	r2, r3, #4
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff ffc7 	bl	80026a6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	711a      	strb	r2, [r3, #4]
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff f902 	bl	800193c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e099      	b.n	8002878 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002764:	e00f      	b.n	8002786 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002766:	f7ff f8e9 	bl	800193c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b05      	cmp	r3, #5
 8002772:	d908      	bls.n	8002786 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2203      	movs	r2, #3
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e078      	b.n	8002878 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e8      	bne.n	8002766 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_DMA_Init+0x158>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d107      	bne.n	80027f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	4313      	orrs	r3, r2
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f023 0307 	bic.w	r3, r3, #7
 8002806:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2b04      	cmp	r3, #4
 8002818:	d117      	bne.n	800284a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00e      	beq.n	800284a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fa6f 	bl	8002d10 <DMA_CheckFifoParam>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002846:	2301      	movs	r3, #1
 8002848:	e016      	b.n	8002878 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fa26 	bl	8002ca4 <DMA_CalcBaseAndBitshift>
 8002858:	4603      	mov	r3, r0
 800285a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	223f      	movs	r2, #63	; 0x3f
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	f010803f 	.word	0xf010803f

08002884 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_DMA_Start_IT+0x26>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e040      	b.n	800292c <HAL_DMA_Start_IT+0xa8>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d12f      	bne.n	800291e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f9b8 	bl	8002c48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	223f      	movs	r2, #63	; 0x3f
 80028de:	409a      	lsls	r2, r3
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0216 	orr.w	r2, r2, #22
 80028f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0208 	orr.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e005      	b.n	800292a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002940:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <HAL_DMA_IRQHandler+0x258>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a92      	ldr	r2, [pc, #584]	; (8002b90 <HAL_DMA_IRQHandler+0x25c>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a9b      	lsrs	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	2208      	movs	r2, #8
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	2208      	movs	r2, #8
 800298e:	409a      	lsls	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2204      	movs	r2, #4
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d012      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	2204      	movs	r2, #4
 80029fa:	409a      	lsls	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2210      	movs	r2, #16
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d043      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03c      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2210      	movs	r2, #16
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d018      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d108      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d024      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
 8002a62:	e01f      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e016      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0208 	bic.w	r2, r2, #8
 8002a92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 808e 	beq.w	8002bd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8086 	beq.w	8002bd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2220      	movs	r2, #32
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d136      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0216 	bic.w	r2, r2, #22
 8002aec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002afc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x1da>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0208 	bic.w	r2, r2, #8
 8002b1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	223f      	movs	r2, #63	; 0x3f
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07d      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
        }
        return;
 8002b4a:	e078      	b.n	8002c3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01c      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d108      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d030      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
 8002b78:	e02b      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d027      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
 8002b8a:	e022      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x29e>
 8002b8c:	20000008 	.word	0x20000008
 8002b90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0210 	bic.w	r2, r2, #16
 8002bb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d032      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d022      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2205      	movs	r2, #5
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3301      	adds	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d307      	bcc.n	8002c1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f2      	bne.n	8002bfe <HAL_DMA_IRQHandler+0x2ca>
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c1a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
 8002c3c:	e000      	b.n	8002c40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c3e:	bf00      	nop
    }
  }
}
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop

08002c48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d108      	bne.n	8002c88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c86:	e007      	b.n	8002c98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	60da      	str	r2, [r3, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3b10      	subs	r3, #16
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <DMA_CalcBaseAndBitshift+0x64>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <DMA_CalcBaseAndBitshift+0x68>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d909      	bls.n	8002ce6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ce4:	e007      	b.n	8002cf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	aaaaaaab 	.word	0xaaaaaaab
 8002d0c:	08006898 	.word	0x08006898

08002d10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11f      	bne.n	8002d6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d855      	bhi.n	8002ddc <DMA_CheckFifoParam+0xcc>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <DMA_CheckFifoParam+0x28>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d5b 	.word	0x08002d5b
 8002d40:	08002d49 	.word	0x08002d49
 8002d44:	08002ddd 	.word	0x08002ddd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d045      	beq.n	8002de0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d58:	e042      	b.n	8002de0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d62:	d13f      	bne.n	8002de4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e03c      	b.n	8002de4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d72:	d121      	bne.n	8002db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d836      	bhi.n	8002de8 <DMA_CheckFifoParam+0xd8>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <DMA_CheckFifoParam+0x70>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002d97 	.word	0x08002d97
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	08002da9 	.word	0x08002da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e02f      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d024      	beq.n	8002dec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da6:	e021      	b.n	8002dec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002db0:	d11e      	bne.n	8002df0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002db6:	e01b      	b.n	8002df0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <DMA_CheckFifoParam+0xb4>
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d003      	beq.n	8002dca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dc2:	e018      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e015      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00e      	beq.n	8002df4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dda:	e00b      	b.n	8002df4 <DMA_CheckFifoParam+0xe4>
      break;
 8002ddc:	bf00      	nop
 8002dde:	e00a      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      break;
 8002de0:	bf00      	nop
 8002de2:	e008      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      break;
 8002de4:	bf00      	nop
 8002de6:	e006      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      break;
 8002de8:	bf00      	nop
 8002dea:	e004      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dec:	bf00      	nop
 8002dee:	e002      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      break;
 8002df4:	bf00      	nop
    }
  } 
  
  return status; 
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e165      	b.n	80030ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e20:	2201      	movs	r2, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f040 8154 	bne.w	80030e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d00b      	beq.n	8002e5e <HAL_GPIO_Init+0x5a>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d007      	beq.n	8002e5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e52:	2b11      	cmp	r3, #17
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d130      	bne.n	8002ec0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 0201 	and.w	r2, r3, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0xfc>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b12      	cmp	r3, #18
 8002efe:	d123      	bne.n	8002f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	08da      	lsrs	r2, r3, #3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3208      	adds	r2, #8
 8002f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	08da      	lsrs	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	69b9      	ldr	r1, [r7, #24]
 8002f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80ae 	beq.w	80030e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	4a5b      	ldr	r2, [pc, #364]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 8002f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f98:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9a:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fa6:	4a57      	ldr	r2, [pc, #348]	; (8003104 <HAL_GPIO_Init+0x300>)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	3302      	adds	r3, #2
 8002fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4e      	ldr	r2, [pc, #312]	; (8003108 <HAL_GPIO_Init+0x304>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d025      	beq.n	800301e <HAL_GPIO_Init+0x21a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4d      	ldr	r2, [pc, #308]	; (800310c <HAL_GPIO_Init+0x308>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01f      	beq.n	800301a <HAL_GPIO_Init+0x216>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4c      	ldr	r2, [pc, #304]	; (8003110 <HAL_GPIO_Init+0x30c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d019      	beq.n	8003016 <HAL_GPIO_Init+0x212>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4b      	ldr	r2, [pc, #300]	; (8003114 <HAL_GPIO_Init+0x310>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_GPIO_Init+0x20e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4a      	ldr	r2, [pc, #296]	; (8003118 <HAL_GPIO_Init+0x314>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00d      	beq.n	800300e <HAL_GPIO_Init+0x20a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a49      	ldr	r2, [pc, #292]	; (800311c <HAL_GPIO_Init+0x318>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d007      	beq.n	800300a <HAL_GPIO_Init+0x206>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a48      	ldr	r2, [pc, #288]	; (8003120 <HAL_GPIO_Init+0x31c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_GPIO_Init+0x202>
 8003002:	2306      	movs	r3, #6
 8003004:	e00c      	b.n	8003020 <HAL_GPIO_Init+0x21c>
 8003006:	2307      	movs	r3, #7
 8003008:	e00a      	b.n	8003020 <HAL_GPIO_Init+0x21c>
 800300a:	2305      	movs	r3, #5
 800300c:	e008      	b.n	8003020 <HAL_GPIO_Init+0x21c>
 800300e:	2304      	movs	r3, #4
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x21c>
 8003012:	2303      	movs	r3, #3
 8003014:	e004      	b.n	8003020 <HAL_GPIO_Init+0x21c>
 8003016:	2302      	movs	r3, #2
 8003018:	e002      	b.n	8003020 <HAL_GPIO_Init+0x21c>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_GPIO_Init+0x21c>
 800301e:	2300      	movs	r3, #0
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	f002 0203 	and.w	r2, r2, #3
 8003026:	0092      	lsls	r2, r2, #2
 8003028:	4093      	lsls	r3, r2
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003030:	4934      	ldr	r1, [pc, #208]	; (8003104 <HAL_GPIO_Init+0x300>)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <HAL_GPIO_Init+0x320>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003062:	4a30      	ldr	r2, [pc, #192]	; (8003124 <HAL_GPIO_Init+0x320>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003068:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_GPIO_Init+0x320>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <HAL_GPIO_Init+0x320>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_GPIO_Init+0x320>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_GPIO_Init+0x320>)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_GPIO_Init+0x320>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e0:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_GPIO_Init+0x320>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	2b0f      	cmp	r3, #15
 80030f0:	f67f ae96 	bls.w	8002e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	3724      	adds	r7, #36	; 0x24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40021400 	.word	0x40021400
 8003120:	40021800 	.word	0x40021800
 8003124:	40013c00 	.word	0x40013c00

08003128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e001      	b.n	800314a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003174:	e003      	b.n	800317e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	041a      	lsls	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	619a      	str	r2, [r3, #24]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e11f      	b.n	80033de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe f9dc 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f0:	f000 fe2c 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a7b      	ldr	r2, [pc, #492]	; (80033e8 <HAL_I2C_Init+0x25c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d807      	bhi.n	8003210 <HAL_I2C_Init+0x84>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a7a      	ldr	r2, [pc, #488]	; (80033ec <HAL_I2C_Init+0x260>)
 8003204:	4293      	cmp	r3, r2
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e006      	b.n	800321e <HAL_I2C_Init+0x92>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <HAL_I2C_Init+0x264>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0db      	b.n	80033de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_I2C_Init+0x268>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a64      	ldr	r2, [pc, #400]	; (80033e8 <HAL_I2C_Init+0x25c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d802      	bhi.n	8003260 <HAL_I2C_Init+0xd4>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	e009      	b.n	8003274 <HAL_I2C_Init+0xe8>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a63      	ldr	r2, [pc, #396]	; (80033f8 <HAL_I2C_Init+0x26c>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	3301      	adds	r3, #1
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4956      	ldr	r1, [pc, #344]	; (80033e8 <HAL_I2C_Init+0x25c>)
 8003290:	428b      	cmp	r3, r1
 8003292:	d80d      	bhi.n	80032b0 <HAL_I2C_Init+0x124>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e59      	subs	r1, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	bf38      	it	cc
 80032ac:	2304      	movcc	r3, #4
 80032ae:	e04f      	b.n	8003350 <HAL_I2C_Init+0x1c4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d111      	bne.n	80032dc <HAL_I2C_Init+0x150>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	440b      	add	r3, r1
 80032c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e012      	b.n	8003302 <HAL_I2C_Init+0x176>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1e58      	subs	r0, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	0099      	lsls	r1, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Init+0x17e>
 8003306:	2301      	movs	r3, #1
 8003308:	e022      	b.n	8003350 <HAL_I2C_Init+0x1c4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10e      	bne.n	8003330 <HAL_I2C_Init+0x1a4>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e58      	subs	r0, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	440b      	add	r3, r1
 8003320:	fbb0 f3f3 	udiv	r3, r0, r3
 8003324:	3301      	adds	r3, #1
 8003326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Init+0x1c4>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e58      	subs	r0, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	0099      	lsls	r1, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	6809      	ldr	r1, [r1, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800337e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6911      	ldr	r1, [r2, #16]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68d2      	ldr	r2, [r2, #12]
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	430b      	orrs	r3, r1
 8003392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	000186a0 	.word	0x000186a0
 80033ec:	001e847f 	.word	0x001e847f
 80033f0:	003d08ff 	.word	0x003d08ff
 80033f4:	431bde83 	.word	0x431bde83
 80033f8:	10624dd3 	.word	0x10624dd3

080033fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	460b      	mov	r3, r1
 800340a:	817b      	strh	r3, [r7, #10]
 800340c:	4613      	mov	r3, r2
 800340e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7fe fa94 	bl	800193c <HAL_GetTick>
 8003414:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	f040 80e0 	bne.w	80035e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2319      	movs	r3, #25
 800342a:	2201      	movs	r2, #1
 800342c:	4970      	ldr	r1, [pc, #448]	; (80035f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fa92 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	e0d3      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_I2C_Master_Transmit+0x50>
 8003448:	2302      	movs	r3, #2
 800344a:	e0cc      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d007      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2210      	movs	r2, #16
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034b4:	8979      	ldrh	r1, [r7, #10]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f9ca 	bl	8003854 <I2C_MasterRequestWrite>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e08d      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034e0:	e066      	b.n	80035b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fb0c 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d107      	bne.n	800350a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06b      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b04      	cmp	r3, #4
 800354a:	d11b      	bne.n	8003584 <HAL_I2C_Master_Transmit+0x188>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	6a39      	ldr	r1, [r7, #32]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fafc 	bl	8003b86 <I2C_WaitOnBTFFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e01a      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d194      	bne.n	80034e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	00100002 	.word	0x00100002
 80035f4:	ffff0000 	.word	0xffff0000

080035f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	460b      	mov	r3, r1
 8003606:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7fe f998 	bl	800193c <HAL_GetTick>
 800360c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 8110 	bne.w	8003840 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2319      	movs	r3, #25
 8003626:	2201      	movs	r2, #1
 8003628:	4988      	ldr	r1, [pc, #544]	; (800384c <HAL_I2C_IsDeviceReady+0x254>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f994 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
 8003638:	e103      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_I2C_IsDeviceReady+0x50>
 8003644:	2302      	movs	r3, #2
 8003646:	e0fc      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x24a>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d007      	beq.n	800366e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2224      	movs	r2, #36	; 0x24
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a70      	ldr	r2, [pc, #448]	; (8003850 <HAL_I2C_IsDeviceReady+0x258>)
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f952 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00c      	beq.n	80036d4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0b6      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036d4:	897b      	ldrh	r3, [r7, #10]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036e2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fe f92a 	bl	800193c <HAL_GetTick>
 80036e8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003718:	e025      	b.n	8003766 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fe f90f 	bl	800193c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <HAL_I2C_IsDeviceReady+0x138>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	22a0      	movs	r2, #160	; 0xa0
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2ba0      	cmp	r3, #160	; 0xa0
 8003770:	d005      	beq.n	800377e <HAL_I2C_IsDeviceReady+0x186>
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <HAL_I2C_IsDeviceReady+0x186>
 8003778:	7dbb      	ldrb	r3, [r7, #22]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0cd      	beq.n	800371a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d129      	bne.n	80037e8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2319      	movs	r3, #25
 80037c0:	2201      	movs	r2, #1
 80037c2:	4922      	ldr	r1, [pc, #136]	; (800384c <HAL_I2C_IsDeviceReady+0x254>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f8c7 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e036      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e02c      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003800:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2319      	movs	r3, #25
 8003808:	2201      	movs	r2, #1
 800380a:	4910      	ldr	r1, [pc, #64]	; (800384c <HAL_I2C_IsDeviceReady+0x254>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8a3 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e012      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	3301      	adds	r3, #1
 8003820:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	f4ff af33 	bcc.w	8003692 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003840:	2302      	movs	r3, #2
  }
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	00100002 	.word	0x00100002
 8003850:	ffff0000 	.word	0xffff0000

08003854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d006      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d003      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800387c:	d108      	bne.n	8003890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e00b      	b.n	80038a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b12      	cmp	r3, #18
 8003896:	d107      	bne.n	80038a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f84f 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00c      	beq.n	80038da <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e035      	b.n	8003946 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e2:	d108      	bne.n	80038f6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e4:	897b      	ldrh	r3, [r7, #10]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f2:	611a      	str	r2, [r3, #16]
 80038f4:	e01b      	b.n	800392e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038f6:	897b      	ldrh	r3, [r7, #10]
 80038f8:	11db      	asrs	r3, r3, #7
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 0306 	and.w	r3, r3, #6
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f063 030f 	orn	r3, r3, #15
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	490f      	ldr	r1, [pc, #60]	; (8003950 <I2C_MasterRequestWrite+0xfc>)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f876 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e010      	b.n	8003946 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <I2C_MasterRequestWrite+0x100>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f866 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	00010008 	.word	0x00010008
 8003954:	00010002 	.word	0x00010002

08003958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003968:	e025      	b.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d021      	beq.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fd ffe3 	bl	800193c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e023      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10d      	bne.n	80039dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	e00c      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d0b6      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a14:	e051      	b.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d123      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e046      	b.n	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d021      	beq.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fd ff61 	bl	800193c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e020      	b.n	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10c      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e00b      	b.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d18d      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b10:	e02d      	b.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f878 	bl	8003c08 <I2C_IsAcknowledgeFailed>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e02d      	b.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d021      	beq.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fd ff07 	bl	800193c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d116      	bne.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d1ca      	bne.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b92:	e02d      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f837 	bl	8003c08 <I2C_IsAcknowledgeFailed>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e02d      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d021      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7fd fec6 	bl	800193c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d1ca      	bne.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1e:	d11b      	bne.n	8003c58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0cc      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d90c      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0b8      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cbc:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd4:	4b53      	ldr	r3, [pc, #332]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	494d      	ldr	r1, [pc, #308]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d044      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d119      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e067      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4934      	ldr	r1, [pc, #208]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fd fdf0 	bl	800193c <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fd fdec 	bl	800193c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d20c      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e032      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4916      	ldr	r1, [pc, #88]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	490e      	ldr	r1, [pc, #56]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dee:	f000 f855 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003df2:	4601      	mov	r1, r0
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	fa21 f303 	lsr.w	r3, r1, r3
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fd50 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023c00 	.word	0x40023c00
 8003e24:	40023800 	.word	0x40023800
 8003e28:	08006880 	.word	0x08006880
 8003e2c:	20000008 	.word	0x20000008
 8003e30:	2000000c 	.word	0x2000000c

08003e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000008 	.word	0x20000008

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff0 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e54:	4601      	mov	r1, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4a03      	ldr	r2, [pc, #12]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5cd3      	ldrb	r3, [r2, r3]
 8003e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08006890 	.word	0x08006890

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e78:	f7ff ffdc 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0b5b      	lsrs	r3, r3, #13
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8a:	5cd3      	ldrb	r3, [r2, r3]
 8003e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	08006890 	.word	0x08006890

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb6:	4bc6      	ldr	r3, [pc, #792]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	f200 817e 	bhi.w	80041c0 <HAL_RCC_GetSysClockFreq+0x324>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_RCC_GetSysClockFreq+0x30>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	080041c1 	.word	0x080041c1
 8003ed4:	080041c1 	.word	0x080041c1
 8003ed8:	080041c1 	.word	0x080041c1
 8003edc:	08003f07 	.word	0x08003f07
 8003ee0:	080041c1 	.word	0x080041c1
 8003ee4:	080041c1 	.word	0x080041c1
 8003ee8:	080041c1 	.word	0x080041c1
 8003eec:	08003f0d 	.word	0x08003f0d
 8003ef0:	080041c1 	.word	0x080041c1
 8003ef4:	080041c1 	.word	0x080041c1
 8003ef8:	080041c1 	.word	0x080041c1
 8003efc:	08004069 	.word	0x08004069
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4bb4      	ldr	r3, [pc, #720]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x338>)
 8003f02:	613b      	str	r3, [r7, #16]
       break;
 8003f04:	e15f      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f06:	4bb4      	ldr	r3, [pc, #720]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003f08:	613b      	str	r3, [r7, #16]
      break;
 8003f0a:	e15c      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0c:	4bb0      	ldr	r3, [pc, #704]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f14:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f16:	4bae      	ldr	r3, [pc, #696]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04a      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	4bab      	ldr	r3, [pc, #684]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	f04f 0400 	mov.w	r4, #0
 8003f2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	ea03 0501 	and.w	r5, r3, r1
 8003f38:	ea04 0602 	and.w	r6, r4, r2
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4632      	mov	r2, r6
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	f04f 0400 	mov.w	r4, #0
 8003f48:	0154      	lsls	r4, r2, #5
 8003f4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f4e:	014b      	lsls	r3, r1, #5
 8003f50:	4619      	mov	r1, r3
 8003f52:	4622      	mov	r2, r4
 8003f54:	1b49      	subs	r1, r1, r5
 8003f56:	eb62 0206 	sbc.w	r2, r2, r6
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	f04f 0400 	mov.w	r4, #0
 8003f62:	0194      	lsls	r4, r2, #6
 8003f64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f68:	018b      	lsls	r3, r1, #6
 8003f6a:	1a5b      	subs	r3, r3, r1
 8003f6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	00e2      	lsls	r2, r4, #3
 8003f7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f7e:	00d9      	lsls	r1, r3, #3
 8003f80:	460b      	mov	r3, r1
 8003f82:	4614      	mov	r4, r2
 8003f84:	195b      	adds	r3, r3, r5
 8003f86:	eb44 0406 	adc.w	r4, r4, r6
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	0262      	lsls	r2, r4, #9
 8003f94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f98:	0259      	lsls	r1, r3, #9
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	f7fc f988 	bl	80002c0 <__aeabi_uldivmod>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e049      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb8:	4b85      	ldr	r3, [pc, #532]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	f04f 0400 	mov.w	r4, #0
 8003fc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	ea03 0501 	and.w	r5, r3, r1
 8003fce:	ea04 0602 	and.w	r6, r4, r2
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	f04f 0400 	mov.w	r4, #0
 8003fde:	0154      	lsls	r4, r2, #5
 8003fe0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fe4:	014b      	lsls	r3, r1, #5
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4622      	mov	r2, r4
 8003fea:	1b49      	subs	r1, r1, r5
 8003fec:	eb62 0206 	sbc.w	r2, r2, r6
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	0194      	lsls	r4, r2, #6
 8003ffa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ffe:	018b      	lsls	r3, r1, #6
 8004000:	1a5b      	subs	r3, r3, r1
 8004002:	eb64 0402 	sbc.w	r4, r4, r2
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	00e2      	lsls	r2, r4, #3
 8004010:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004014:	00d9      	lsls	r1, r3, #3
 8004016:	460b      	mov	r3, r1
 8004018:	4614      	mov	r4, r2
 800401a:	195b      	adds	r3, r3, r5
 800401c:	eb44 0406 	adc.w	r4, r4, r6
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	02a2      	lsls	r2, r4, #10
 800402a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800402e:	0299      	lsls	r1, r3, #10
 8004030:	460b      	mov	r3, r1
 8004032:	4614      	mov	r4, r2
 8004034:	4618      	mov	r0, r3
 8004036:	4621      	mov	r1, r4
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f04f 0400 	mov.w	r4, #0
 800403e:	461a      	mov	r2, r3
 8004040:	4623      	mov	r3, r4
 8004042:	f7fc f93d 	bl	80002c0 <__aeabi_uldivmod>
 8004046:	4603      	mov	r3, r0
 8004048:	460c      	mov	r4, r1
 800404a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800404c:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	613b      	str	r3, [r7, #16]
      break;
 8004066:	e0ae      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004072:	4b57      	ldr	r3, [pc, #348]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d04a      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	f240 11ff 	movw	r1, #511	; 0x1ff
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	ea03 0501 	and.w	r5, r3, r1
 8004094:	ea04 0602 	and.w	r6, r4, r2
 8004098:	4629      	mov	r1, r5
 800409a:	4632      	mov	r2, r6
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	f04f 0400 	mov.w	r4, #0
 80040a4:	0154      	lsls	r4, r2, #5
 80040a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040aa:	014b      	lsls	r3, r1, #5
 80040ac:	4619      	mov	r1, r3
 80040ae:	4622      	mov	r2, r4
 80040b0:	1b49      	subs	r1, r1, r5
 80040b2:	eb62 0206 	sbc.w	r2, r2, r6
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	f04f 0400 	mov.w	r4, #0
 80040be:	0194      	lsls	r4, r2, #6
 80040c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040c4:	018b      	lsls	r3, r1, #6
 80040c6:	1a5b      	subs	r3, r3, r1
 80040c8:	eb64 0402 	sbc.w	r4, r4, r2
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	00e2      	lsls	r2, r4, #3
 80040d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040da:	00d9      	lsls	r1, r3, #3
 80040dc:	460b      	mov	r3, r1
 80040de:	4614      	mov	r4, r2
 80040e0:	195b      	adds	r3, r3, r5
 80040e2:	eb44 0406 	adc.w	r4, r4, r6
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	0262      	lsls	r2, r4, #9
 80040f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040f4:	0259      	lsls	r1, r3, #9
 80040f6:	460b      	mov	r3, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	4621      	mov	r1, r4
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f04f 0400 	mov.w	r4, #0
 8004104:	461a      	mov	r2, r3
 8004106:	4623      	mov	r3, r4
 8004108:	f7fc f8da 	bl	80002c0 <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e049      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004114:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	f04f 0400 	mov.w	r4, #0
 800411e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	ea03 0501 	and.w	r5, r3, r1
 800412a:	ea04 0602 	and.w	r6, r4, r2
 800412e:	4629      	mov	r1, r5
 8004130:	4632      	mov	r2, r6
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	f04f 0400 	mov.w	r4, #0
 800413a:	0154      	lsls	r4, r2, #5
 800413c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004140:	014b      	lsls	r3, r1, #5
 8004142:	4619      	mov	r1, r3
 8004144:	4622      	mov	r2, r4
 8004146:	1b49      	subs	r1, r1, r5
 8004148:	eb62 0206 	sbc.w	r2, r2, r6
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	f04f 0400 	mov.w	r4, #0
 8004154:	0194      	lsls	r4, r2, #6
 8004156:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800415a:	018b      	lsls	r3, r1, #6
 800415c:	1a5b      	subs	r3, r3, r1
 800415e:	eb64 0402 	sbc.w	r4, r4, r2
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	00e2      	lsls	r2, r4, #3
 800416c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004170:	00d9      	lsls	r1, r3, #3
 8004172:	460b      	mov	r3, r1
 8004174:	4614      	mov	r4, r2
 8004176:	195b      	adds	r3, r3, r5
 8004178:	eb44 0406 	adc.w	r4, r4, r6
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	02a2      	lsls	r2, r4, #10
 8004186:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800418a:	0299      	lsls	r1, r3, #10
 800418c:	460b      	mov	r3, r1
 800418e:	4614      	mov	r4, r2
 8004190:	4618      	mov	r0, r3
 8004192:	4621      	mov	r1, r4
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f04f 0400 	mov.w	r4, #0
 800419a:	461a      	mov	r2, r3
 800419c:	4623      	mov	r3, r4
 800419e:	f7fc f88f 	bl	80002c0 <__aeabi_uldivmod>
 80041a2:	4603      	mov	r3, r0
 80041a4:	460c      	mov	r4, r1
 80041a6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0f1b      	lsrs	r3, r3, #28
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	613b      	str	r3, [r7, #16]
      break;
 80041be:	e002      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x338>)
 80041c2:	613b      	str	r3, [r7, #16]
      break;
 80041c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c6:	693b      	ldr	r3, [r7, #16]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	007a1200 	.word	0x007a1200

080041dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8083 	beq.w	80042fc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041f6:	4b95      	ldr	r3, [pc, #596]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d019      	beq.n	8004236 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004202:	4b92      	ldr	r3, [pc, #584]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800420e:	4b8f      	ldr	r3, [pc, #572]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d00c      	beq.n	8004236 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421c:	4b8b      	ldr	r3, [pc, #556]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d112      	bne.n	800424e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004228:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004234:	d10b      	bne.n	800424e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d05b      	beq.n	80042fa <HAL_RCC_OscConfig+0x11e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d157      	bne.n	80042fa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e216      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x8a>
 8004258:	4b7c      	ldr	r3, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a7b      	ldr	r2, [pc, #492]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800425e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e01d      	b.n	80042a2 <HAL_RCC_OscConfig+0xc6>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800426e:	d10c      	bne.n	800428a <HAL_RCC_OscConfig+0xae>
 8004270:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a75      	ldr	r2, [pc, #468]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b73      	ldr	r3, [pc, #460]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a72      	ldr	r2, [pc, #456]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e00b      	b.n	80042a2 <HAL_RCC_OscConfig+0xc6>
 800428a:	4b70      	ldr	r3, [pc, #448]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6f      	ldr	r2, [pc, #444]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6c      	ldr	r2, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800429c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d013      	beq.n	80042d2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd fb47 	bl	800193c <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b2:	f7fd fb43 	bl	800193c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e1db      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0xd6>
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fd fb33 	bl	800193c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042da:	f7fd fb2f 	bl	800193c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b64      	cmp	r3, #100	; 0x64
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1c7      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ec:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0xfe>
 80042f8:	e000      	b.n	80042fc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d06f      	beq.n	80043e8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004314:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800431c:	2b08      	cmp	r3, #8
 800431e:	d105      	bne.n	800432c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004320:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432c:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d11c      	bne.n	8004372 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004338:	4b44      	ldr	r3, [pc, #272]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d116      	bne.n	8004372 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_OscConfig+0x180>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d001      	beq.n	800435c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e18f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4938      	ldr	r1, [pc, #224]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004370:	e03a      	b.n	80043e8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d020      	beq.n	80043bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437a:	4b35      	ldr	r3, [pc, #212]	; (8004450 <HAL_RCC_OscConfig+0x274>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd fadc 	bl	800193c <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004388:	f7fd fad8 	bl	800193c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e170      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	4b2c      	ldr	r3, [pc, #176]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4925      	ldr	r1, [pc, #148]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
 80043ba:	e015      	b.n	80043e8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x274>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fd fabb 	bl	800193c <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fd fab7 	bl	800193c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e14f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d037      	beq.n	8004464 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d016      	beq.n	800442a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fc:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x278>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fa9b 	bl	800193c <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440a:	f7fd fa97 	bl	800193c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e12f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x22e>
 8004428:	e01c      	b.n	8004464 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_OscConfig+0x278>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd fa84 	bl	800193c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004436:	e00f      	b.n	8004458 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004438:	f7fd fa80 	bl	800193c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d908      	bls.n	8004458 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e118      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	42470000 	.word	0x42470000
 8004454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b8a      	ldr	r3, [pc, #552]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e9      	bne.n	8004438 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8097 	beq.w	80045a0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b83      	ldr	r3, [pc, #524]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b79      	ldr	r3, [pc, #484]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a75      	ldr	r2, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fd fa3f 	bl	800193c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd fa3b 	bl	800193c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0d3      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x31a>
 80044e8:	4b66      	ldr	r3, [pc, #408]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a65      	ldr	r2, [pc, #404]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
 80044f4:	e01c      	b.n	8004530 <HAL_RCC_OscConfig+0x354>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x33c>
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a60      	ldr	r2, [pc, #384]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a5d      	ldr	r2, [pc, #372]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0x354>
 8004518:	4b5a      	ldr	r3, [pc, #360]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a59      	ldr	r2, [pc, #356]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a56      	ldr	r2, [pc, #344]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800452a:	f023 0304 	bic.w	r3, r3, #4
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd fa00 	bl	800193c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd f9fc 	bl	800193c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e092      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ee      	beq.n	8004540 <HAL_RCC_OscConfig+0x364>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fd f9ea 	bl	800193c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fd f9e6 	bl	800193c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e07c      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ee      	bne.n	800456c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	4a3a      	ldr	r2, [pc, #232]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d068      	beq.n	800467a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a8:	4b36      	ldr	r3, [pc, #216]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d060      	beq.n	8004676 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d145      	bne.n	8004648 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_RCC_OscConfig+0x4b0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fd f9bb 	bl	800193c <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fd f9b7 	bl	800193c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e04f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045dc:	4b29      	ldr	r3, [pc, #164]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	019b      	lsls	r3, r3, #6
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	071b      	lsls	r3, r3, #28
 8004614:	491b      	ldr	r1, [pc, #108]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800461a:	4b1c      	ldr	r3, [pc, #112]	; (800468c <HAL_RCC_OscConfig+0x4b0>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fd f98c 	bl	800193c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004628:	f7fd f988 	bl	800193c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e020      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x44c>
 8004646:	e018      	b.n	800467a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCC_OscConfig+0x4b0>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fd f975 	bl	800193c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004656:	f7fd f971 	bl	800193c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e009      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x47a>
 8004674:	e001      	b.n	800467a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	40007000 	.word	0x40007000
 800468c:	42470060 	.word	0x42470060

08004690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e01d      	b.n	80046de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc ffa2 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 f8e4 	bl	800489c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d007      	beq.n	8004718 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_TIM_ConfigClockSource+0x18>
 8004742:	2302      	movs	r3, #2
 8004744:	e0a6      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x166>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004764:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800476c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d067      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x120>
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d80b      	bhi.n	800479a <HAL_TIM_ConfigClockSource+0x6c>
 8004782:	2b10      	cmp	r3, #16
 8004784:	d073      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x140>
 8004786:	2b10      	cmp	r3, #16
 8004788:	d802      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x62>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d06f      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800478e:	e078      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004790:	2b20      	cmp	r3, #32
 8004792:	d06c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x140>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d06a      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004798:	e073      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800479a:	2b70      	cmp	r3, #112	; 0x70
 800479c:	d00d      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x8c>
 800479e:	2b70      	cmp	r3, #112	; 0x70
 80047a0:	d804      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x7e>
 80047a2:	2b50      	cmp	r3, #80	; 0x50
 80047a4:	d033      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xe0>
 80047a6:	2b60      	cmp	r3, #96	; 0x60
 80047a8:	d041      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047aa:	e06a      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d066      	beq.n	8004880 <HAL_TIM_ConfigClockSource+0x152>
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b6:	d017      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047b8:	e063      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6899      	ldr	r1, [r3, #8]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f000 f981 	bl	8004ad0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	609a      	str	r2, [r3, #8]
      break;
 80047e6:	e04c      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6899      	ldr	r1, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f000 f96a 	bl	8004ad0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480a:	609a      	str	r2, [r3, #8]
      break;
 800480c:	e039      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f8de 	bl	80049dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2150      	movs	r1, #80	; 0x50
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f937 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 800482c:	e029      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f8fd 	bl	8004a3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2160      	movs	r1, #96	; 0x60
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f927 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 800484c:	e019      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f8be 	bl	80049dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2140      	movs	r1, #64	; 0x40
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f917 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 800486c:	e009      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f000 f90e 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 800487e:	e000      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004880:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d00f      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3d      	ldr	r2, [pc, #244]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3c      	ldr	r2, [pc, #240]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <TIM_Base_SetConfig+0x120>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d027      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d023      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2b      	ldr	r2, [pc, #172]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <TIM_Base_SetConfig+0x120>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <TIM_Base_SetConfig+0x128>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <TIM_Base_SetConfig+0x12c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <TIM_Base_SetConfig+0x130>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <TIM_Base_SetConfig+0x134>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <TIM_Base_SetConfig+0x138>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <TIM_Base_SetConfig+0x13c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40001800 	.word	0x40001800
 80049d4:	40001c00 	.word	0x40001c00
 80049d8:	40002000 	.word	0x40002000

080049dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0201 	bic.w	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 030a 	bic.w	r3, r3, #10
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0210 	bic.w	r2, r3, #16
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f043 0307 	orr.w	r3, r3, #7
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e05a      	b.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d022      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d01d      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d018      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00e      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10c      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40001800 	.word	0x40001800

08004c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e03f      	b.n	8004c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc fd06 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f829 	bl	8004ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ce6:	f023 030c 	bic.w	r3, r3, #12
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d12:	f040 818b 	bne.w	800502c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4ac1      	ldr	r2, [pc, #772]	; (8005020 <UART_SetConfig+0x37c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d005      	beq.n	8004d2c <UART_SetConfig+0x88>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4abf      	ldr	r2, [pc, #764]	; (8005024 <UART_SetConfig+0x380>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	f040 80bd 	bne.w	8004ea6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7ff f8a2 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 8004d30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	461d      	mov	r5, r3
 8004d36:	f04f 0600 	mov.w	r6, #0
 8004d3a:	46a8      	mov	r8, r5
 8004d3c:	46b1      	mov	r9, r6
 8004d3e:	eb18 0308 	adds.w	r3, r8, r8
 8004d42:	eb49 0409 	adc.w	r4, r9, r9
 8004d46:	4698      	mov	r8, r3
 8004d48:	46a1      	mov	r9, r4
 8004d4a:	eb18 0805 	adds.w	r8, r8, r5
 8004d4e:	eb49 0906 	adc.w	r9, r9, r6
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d66:	4688      	mov	r8, r1
 8004d68:	4691      	mov	r9, r2
 8004d6a:	eb18 0005 	adds.w	r0, r8, r5
 8004d6e:	eb49 0106 	adc.w	r1, r9, r6
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	461d      	mov	r5, r3
 8004d78:	f04f 0600 	mov.w	r6, #0
 8004d7c:	196b      	adds	r3, r5, r5
 8004d7e:	eb46 0406 	adc.w	r4, r6, r6
 8004d82:	461a      	mov	r2, r3
 8004d84:	4623      	mov	r3, r4
 8004d86:	f7fb fa9b 	bl	80002c0 <__aeabi_uldivmod>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4ba5      	ldr	r3, [pc, #660]	; (8005028 <UART_SetConfig+0x384>)
 8004d92:	fba3 2302 	umull	r2, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	461d      	mov	r5, r3
 8004da0:	f04f 0600 	mov.w	r6, #0
 8004da4:	46a9      	mov	r9, r5
 8004da6:	46b2      	mov	sl, r6
 8004da8:	eb19 0309 	adds.w	r3, r9, r9
 8004dac:	eb4a 040a 	adc.w	r4, sl, sl
 8004db0:	4699      	mov	r9, r3
 8004db2:	46a2      	mov	sl, r4
 8004db4:	eb19 0905 	adds.w	r9, r9, r5
 8004db8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dd0:	4689      	mov	r9, r1
 8004dd2:	4692      	mov	sl, r2
 8004dd4:	eb19 0005 	adds.w	r0, r9, r5
 8004dd8:	eb4a 0106 	adc.w	r1, sl, r6
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	461d      	mov	r5, r3
 8004de2:	f04f 0600 	mov.w	r6, #0
 8004de6:	196b      	adds	r3, r5, r5
 8004de8:	eb46 0406 	adc.w	r4, r6, r6
 8004dec:	461a      	mov	r2, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	f7fb fa66 	bl	80002c0 <__aeabi_uldivmod>
 8004df4:	4603      	mov	r3, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b8b      	ldr	r3, [pc, #556]	; (8005028 <UART_SetConfig+0x384>)
 8004dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	2164      	movs	r1, #100	; 0x64
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	3332      	adds	r3, #50	; 0x32
 8004e0e:	4a86      	ldr	r2, [pc, #536]	; (8005028 <UART_SetConfig+0x384>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e1c:	4498      	add	r8, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	461d      	mov	r5, r3
 8004e22:	f04f 0600 	mov.w	r6, #0
 8004e26:	46a9      	mov	r9, r5
 8004e28:	46b2      	mov	sl, r6
 8004e2a:	eb19 0309 	adds.w	r3, r9, r9
 8004e2e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e32:	4699      	mov	r9, r3
 8004e34:	46a2      	mov	sl, r4
 8004e36:	eb19 0905 	adds.w	r9, r9, r5
 8004e3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e52:	4689      	mov	r9, r1
 8004e54:	4692      	mov	sl, r2
 8004e56:	eb19 0005 	adds.w	r0, r9, r5
 8004e5a:	eb4a 0106 	adc.w	r1, sl, r6
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	461d      	mov	r5, r3
 8004e64:	f04f 0600 	mov.w	r6, #0
 8004e68:	196b      	adds	r3, r5, r5
 8004e6a:	eb46 0406 	adc.w	r4, r6, r6
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4623      	mov	r3, r4
 8004e72:	f7fb fa25 	bl	80002c0 <__aeabi_uldivmod>
 8004e76:	4603      	mov	r3, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	; (8005028 <UART_SetConfig+0x384>)
 8004e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	2164      	movs	r1, #100	; 0x64
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	3332      	adds	r3, #50	; 0x32
 8004e90:	4a65      	ldr	r2, [pc, #404]	; (8005028 <UART_SetConfig+0x384>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	f003 0207 	and.w	r2, r3, #7
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4442      	add	r2, r8
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	e26f      	b.n	8005386 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ea6:	f7fe ffd1 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8004eaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	461d      	mov	r5, r3
 8004eb0:	f04f 0600 	mov.w	r6, #0
 8004eb4:	46a8      	mov	r8, r5
 8004eb6:	46b1      	mov	r9, r6
 8004eb8:	eb18 0308 	adds.w	r3, r8, r8
 8004ebc:	eb49 0409 	adc.w	r4, r9, r9
 8004ec0:	4698      	mov	r8, r3
 8004ec2:	46a1      	mov	r9, r4
 8004ec4:	eb18 0805 	adds.w	r8, r8, r5
 8004ec8:	eb49 0906 	adc.w	r9, r9, r6
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ed8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004edc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ee0:	4688      	mov	r8, r1
 8004ee2:	4691      	mov	r9, r2
 8004ee4:	eb18 0005 	adds.w	r0, r8, r5
 8004ee8:	eb49 0106 	adc.w	r1, r9, r6
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	461d      	mov	r5, r3
 8004ef2:	f04f 0600 	mov.w	r6, #0
 8004ef6:	196b      	adds	r3, r5, r5
 8004ef8:	eb46 0406 	adc.w	r4, r6, r6
 8004efc:	461a      	mov	r2, r3
 8004efe:	4623      	mov	r3, r4
 8004f00:	f7fb f9de 	bl	80002c0 <__aeabi_uldivmod>
 8004f04:	4603      	mov	r3, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <UART_SetConfig+0x384>)
 8004f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	461d      	mov	r5, r3
 8004f1a:	f04f 0600 	mov.w	r6, #0
 8004f1e:	46a9      	mov	r9, r5
 8004f20:	46b2      	mov	sl, r6
 8004f22:	eb19 0309 	adds.w	r3, r9, r9
 8004f26:	eb4a 040a 	adc.w	r4, sl, sl
 8004f2a:	4699      	mov	r9, r3
 8004f2c:	46a2      	mov	sl, r4
 8004f2e:	eb19 0905 	adds.w	r9, r9, r5
 8004f32:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f4a:	4689      	mov	r9, r1
 8004f4c:	4692      	mov	sl, r2
 8004f4e:	eb19 0005 	adds.w	r0, r9, r5
 8004f52:	eb4a 0106 	adc.w	r1, sl, r6
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	f04f 0600 	mov.w	r6, #0
 8004f60:	196b      	adds	r3, r5, r5
 8004f62:	eb46 0406 	adc.w	r4, r6, r6
 8004f66:	461a      	mov	r2, r3
 8004f68:	4623      	mov	r3, r4
 8004f6a:	f7fb f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	461a      	mov	r2, r3
 8004f74:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <UART_SetConfig+0x384>)
 8004f76:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2164      	movs	r1, #100	; 0x64
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	3332      	adds	r3, #50	; 0x32
 8004f88:	4a27      	ldr	r2, [pc, #156]	; (8005028 <UART_SetConfig+0x384>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f96:	4498      	add	r8, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	461d      	mov	r5, r3
 8004f9c:	f04f 0600 	mov.w	r6, #0
 8004fa0:	46a9      	mov	r9, r5
 8004fa2:	46b2      	mov	sl, r6
 8004fa4:	eb19 0309 	adds.w	r3, r9, r9
 8004fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8004fac:	4699      	mov	r9, r3
 8004fae:	46a2      	mov	sl, r4
 8004fb0:	eb19 0905 	adds.w	r9, r9, r5
 8004fb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fcc:	4689      	mov	r9, r1
 8004fce:	4692      	mov	sl, r2
 8004fd0:	eb19 0005 	adds.w	r0, r9, r5
 8004fd4:	eb4a 0106 	adc.w	r1, sl, r6
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	461d      	mov	r5, r3
 8004fde:	f04f 0600 	mov.w	r6, #0
 8004fe2:	196b      	adds	r3, r5, r5
 8004fe4:	eb46 0406 	adc.w	r4, r6, r6
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4623      	mov	r3, r4
 8004fec:	f7fb f968 	bl	80002c0 <__aeabi_uldivmod>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <UART_SetConfig+0x384>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	; 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3332      	adds	r3, #50	; 0x32
 800500a:	4a07      	ldr	r2, [pc, #28]	; (8005028 <UART_SetConfig+0x384>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4442      	add	r2, r8
 800501c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800501e:	e1b2      	b.n	8005386 <UART_SetConfig+0x6e2>
 8005020:	40011000 	.word	0x40011000
 8005024:	40011400 	.word	0x40011400
 8005028:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4ad7      	ldr	r2, [pc, #860]	; (8005390 <UART_SetConfig+0x6ec>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d005      	beq.n	8005042 <UART_SetConfig+0x39e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4ad6      	ldr	r2, [pc, #856]	; (8005394 <UART_SetConfig+0x6f0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	f040 80d1 	bne.w	80051e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005042:	f7fe ff17 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 8005046:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	469a      	mov	sl, r3
 800504c:	f04f 0b00 	mov.w	fp, #0
 8005050:	46d0      	mov	r8, sl
 8005052:	46d9      	mov	r9, fp
 8005054:	eb18 0308 	adds.w	r3, r8, r8
 8005058:	eb49 0409 	adc.w	r4, r9, r9
 800505c:	4698      	mov	r8, r3
 800505e:	46a1      	mov	r9, r4
 8005060:	eb18 080a 	adds.w	r8, r8, sl
 8005064:	eb49 090b 	adc.w	r9, r9, fp
 8005068:	f04f 0100 	mov.w	r1, #0
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005074:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005078:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800507c:	4688      	mov	r8, r1
 800507e:	4691      	mov	r9, r2
 8005080:	eb1a 0508 	adds.w	r5, sl, r8
 8005084:	eb4b 0609 	adc.w	r6, fp, r9
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4619      	mov	r1, r3
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	f04f 0400 	mov.w	r4, #0
 800509a:	0094      	lsls	r4, r2, #2
 800509c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050a0:	008b      	lsls	r3, r1, #2
 80050a2:	461a      	mov	r2, r3
 80050a4:	4623      	mov	r3, r4
 80050a6:	4628      	mov	r0, r5
 80050a8:	4631      	mov	r1, r6
 80050aa:	f7fb f909 	bl	80002c0 <__aeabi_uldivmod>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	461a      	mov	r2, r3
 80050b4:	4bb8      	ldr	r3, [pc, #736]	; (8005398 <UART_SetConfig+0x6f4>)
 80050b6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	469b      	mov	fp, r3
 80050c4:	f04f 0c00 	mov.w	ip, #0
 80050c8:	46d9      	mov	r9, fp
 80050ca:	46e2      	mov	sl, ip
 80050cc:	eb19 0309 	adds.w	r3, r9, r9
 80050d0:	eb4a 040a 	adc.w	r4, sl, sl
 80050d4:	4699      	mov	r9, r3
 80050d6:	46a2      	mov	sl, r4
 80050d8:	eb19 090b 	adds.w	r9, r9, fp
 80050dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050f4:	4689      	mov	r9, r1
 80050f6:	4692      	mov	sl, r2
 80050f8:	eb1b 0509 	adds.w	r5, fp, r9
 80050fc:	eb4c 060a 	adc.w	r6, ip, sl
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4619      	mov	r1, r3
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	0094      	lsls	r4, r2, #2
 8005114:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005118:	008b      	lsls	r3, r1, #2
 800511a:	461a      	mov	r2, r3
 800511c:	4623      	mov	r3, r4
 800511e:	4628      	mov	r0, r5
 8005120:	4631      	mov	r1, r6
 8005122:	f7fb f8cd 	bl	80002c0 <__aeabi_uldivmod>
 8005126:	4603      	mov	r3, r0
 8005128:	460c      	mov	r4, r1
 800512a:	461a      	mov	r2, r3
 800512c:	4b9a      	ldr	r3, [pc, #616]	; (8005398 <UART_SetConfig+0x6f4>)
 800512e:	fba3 1302 	umull	r1, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2164      	movs	r1, #100	; 0x64
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	3332      	adds	r3, #50	; 0x32
 8005140:	4a95      	ldr	r2, [pc, #596]	; (8005398 <UART_SetConfig+0x6f4>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514c:	4498      	add	r8, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	469b      	mov	fp, r3
 8005152:	f04f 0c00 	mov.w	ip, #0
 8005156:	46d9      	mov	r9, fp
 8005158:	46e2      	mov	sl, ip
 800515a:	eb19 0309 	adds.w	r3, r9, r9
 800515e:	eb4a 040a 	adc.w	r4, sl, sl
 8005162:	4699      	mov	r9, r3
 8005164:	46a2      	mov	sl, r4
 8005166:	eb19 090b 	adds.w	r9, r9, fp
 800516a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800517e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005182:	4689      	mov	r9, r1
 8005184:	4692      	mov	sl, r2
 8005186:	eb1b 0509 	adds.w	r5, fp, r9
 800518a:	eb4c 060a 	adc.w	r6, ip, sl
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4619      	mov	r1, r3
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	f04f 0400 	mov.w	r4, #0
 80051a0:	0094      	lsls	r4, r2, #2
 80051a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051a6:	008b      	lsls	r3, r1, #2
 80051a8:	461a      	mov	r2, r3
 80051aa:	4623      	mov	r3, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	4631      	mov	r1, r6
 80051b0:	f7fb f886 	bl	80002c0 <__aeabi_uldivmod>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b77      	ldr	r3, [pc, #476]	; (8005398 <UART_SetConfig+0x6f4>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	; 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	3332      	adds	r3, #50	; 0x32
 80051ce:	4a72      	ldr	r2, [pc, #456]	; (8005398 <UART_SetConfig+0x6f4>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 020f 	and.w	r2, r3, #15
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4442      	add	r2, r8
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	e0d0      	b.n	8005386 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fe fe32 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 80051e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	469a      	mov	sl, r3
 80051ee:	f04f 0b00 	mov.w	fp, #0
 80051f2:	46d0      	mov	r8, sl
 80051f4:	46d9      	mov	r9, fp
 80051f6:	eb18 0308 	adds.w	r3, r8, r8
 80051fa:	eb49 0409 	adc.w	r4, r9, r9
 80051fe:	4698      	mov	r8, r3
 8005200:	46a1      	mov	r9, r4
 8005202:	eb18 080a 	adds.w	r8, r8, sl
 8005206:	eb49 090b 	adc.w	r9, r9, fp
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005216:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800521a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800521e:	4688      	mov	r8, r1
 8005220:	4691      	mov	r9, r2
 8005222:	eb1a 0508 	adds.w	r5, sl, r8
 8005226:	eb4b 0609 	adc.w	r6, fp, r9
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4619      	mov	r1, r3
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	f04f 0400 	mov.w	r4, #0
 800523c:	0094      	lsls	r4, r2, #2
 800523e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	461a      	mov	r2, r3
 8005246:	4623      	mov	r3, r4
 8005248:	4628      	mov	r0, r5
 800524a:	4631      	mov	r1, r6
 800524c:	f7fb f838 	bl	80002c0 <__aeabi_uldivmod>
 8005250:	4603      	mov	r3, r0
 8005252:	460c      	mov	r4, r1
 8005254:	461a      	mov	r2, r3
 8005256:	4b50      	ldr	r3, [pc, #320]	; (8005398 <UART_SetConfig+0x6f4>)
 8005258:	fba3 2302 	umull	r2, r3, r3, r2
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	469b      	mov	fp, r3
 8005266:	f04f 0c00 	mov.w	ip, #0
 800526a:	46d9      	mov	r9, fp
 800526c:	46e2      	mov	sl, ip
 800526e:	eb19 0309 	adds.w	r3, r9, r9
 8005272:	eb4a 040a 	adc.w	r4, sl, sl
 8005276:	4699      	mov	r9, r3
 8005278:	46a2      	mov	sl, r4
 800527a:	eb19 090b 	adds.w	r9, r9, fp
 800527e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800528e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005296:	4689      	mov	r9, r1
 8005298:	4692      	mov	sl, r2
 800529a:	eb1b 0509 	adds.w	r5, fp, r9
 800529e:	eb4c 060a 	adc.w	r6, ip, sl
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4619      	mov	r1, r3
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	f04f 0400 	mov.w	r4, #0
 80052b4:	0094      	lsls	r4, r2, #2
 80052b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052ba:	008b      	lsls	r3, r1, #2
 80052bc:	461a      	mov	r2, r3
 80052be:	4623      	mov	r3, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	4631      	mov	r1, r6
 80052c4:	f7fa fffc 	bl	80002c0 <__aeabi_uldivmod>
 80052c8:	4603      	mov	r3, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	461a      	mov	r2, r3
 80052ce:	4b32      	ldr	r3, [pc, #200]	; (8005398 <UART_SetConfig+0x6f4>)
 80052d0:	fba3 1302 	umull	r1, r3, r3, r2
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	2164      	movs	r1, #100	; 0x64
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	3332      	adds	r3, #50	; 0x32
 80052e2:	4a2d      	ldr	r2, [pc, #180]	; (8005398 <UART_SetConfig+0x6f4>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ee:	4498      	add	r8, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	469b      	mov	fp, r3
 80052f4:	f04f 0c00 	mov.w	ip, #0
 80052f8:	46d9      	mov	r9, fp
 80052fa:	46e2      	mov	sl, ip
 80052fc:	eb19 0309 	adds.w	r3, r9, r9
 8005300:	eb4a 040a 	adc.w	r4, sl, sl
 8005304:	4699      	mov	r9, r3
 8005306:	46a2      	mov	sl, r4
 8005308:	eb19 090b 	adds.w	r9, r9, fp
 800530c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005310:	f04f 0100 	mov.w	r1, #0
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800531c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005320:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005324:	4689      	mov	r9, r1
 8005326:	4692      	mov	sl, r2
 8005328:	eb1b 0509 	adds.w	r5, fp, r9
 800532c:	eb4c 060a 	adc.w	r6, ip, sl
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4619      	mov	r1, r3
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	f04f 0400 	mov.w	r4, #0
 8005342:	0094      	lsls	r4, r2, #2
 8005344:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005348:	008b      	lsls	r3, r1, #2
 800534a:	461a      	mov	r2, r3
 800534c:	4623      	mov	r3, r4
 800534e:	4628      	mov	r0, r5
 8005350:	4631      	mov	r1, r6
 8005352:	f7fa ffb5 	bl	80002c0 <__aeabi_uldivmod>
 8005356:	4603      	mov	r3, r0
 8005358:	460c      	mov	r4, r1
 800535a:	461a      	mov	r2, r3
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <UART_SetConfig+0x6f4>)
 800535e:	fba3 1302 	umull	r1, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2164      	movs	r1, #100	; 0x64
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	3332      	adds	r3, #50	; 0x32
 8005370:	4a09      	ldr	r2, [pc, #36]	; (8005398 <UART_SetConfig+0x6f4>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f003 020f 	and.w	r2, r3, #15
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4442      	add	r2, r8
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	e7ff      	b.n	8005386 <UART_SetConfig+0x6e2>
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005390:	40011000 	.word	0x40011000
 8005394:	40011400 	.word	0x40011400
 8005398:	51eb851f 	.word	0x51eb851f

0800539c <_ZN4OLEDC1Ev>:

#include "RJA_SSD1306.h"

constexpr unsigned char OLED::font1[];

OLED::OLED()
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	4a09      	ldr	r2, [pc, #36]	; (80053cc <_ZN4OLEDC1Ev+0x30>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2278      	movs	r2, #120	; 0x78
 80053ae:	711a      	strb	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	227a      	movs	r2, #122	; 0x7a
 80053b4:	715a      	strb	r2, [r3, #5]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	719a      	strb	r2, [r3, #6]
{
	// TODO Auto-generated constructor stub

}
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	08006da8 	.word	0x08006da8

080053d0 <_ZN4OLEDD1Ev>:

OLED::~OLED()
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	4a04      	ldr	r2, [pc, #16]	; (80053ec <_ZN4OLEDD1Ev+0x1c>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	08006da8 	.word	0x08006da8

080053f0 <_ZN4OLEDD0Ev>:
OLED::~OLED()
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
}
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ffe9 	bl	80053d0 <_ZN4OLEDD1Ev>
 80053fe:	f242 010c 	movw	r1, #8204	; 0x200c
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 face 	bl	80059a4 <_ZdlPvj>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <_ZN4OLED4initEP19__I2C_HandleTypeDef>:

void OLED::init(I2C_HandleTypeDef *hi2c1)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af02      	add	r7, sp, #8
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
	uint8_t I2CBuff[2];
		//uint16_t OLEDCAddress = 0x78;
		hi2cI = hi2c1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	609a      	str	r2, [r3, #8]

		//display off
		I2CBuff[0] = 0x00;
 8005422:	2300      	movs	r3, #0
 8005424:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 8005426:	23ae      	movs	r3, #174	; 0xae
 8005428:	737b      	strb	r3, [r7, #13]
		//memory mode: horizontal addressing
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6898      	ldr	r0, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	b299      	uxth	r1, r3
 8005434:	f107 020c 	add.w	r2, r7, #12
 8005438:	230a      	movs	r3, #10
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	2302      	movs	r3, #2
 800543e:	f7fd ffdd 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005442:	2300      	movs	r3, #0
 8005444:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x20;	//memory mode
 8005446:	2320      	movs	r3, #32
 8005448:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6898      	ldr	r0, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	791b      	ldrb	r3, [r3, #4]
 8005452:	b299      	uxth	r1, r3
 8005454:	f107 020c 	add.w	r2, r7, #12
 8005458:	230a      	movs	r3, #10
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2302      	movs	r3, #2
 800545e:	f7fd ffcd 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005462:	2300      	movs	r3, #0
 8005464:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00;	//horizontal addressing
 8005466:	2300      	movs	r3, #0
 8005468:	737b      	strb	r3, [r7, #13]
		//scan starting line
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6898      	ldr	r0, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	791b      	ldrb	r3, [r3, #4]
 8005472:	b299      	uxth	r1, r3
 8005474:	f107 020c 	add.w	r2, r7, #12
 8005478:	230a      	movs	r3, #10
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2302      	movs	r3, #2
 800547e:	f7fd ffbd 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005482:	2300      	movs	r3, #0
 8005484:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6898      	ldr	r0, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	791b      	ldrb	r3, [r3, #4]
 8005492:	b299      	uxth	r1, r3
 8005494:	f107 020c 	add.w	r2, r7, #12
 8005498:	230a      	movs	r3, #10
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2302      	movs	r3, #2
 800549e:	f7fd ffad 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80054a2:	2300      	movs	r3, #0
 80054a4:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 80054a6:	2300      	movs	r3, #0
 80054a8:	737b      	strb	r3, [r7, #13]
		//charge pump on (2 commands)
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6898      	ldr	r0, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	791b      	ldrb	r3, [r3, #4]
 80054b2:	b299      	uxth	r1, r3
 80054b4:	f107 020c 	add.w	r2, r7, #12
 80054b8:	230a      	movs	r3, #10
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2302      	movs	r3, #2
 80054be:	f7fd ff9d 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80054c2:	2300      	movs	r3, #0
 80054c4:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x8D;
 80054c6:	238d      	movs	r3, #141	; 0x8d
 80054c8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6898      	ldr	r0, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	791b      	ldrb	r3, [r3, #4]
 80054d2:	b299      	uxth	r1, r3
 80054d4:	f107 020c 	add.w	r2, r7, #12
 80054d8:	230a      	movs	r3, #10
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	2302      	movs	r3, #2
 80054de:	f7fd ff8d 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80054e2:	2300      	movs	r3, #0
 80054e4:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x14;
 80054e6:	2314      	movs	r3, #20
 80054e8:	737b      	strb	r3, [r7, #13]
		//entire display on, from RAM content
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6898      	ldr	r0, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	791b      	ldrb	r3, [r3, #4]
 80054f2:	b299      	uxth	r1, r3
 80054f4:	f107 020c 	add.w	r2, r7, #12
 80054f8:	230a      	movs	r3, #10
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2302      	movs	r3, #2
 80054fe:	f7fd ff7d 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005502:	2300      	movs	r3, #0
 8005504:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 8005506:	23a4      	movs	r3, #164	; 0xa4
 8005508:	737b      	strb	r3, [r7, #13]
		//display on
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6898      	ldr	r0, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	791b      	ldrb	r3, [r3, #4]
 8005512:	b299      	uxth	r1, r3
 8005514:	f107 020c 	add.w	r2, r7, #12
 8005518:	230a      	movs	r3, #10
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2302      	movs	r3, #2
 800551e:	f7fd ff6d 	bl	80033fc <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 8005522:	2300      	movs	r3, #0
 8005524:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 8005526:	23af      	movs	r3, #175	; 0xaf
 8005528:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6898      	ldr	r0, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	791b      	ldrb	r3, [r3, #4]
 8005532:	b299      	uxth	r1, r3
 8005534:	f107 020c 	add.w	r2, r7, #12
 8005538:	230a      	movs	r3, #10
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2302      	movs	r3, #2
 800553e:	f7fd ff5d 	bl	80033fc <HAL_I2C_Master_Transmit>

		//initialise frame to zeros i.e. "empty" GDDRAM
		for(int r = 0; r < 64; r++)
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b3f      	cmp	r3, #63	; 0x3f
 800554a:	dc15      	bgt.n	8005578 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x166>
		{
			for(int c = 0; c < 128; c++)
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b7f      	cmp	r3, #127	; 0x7f
 8005554:	dc0c      	bgt.n	8005570 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x15e>
			{
				//pixel(c,r,0);	//problem!
				frame[c][r] = 0;
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	019b      	lsls	r3, r3, #6
 800555c:	441a      	add	r2, r3
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	330c      	adds	r3, #12
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
			for(int c = 0; c < 128; c++)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	3301      	adds	r3, #1
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e7ef      	b.n	8005550 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x13e>
		for(int r = 0; r < 64; r++)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	3301      	adds	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e7e6      	b.n	8005546 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x134>
			}
		}
}
 8005578:	bf00      	nop
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <_ZN4OLED14drawFullscreenEv>:

void OLED::drawFullscreen() //I2C_HandleTypeDef *hi2c1
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	; 0x30
 8005584:	af02      	add	r7, sp, #8
 8005586:	6078      	str	r0, [r7, #4]
	uint8_t I2CBuff[2];
	int r, c, b, row, col;
	for (r = 0; r < 8; r++)
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	2b07      	cmp	r3, #7
 8005590:	dc40      	bgt.n	8005614 <_ZN4OLED14drawFullscreenEv+0x94>
	{
		for (c = 0; c < 128; c++)
 8005592:	2300      	movs	r3, #0
 8005594:	623b      	str	r3, [r7, #32]
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	2b7f      	cmp	r3, #127	; 0x7f
 800559a:	dc37      	bgt.n	800560c <_ZN4OLED14drawFullscreenEv+0x8c>
		{
			uint8_t temp = 0x00;
 800559c:	2300      	movs	r3, #0
 800559e:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 80055a0:	2300      	movs	r3, #0
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b07      	cmp	r3, #7
 80055a8:	dc1c      	bgt.n	80055e4 <_ZN4OLED14drawFullscreenEv+0x64>
			{
				row = r*8 + b;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
				col = c;
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	613b      	str	r3, [r7, #16]
				temp |= (frame[col][row]) << b;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	019b      	lsls	r3, r3, #6
 80055be:	441a      	add	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4413      	add	r3, r2
 80055c4:	330c      	adds	r3, #12
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	b25a      	sxtb	r2, r3
 80055d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b25b      	sxtb	r3, r3
 80055da:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	e7df      	b.n	80055a4 <_ZN4OLED14drawFullscreenEv+0x24>
			}
			//
			I2CBuff[0] = 0x40;	//to write data
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	733b      	strb	r3, [r7, #12]
			I2CBuff[1] = temp;
 80055e8:	7efb      	ldrb	r3, [r7, #27]
 80055ea:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6898      	ldr	r0, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	791b      	ldrb	r3, [r3, #4]
 80055f4:	b299      	uxth	r1, r3
 80055f6:	f107 020c 	add.w	r2, r7, #12
 80055fa:	2305      	movs	r3, #5
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2302      	movs	r3, #2
 8005600:	f7fd fefc 	bl	80033fc <HAL_I2C_Master_Transmit>
		for (c = 0; c < 128; c++)
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	3301      	adds	r3, #1
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	e7c4      	b.n	8005596 <_ZN4OLED14drawFullscreenEv+0x16>
	for (r = 0; r < 8; r++)
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	3301      	adds	r3, #1
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e7bb      	b.n	800558c <_ZN4OLED14drawFullscreenEv+0xc>
		}
	}
}
 8005614:	bf00      	nop
 8005616:	3728      	adds	r7, #40	; 0x28
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZN4OLED11getCAddressEv>:
	}
	HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
}

uint8_t OLED::getCAddress()
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	return CAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	791b      	ldrb	r3, [r3, #4]
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <_ZN4OLED5pixelEiibb>:
{
	return DAddress;
}

void OLED::pixel(int x, int y, bool colour, bool locked)	//use locked when inconvenient to lock from outside
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	70fb      	strb	r3, [r7, #3]
	if(locked)
 8005642:	7e3b      	ldrb	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <_ZN4OLED5pixelEiibb+0x2c>
	{
		if(x < 0 || y < 0 || x >= width || y >= height)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	db12      	blt.n	8005674 <_ZN4OLED5pixelEiibb+0x40>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	db0f      	blt.n	8005674 <_ZN4OLED5pixelEiibb+0x40>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b7f      	cmp	r3, #127	; 0x7f
 8005658:	dc0c      	bgt.n	8005674 <_ZN4OLED5pixelEiibb+0x40>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b3f      	cmp	r3, #63	; 0x3f
 800565e:	dc09      	bgt.n	8005674 <_ZN4OLED5pixelEiibb+0x40>
		{
			return;
		}
	}
	frame[x][y] = colour;
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	441a      	add	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4413      	add	r3, r2
 800566c:	330c      	adds	r3, #12
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e000      	b.n	8005676 <_ZN4OLED5pixelEiibb+0x42>
			return;
 8005674:	bf00      	nop
}
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <_ZN4OLED8fillRectEiiiib>:
	line(x0, y0, x0, y0+rectHeight, colour, lineWidth);
	line(x1, y1-rectHeight, x1, y1, colour, lineWidth);
}

void OLED::fillRect(int x0, int y0, int x1, int y1, bool colour)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
	fill(x0, y0, x1, y1, colour);
 800568e:	7f3b      	ldrb	r3, [r7, #28]
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f829 	bl	80056f4 <_ZN4OLED4fillEiiiib>
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <_ZN4OLED4fillEb>:
	connectPoints(X, Y, pointsNum, colour, lineWidth);
	line(X[pointsNum - 1], Y[pointsNum - 1], X[0], Y[0], colour, lineWidth);
}

void OLED::fill(bool colour)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af02      	add	r7, sp, #8
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70fb      	strb	r3, [r7, #3]
	for(int r = 0; r < 64; r++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b3f      	cmp	r3, #63	; 0x3f
 80056be:	dc15      	bgt.n	80056ec <_ZN4OLED4fillEb+0x42>
	{
		for(int c = 0; c < 128; c++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b7f      	cmp	r3, #127	; 0x7f
 80056c8:	dc0c      	bgt.n	80056e4 <_ZN4OLED4fillEb+0x3a>
		{
			pixel(c,r,colour);	//frame[c][r] = colour;
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff ffac 	bl	8005634 <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	3301      	adds	r3, #1
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	e7ef      	b.n	80056c4 <_ZN4OLED4fillEb+0x1a>
	for(int r = 0; r < 64; r++)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e7e6      	b.n	80056ba <_ZN4OLED4fillEb+0x10>
		}
	}
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <_ZN4OLED4fillEiiiib>:
void OLED::fill(int x0, int y0, int x1, int y1, bool colour)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
	for(int r = y0; r <= y1; r++)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	429a      	cmp	r2, r3
 800570c:	dc17      	bgt.n	800573e <_ZN4OLED4fillEiiiib+0x4a>
	{
		for(int c = x0; c <= x1; c++)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	dc0d      	bgt.n	8005736 <_ZN4OLED4fillEiiiib+0x42>
		{
			pixel(c, r, colour, 1);	//frame[c][r] = colour;
 800571a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800571e:	2301      	movs	r3, #1
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6939      	ldr	r1, [r7, #16]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff83 	bl	8005634 <_ZN4OLED5pixelEiibb>
		for(int c = x0; c <= x1; c++)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3301      	adds	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e7ed      	b.n	8005712 <_ZN4OLED4fillEiiiib+0x1e>
	for(int r = y0; r <= y1; r++)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	3301      	adds	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	e7e3      	b.n	8005706 <_ZN4OLED4fillEiiiib+0x12>
		}
	}
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <_ZN4OLED9characterEiihbbi>:
		}
	}
}

void OLED::character(int x, int y, unsigned char c, bool colour, bool bg, int size)
{
 8005748:	b5b0      	push	{r4, r5, r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	70fb      	strb	r3, [r7, #3]
	if((x >= width)            || // Clip right
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b7f      	cmp	r3, #127	; 0x7f
 800575a:	f300 80df 	bgt.w	800591c <_ZN4OLED9characterEiihbbi+0x1d4>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b3f      	cmp	r3, #63	; 0x3f
 8005762:	f300 80db 	bgt.w	800591c <_ZN4OLED9characterEiihbbi+0x1d4>
	 (y >= height)           || // Clip bottom
	 ((x + 6 * size - 1) < 0) || // Clip left
 8005766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4413      	add	r3, r2
 8005776:	3b01      	subs	r3, #1
	 (y >= height)           || // Clip bottom
 8005778:	2b00      	cmp	r3, #0
 800577a:	f2c0 80cf 	blt.w	800591c <_ZN4OLED9characterEiihbbi+0x1d4>
	 ((y + 8 * size - 1) < 0))   // Clip top
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	00da      	lsls	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4413      	add	r3, r2
 8005786:	3b01      	subs	r3, #1
	 ((x + 6 * size - 1) < 0) || // Clip left
 8005788:	2b00      	cmp	r3, #0
 800578a:	f2c0 80c7 	blt.w	800591c <_ZN4OLED9characterEiihbbi+0x1d4>
	return;

	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	799b      	ldrb	r3, [r3, #6]
 8005792:	f083 0301 	eor.w	r3, r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <_ZN4OLED9characterEiihbbi+0x60>
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	2baf      	cmp	r3, #175	; 0xaf
 80057a0:	d902      	bls.n	80057a8 <_ZN4OLED9characterEiihbbi+0x60>
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	3301      	adds	r3, #1
 80057a6:	70fb      	strb	r3, [r7, #3]

	for (int8_t i=0; i<6; i++ )
 80057a8:	2300      	movs	r3, #0
 80057aa:	75fb      	strb	r3, [r7, #23]
 80057ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057b0:	2b05      	cmp	r3, #5
 80057b2:	f300 80b4 	bgt.w	800591e <_ZN4OLED9characterEiihbbi+0x1d6>
	{
		uint8_t line;
		if (i == 5)
 80057b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057ba:	2b05      	cmp	r3, #5
 80057bc:	d102      	bne.n	80057c4 <_ZN4OLED9characterEiihbbi+0x7c>
			line = 0x0;
 80057be:	2300      	movs	r3, #0
 80057c0:	75bb      	strb	r3, [r7, #22]
 80057c2:	e009      	b.n	80057d8 <_ZN4OLED9characterEiihbbi+0x90>
		else
		{
			line = pgm_read_byte(&font1[(c*5)+i]);
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057d0:	4413      	add	r3, r2
 80057d2:	4a54      	ldr	r2, [pc, #336]	; (8005924 <_ZN4OLED9characterEiihbbi+0x1dc>)
 80057d4:	5cd3      	ldrb	r3, [r2, r3]
 80057d6:	75bb      	strb	r3, [r7, #22]
		}
		for (int8_t j = 0; j<8; j++)
 80057d8:	2300      	movs	r3, #0
 80057da:	757b      	strb	r3, [r7, #21]
 80057dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80057e0:	2b07      	cmp	r3, #7
 80057e2:	f300 8094 	bgt.w	800590e <_ZN4OLED9characterEiihbbi+0x1c6>
		{
			if (line & 0x1)
 80057e6:	7dbb      	ldrb	r3, [r7, #22]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d03f      	beq.n	8005870 <_ZN4OLED9characterEiihbbi+0x128>
			{
				if (size == 1) // default size
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d110      	bne.n	8005818 <_ZN4OLED9characterEiihbbi+0xd0>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = colour;
 80057f6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	18d1      	adds	r1, r2, r3
 80057fe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	441a      	add	r2, r3
 8005806:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800580a:	2301      	movs	r3, #1
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4603      	mov	r3, r0
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff ff0f 	bl	8005634 <_ZN4OLED5pixelEiibb>
 8005816:	e070      	b.n	80058fa <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), colour);
 8005818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800581c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581e:	fb02 f203 	mul.w	r2, r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	18d0      	adds	r0, r2, r3
 8005826:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800582a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582c:	fb02 f203 	mul.w	r2, r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	18d4      	adds	r4, r2, r3
 8005834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	441a      	add	r2, r3
 800583a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800583e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	18d5      	adds	r5, r2, r3
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	441a      	add	r2, r3
 800584e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	4413      	add	r3, r2
 800585a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800585e:	9201      	str	r2, [sp, #4]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	462b      	mov	r3, r5
 8005864:	4622      	mov	r2, r4
 8005866:	4601      	mov	r1, r0
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff ff09 	bl	8005680 <_ZN4OLED8fillRectEiiiib>
 800586e:	e044      	b.n	80058fa <_ZN4OLED9characterEiihbbi+0x1b2>
				}
			}
			else if (bg != colour)
 8005870:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005878:	429a      	cmp	r2, r3
 800587a:	d03e      	beq.n	80058fa <_ZN4OLED9characterEiihbbi+0x1b2>
			{
				if (size == 1) // default size
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	2b01      	cmp	r3, #1
 8005880:	d110      	bne.n	80058a4 <_ZN4OLED9characterEiihbbi+0x15c>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = bg;
 8005882:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	18d1      	adds	r1, r2, r3
 800588a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	441a      	add	r2, r3
 8005892:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8005896:	2301      	movs	r3, #1
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	4603      	mov	r3, r0
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fec9 	bl	8005634 <_ZN4OLED5pixelEiibb>
 80058a2:	e02a      	b.n	80058fa <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 80058a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058aa:	fb02 f203 	mul.w	r2, r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	18d0      	adds	r0, r2, r3
 80058b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80058b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b8:	fb02 f203 	mul.w	r2, r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	18d4      	adds	r4, r2, r3
 80058c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	441a      	add	r2, r3
 80058c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	18d5      	adds	r5, r2, r3
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	441a      	add	r2, r3
 80058da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80058de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80058ea:	9201      	str	r2, [sp, #4]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	462b      	mov	r3, r5
 80058f0:	4622      	mov	r2, r4
 80058f2:	4601      	mov	r1, r0
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff fec3 	bl	8005680 <_ZN4OLED8fillRectEiiiib>
				}
			}
			line >>= 1;
 80058fa:	7dbb      	ldrb	r3, [r7, #22]
 80058fc:	105b      	asrs	r3, r3, #1
 80058fe:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j<8; j++)
 8005900:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3301      	adds	r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	757b      	strb	r3, [r7, #21]
 800590c:	e766      	b.n	80057dc <_ZN4OLED9characterEiihbbi+0x94>
	for (int8_t i=0; i<6; i++ )
 800590e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	3301      	adds	r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	75fb      	strb	r3, [r7, #23]
 800591a:	e747      	b.n	80057ac <_ZN4OLED9characterEiihbbi+0x64>
	return;
 800591c:	bf00      	nop
		}
	}
}
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bdb0      	pop	{r4, r5, r7, pc}
 8005924:	080068a0 	.word	0x080068a0

08005928 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>:

void OLED::text(int x, int y, string s, bool colour, bool bg, int size)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b08b      	sub	sp, #44	; 0x2c
 800592c:	af04      	add	r7, sp, #16
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
	int offset = size*6;
 8005936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005938:	4613      	mov	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	613b      	str	r3, [r7, #16]
	for(string::size_type i = 0; i < s.size(); i++)
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	6838      	ldr	r0, [r7, #0]
 8005948:	f000 f92a 	bl	8005ba0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800594c:	4602      	mov	r2, r0
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4293      	cmp	r3, r2
 8005952:	bf34      	ite	cc
 8005954:	2301      	movcc	r3, #1
 8005956:	2300      	movcs	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01e      	beq.n	800599c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x74>
	{
		character(x+(offset*i), y, s[i], colour, bg, size);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	fb02 f203 	mul.w	r2, r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4413      	add	r3, r2
 800596a:	461c      	mov	r4, r3
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	6838      	ldr	r0, [r7, #0]
 8005970:	f000 f918 	bl	8005ba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005974:	4603      	mov	r3, r0
 8005976:	781a      	ldrb	r2, [r3, #0]
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	9302      	str	r3, [sp, #8]
 800597c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4621      	mov	r1, r4
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff feda 	bl	8005748 <_ZN4OLED9characterEiihbbi>
	for(string::size_type i = 0; i < s.size(); i++)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3301      	adds	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e7d4      	b.n	8005946 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x1e>
	}
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd90      	pop	{r4, r7, pc}

080059a4 <_ZdlPvj>:
 80059a4:	f000 b800 	b.w	80059a8 <_ZdlPv>

080059a8 <_ZdlPv>:
 80059a8:	f000 bac0 	b.w	8005f2c <free>

080059ac <_ZNSaIcEC1Ev>:
 80059ac:	4770      	bx	lr

080059ae <_ZNSaIcED1Ev>:
 80059ae:	4770      	bx	lr

080059b0 <_ZSt19__throw_logic_errorPKc>:
 80059b0:	b508      	push	{r3, lr}
 80059b2:	f000 fa81 	bl	8005eb8 <abort>

080059b6 <_ZSt20__throw_length_errorPKc>:
 80059b6:	b508      	push	{r3, lr}
 80059b8:	f000 fa7e 	bl	8005eb8 <abort>

080059bc <_ZSt24__throw_out_of_range_fmtPKcz>:
 80059bc:	b40f      	push	{r0, r1, r2, r3}
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	f107 0410 	add.w	r4, r7, #16
 80059c8:	f854 5b04 	ldr.w	r5, [r4], #4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f7fa fc6f 	bl	80002b0 <strlen>
 80059d2:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80059d6:	f023 0307 	bic.w	r3, r3, #7
 80059da:	ebad 0d03 	sub.w	sp, sp, r3
 80059de:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80059e2:	4623      	mov	r3, r4
 80059e4:	462a      	mov	r2, r5
 80059e6:	4668      	mov	r0, sp
 80059e8:	607c      	str	r4, [r7, #4]
 80059ea:	f000 fa25 	bl	8005e38 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80059ee:	f000 fa63 	bl	8005eb8 <abort>

080059f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80059f2:	b10a      	cbz	r2, 80059f8 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80059f4:	f000 baa2 	b.w	8005f3c <memcpy>
 80059f8:	4770      	bx	lr

080059fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80059fa:	6001      	str	r1, [r0, #0]
 80059fc:	4770      	bx	lr

080059fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80059fe:	6800      	ldr	r0, [r0, #0]
 8005a00:	4770      	bx	lr

08005a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8005a02:	3008      	adds	r0, #8
 8005a04:	4770      	bx	lr

08005a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8005a06:	6081      	str	r1, [r0, #8]
 8005a08:	4770      	bx	lr

08005a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8005a0a:	6803      	ldr	r3, [r0, #0]
 8005a0c:	6041      	str	r1, [r0, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	545a      	strb	r2, [r3, r1]
 8005a12:	4770      	bx	lr

08005a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005a14:	b508      	push	{r3, lr}
 8005a16:	680b      	ldr	r3, [r1, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	da02      	bge.n	8005a22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005a1c:	4809      	ldr	r0, [pc, #36]	; (8005a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8005a1e:	f7ff ffca 	bl	80059b6 <_ZSt20__throw_length_errorPKc>
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d908      	bls.n	8005a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005a26:	0052      	lsls	r2, r2, #1
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d205      	bcs.n	8005a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005a2c:	2a00      	cmp	r2, #0
 8005a2e:	bfb6      	itet	lt
 8005a30:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8005a34:	600a      	strge	r2, [r1, #0]
 8005a36:	600b      	strlt	r3, [r1, #0]
 8005a38:	6808      	ldr	r0, [r1, #0]
 8005a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f000 b992 	b.w	8005d68 <_Znwj>
 8005a44:	08006e40 	.word	0x08006e40

08005a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f853 0b08 	ldr.w	r0, [r3], #8
 8005a4e:	4298      	cmp	r0, r3
 8005a50:	d001      	beq.n	8005a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8005a52:	f7ff bfa9 	b.w	80059a8 <_ZdlPv>
 8005a56:	4770      	bx	lr

08005a58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	6843      	ldr	r3, [r0, #4]
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	4614      	mov	r4, r2
 8005a60:	d904      	bls.n	8005a6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8005a62:	460a      	mov	r2, r1
 8005a64:	4802      	ldr	r0, [pc, #8]	; (8005a70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8005a66:	4621      	mov	r1, r4
 8005a68:	f7ff ffa8 	bl	80059bc <_ZSt24__throw_out_of_range_fmtPKcz>
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	bd10      	pop	{r4, pc}
 8005a70:	08006db0 	.word	0x08006db0

08005a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005a74:	b508      	push	{r3, lr}
 8005a76:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005a7a:	6840      	ldr	r0, [r0, #4]
 8005a7c:	3901      	subs	r1, #1
 8005a7e:	1a09      	subs	r1, r1, r0
 8005a80:	4291      	cmp	r1, r2
 8005a82:	d202      	bcs.n	8005a8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff96 	bl	80059b6 <_ZSt20__throw_length_errorPKc>
 8005a8a:	bd08      	pop	{r3, pc}

08005a8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8005a8c:	6803      	ldr	r3, [r0, #0]
 8005a8e:	428b      	cmp	r3, r1
 8005a90:	d806      	bhi.n	8005aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8005a92:	6840      	ldr	r0, [r0, #4]
 8005a94:	4418      	add	r0, r3
 8005a96:	4281      	cmp	r1, r0
 8005a98:	bf94      	ite	ls
 8005a9a:	2000      	movls	r0, #0
 8005a9c:	2001      	movhi	r0, #1
 8005a9e:	4770      	bx	lr
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	4770      	bx	lr

08005aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005aa4:	2a01      	cmp	r2, #1
 8005aa6:	b510      	push	{r4, lr}
 8005aa8:	d102      	bne.n	8005ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005aaa:	780a      	ldrb	r2, [r1, #0]
 8005aac:	7002      	strb	r2, [r0, #0]
 8005aae:	bd10      	pop	{r4, pc}
 8005ab0:	f7ff ff9f 	bl	80059f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005ab4:	e7fb      	b.n	8005aae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8005ab6:	2a01      	cmp	r2, #1
 8005ab8:	b430      	push	{r4, r5}
 8005aba:	d103      	bne.n	8005ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8005abc:	780b      	ldrb	r3, [r1, #0]
 8005abe:	7003      	strb	r3, [r0, #0]
 8005ac0:	bc30      	pop	{r4, r5}
 8005ac2:	4770      	bx	lr
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	d0fb      	beq.n	8005ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8005ac8:	bc30      	pop	{r4, r5}
 8005aca:	f000 ba42 	b.w	8005f52 <memmove>

08005ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8005ace:	b508      	push	{r3, lr}
 8005ad0:	1a52      	subs	r2, r2, r1
 8005ad2:	f7ff ffe7 	bl	8005aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005ad6:	bd08      	pop	{r3, pc}

08005ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005ad8:	b508      	push	{r3, lr}
 8005ada:	1a52      	subs	r2, r2, r1
 8005adc:	f7ff ffe2 	bl	8005aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005ae0:	bd08      	pop	{r3, pc}

08005ae2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8005ae2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8005aea:	4616      	mov	r6, r2
 8005aec:	6842      	ldr	r2, [r0, #4]
 8005aee:	469a      	mov	sl, r3
 8005af0:	eba8 0306 	sub.w	r3, r8, r6
 8005af4:	1a57      	subs	r7, r2, r1
 8005af6:	4413      	add	r3, r2
 8005af8:	6802      	ldr	r2, [r0, #0]
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	f100 0308 	add.w	r3, r0, #8
 8005b00:	429a      	cmp	r2, r3
 8005b02:	460d      	mov	r5, r1
 8005b04:	bf14      	ite	ne
 8005b06:	6882      	ldrne	r2, [r0, #8]
 8005b08:	220f      	moveq	r2, #15
 8005b0a:	a901      	add	r1, sp, #4
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	f7ff ff81 	bl	8005a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005b12:	1bbf      	subs	r7, r7, r6
 8005b14:	4681      	mov	r9, r0
 8005b16:	b11d      	cbz	r5, 8005b20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8005b18:	462a      	mov	r2, r5
 8005b1a:	6821      	ldr	r1, [r4, #0]
 8005b1c:	f7ff ffc2 	bl	8005aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005b20:	f1ba 0f00 	cmp.w	sl, #0
 8005b24:	d008      	beq.n	8005b38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8005b26:	f1b8 0f00 	cmp.w	r8, #0
 8005b2a:	d005      	beq.n	8005b38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	4651      	mov	r1, sl
 8005b30:	eb09 0005 	add.w	r0, r9, r5
 8005b34:	f7ff ffb6 	bl	8005aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005b38:	b147      	cbz	r7, 8005b4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	442e      	add	r6, r5
 8005b3e:	eb05 0008 	add.w	r0, r5, r8
 8005b42:	463a      	mov	r2, r7
 8005b44:	4431      	add	r1, r6
 8005b46:	4448      	add	r0, r9
 8005b48:	f7ff ffac 	bl	8005aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff ff7b 	bl	8005a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005b52:	9b01      	ldr	r3, [sp, #4]
 8005b54:	f8c4 9000 	str.w	r9, [r4]
 8005b58:	60a3      	str	r3, [r4, #8]
 8005b5a:	b002      	add	sp, #8
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	4604      	mov	r4, r0
 8005b64:	460e      	mov	r6, r1
 8005b66:	3008      	adds	r0, #8
 8005b68:	6020      	str	r0, [r4, #0]
 8005b6a:	f856 3b08 	ldr.w	r3, [r6], #8
 8005b6e:	429e      	cmp	r6, r3
 8005b70:	460d      	mov	r5, r1
 8005b72:	d10b      	bne.n	8005b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8005b74:	2210      	movs	r2, #16
 8005b76:	4631      	mov	r1, r6
 8005b78:	f7ff ff3b 	bl	80059f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005b7c:	686b      	ldr	r3, [r5, #4]
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	2300      	movs	r3, #0
 8005b82:	602e      	str	r6, [r5, #0]
 8005b84:	606b      	str	r3, [r5, #4]
 8005b86:	722b      	strb	r3, [r5, #8]
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	688b      	ldr	r3, [r1, #8]
 8005b90:	60a3      	str	r3, [r4, #8]
 8005b92:	e7f3      	b.n	8005b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08005b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4604      	mov	r4, r0
 8005b98:	f7ff ff56 	bl	8005a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	bd10      	pop	{r4, pc}

08005ba0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8005ba0:	6840      	ldr	r0, [r0, #4]
 8005ba2:	4770      	bx	lr

08005ba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8005ba4:	6800      	ldr	r0, [r0, #0]
 8005ba6:	4408      	add	r0, r1
 8005ba8:	4770      	bx	lr
	...

08005bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8005bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bb2:	4614      	mov	r4, r2
 8005bb4:	4681      	mov	r9, r0
 8005bb6:	462a      	mov	r2, r5
 8005bb8:	460f      	mov	r7, r1
 8005bba:	4698      	mov	r8, r3
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8005bc0:	f7ff ff58 	bl	8005a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005bc4:	464a      	mov	r2, r9
 8005bc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005bca:	f852 6b08 	ldr.w	r6, [r2], #8
 8005bce:	4296      	cmp	r6, r2
 8005bd0:	eba5 0b04 	sub.w	fp, r5, r4
 8005bd4:	bf18      	it	ne
 8005bd6:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8005bda:	eb03 0a0b 	add.w	sl, r3, fp
 8005bde:	bf08      	it	eq
 8005be0:	220f      	moveq	r2, #15
 8005be2:	4552      	cmp	r2, sl
 8005be4:	d34e      	bcc.n	8005c84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8005be6:	443e      	add	r6, r7
 8005be8:	4641      	mov	r1, r8
 8005bea:	1bdf      	subs	r7, r3, r7
 8005bec:	4648      	mov	r0, r9
 8005bee:	1b3f      	subs	r7, r7, r4
 8005bf0:	f7ff ff4c 	bl	8005a8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8005bf4:	b170      	cbz	r0, 8005c14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8005bf6:	b137      	cbz	r7, 8005c06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8005bf8:	42ac      	cmp	r4, r5
 8005bfa:	d004      	beq.n	8005c06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8005bfc:	463a      	mov	r2, r7
 8005bfe:	1931      	adds	r1, r6, r4
 8005c00:	1970      	adds	r0, r6, r5
 8005c02:	f7ff ff58 	bl	8005ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005c06:	b30d      	cbz	r5, 8005c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff ff49 	bl	8005aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005c12:	e01b      	b.n	8005c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005c14:	b135      	cbz	r5, 8005c24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 8005c16:	42ac      	cmp	r4, r5
 8005c18:	d33c      	bcc.n	8005c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7ff ff49 	bl	8005ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005c24:	b197      	cbz	r7, 8005c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005c26:	42ac      	cmp	r4, r5
 8005c28:	d010      	beq.n	8005c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	1931      	adds	r1, r6, r4
 8005c2e:	1970      	adds	r0, r6, r5
 8005c30:	f7ff ff41 	bl	8005ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005c34:	42ac      	cmp	r4, r5
 8005c36:	d209      	bcs.n	8005c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005c38:	4434      	add	r4, r6
 8005c3a:	eb08 0305 	add.w	r3, r8, r5
 8005c3e:	429c      	cmp	r4, r3
 8005c40:	d30f      	bcc.n	8005c62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8005c42:	462a      	mov	r2, r5
 8005c44:	4641      	mov	r1, r8
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff ff35 	bl	8005ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005c4c:	f8d9 3000 	ldr.w	r3, [r9]
 8005c50:	f8c9 a004 	str.w	sl, [r9, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	4648      	mov	r0, r9
 8005c58:	f803 200a 	strb.w	r2, [r3, sl]
 8005c5c:	b003      	add	sp, #12
 8005c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c62:	4544      	cmp	r4, r8
 8005c64:	d803      	bhi.n	8005c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 8005c66:	462a      	mov	r2, r5
 8005c68:	eb08 010b 	add.w	r1, r8, fp
 8005c6c:	e7ce      	b.n	8005c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8005c6e:	eba4 0408 	sub.w	r4, r4, r8
 8005c72:	4622      	mov	r2, r4
 8005c74:	4641      	mov	r1, r8
 8005c76:	4630      	mov	r0, r6
 8005c78:	f7ff ff1d 	bl	8005ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005c7c:	1b2a      	subs	r2, r5, r4
 8005c7e:	1971      	adds	r1, r6, r5
 8005c80:	1930      	adds	r0, r6, r4
 8005c82:	e7c4      	b.n	8005c0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8005c84:	9500      	str	r5, [sp, #0]
 8005c86:	4643      	mov	r3, r8
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	4648      	mov	r0, r9
 8005c8e:	f7ff ff28 	bl	8005ae2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005c92:	e7db      	b.n	8005c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005c94:	2f00      	cmp	r7, #0
 8005c96:	d0cf      	beq.n	8005c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8005c98:	e7c7      	b.n	8005c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8005c9a:	bf00      	nop
 8005c9c:	08006de7 	.word	0x08006de7

08005ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8005ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4615      	mov	r5, r2
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8005ca8:	460f      	mov	r7, r1
 8005caa:	461e      	mov	r6, r3
 8005cac:	f7ff fed4 	bl	8005a58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8005cb0:	6862      	ldr	r2, [r4, #4]
 8005cb2:	9b08      	ldr	r3, [sp, #32]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	1bd2      	subs	r2, r2, r7
 8005cb8:	42aa      	cmp	r2, r5
 8005cba:	4601      	mov	r1, r0
 8005cbc:	4633      	mov	r3, r6
 8005cbe:	bf28      	it	cs
 8005cc0:	462a      	movcs	r2, r5
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7ff ff72 	bl	8005bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8005cc8:	b003      	add	sp, #12
 8005cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ccc:	08006e2a 	.word	0x08006e2a

08005cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8005cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4614      	mov	r4, r2
 8005cd8:	460e      	mov	r6, r1
 8005cda:	f7fa fae9 	bl	80002b0 <strlen>
 8005cde:	4623      	mov	r3, r4
 8005ce0:	9000      	str	r0, [sp, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f7ff ffda 	bl	8005ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8005cec:	b002      	add	sp, #8
 8005cee:	bd70      	pop	{r4, r5, r6, pc}

08005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8005cf0:	6001      	str	r1, [r0, #0]
 8005cf2:	4770      	bx	lr

08005cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	b919      	cbnz	r1, 8005d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005cfe:	b112      	cbz	r2, 8005d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005d00:	480d      	ldr	r0, [pc, #52]	; (8005d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8005d02:	f7ff fe55 	bl	80059b0 <_ZSt19__throw_logic_errorPKc>
 8005d06:	1b73      	subs	r3, r6, r5
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	d907      	bls.n	8005d1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	a901      	add	r1, sp, #4
 8005d12:	4620      	mov	r0, r4
 8005d14:	f7ff fe7e 	bl	8005a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005d18:	9b01      	ldr	r3, [sp, #4]
 8005d1a:	6020      	str	r0, [r4, #0]
 8005d1c:	60a3      	str	r3, [r4, #8]
 8005d1e:	4632      	mov	r2, r6
 8005d20:	4629      	mov	r1, r5
 8005d22:	6820      	ldr	r0, [r4, #0]
 8005d24:	f7ff fed8 	bl	8005ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	2100      	movs	r1, #0
 8005d30:	54d1      	strb	r1, [r2, r3]
 8005d32:	b002      	add	sp, #8
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	bf00      	nop
 8005d38:	08006e00 	.word	0x08006e00

08005d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	f100 0308 	add.w	r3, r0, #8
 8005d42:	4604      	mov	r4, r0
 8005d44:	6003      	str	r3, [r0, #0]
 8005d46:	460d      	mov	r5, r1
 8005d48:	b159      	cbz	r1, 8005d62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	f7fa fab0 	bl	80002b0 <strlen>
 8005d50:	182a      	adds	r2, r5, r0
 8005d52:	4620      	mov	r0, r4
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f7ff ffcb 	bl	8005cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8005d5e:	4620      	mov	r0, r4
 8005d60:	bd38      	pop	{r3, r4, r5, pc}
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	e7f4      	b.n	8005d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08005d68 <_Znwj>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	4604      	movne	r4, r0
 8005d70:	2401      	moveq	r4, #1
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 f8d2 	bl	8005f1c <malloc>
 8005d78:	b930      	cbnz	r0, 8005d88 <_Znwj+0x20>
 8005d7a:	f000 f807 	bl	8005d8c <_ZSt15get_new_handlerv>
 8005d7e:	b908      	cbnz	r0, 8005d84 <_Znwj+0x1c>
 8005d80:	f000 f89a 	bl	8005eb8 <abort>
 8005d84:	4780      	blx	r0
 8005d86:	e7f4      	b.n	8005d72 <_Znwj+0xa>
 8005d88:	bd10      	pop	{r4, pc}
	...

08005d8c <_ZSt15get_new_handlerv>:
 8005d8c:	4b02      	ldr	r3, [pc, #8]	; (8005d98 <_ZSt15get_new_handlerv+0xc>)
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	f3bf 8f5b 	dmb	ish
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20002aa0 	.word	0x20002aa0

08005d9c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b09c      	sub	sp, #112	; 0x70
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	1a0e      	subs	r6, r1, r0
 8005da4:	4680      	mov	r8, r0
 8005da6:	2269      	movs	r2, #105	; 0x69
 8005da8:	490e      	ldr	r1, [pc, #56]	; (8005de4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8005daa:	1d38      	adds	r0, r7, #4
 8005dac:	f000 f8c6 	bl	8005f3c <memcpy>
 8005db0:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8005db4:	f023 0307 	bic.w	r3, r3, #7
 8005db8:	ebad 0d03 	sub.w	sp, sp, r3
 8005dbc:	466c      	mov	r4, sp
 8005dbe:	2268      	movs	r2, #104	; 0x68
 8005dc0:	1d39      	adds	r1, r7, #4
 8005dc2:	1c75      	adds	r5, r6, #1
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 f8b9 	bl	8005f3c <memcpy>
 8005dca:	4425      	add	r5, r4
 8005dcc:	4632      	mov	r2, r6
 8005dce:	4641      	mov	r1, r8
 8005dd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005dd4:	f000 f8b2 	bl	8005f3c <memcpy>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8005dde:	4620      	mov	r0, r4
 8005de0:	f7ff fde6 	bl	80059b0 <_ZSt19__throw_logic_errorPKc>
 8005de4:	08006e63 	.word	0x08006e63

08005de8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	b086      	sub	sp, #24
 8005dee:	466d      	mov	r5, sp
 8005df0:	f105 040c 	add.w	r4, r5, #12
 8005df4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005e34 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8005df8:	4623      	mov	r3, r4
 8005dfa:	f04f 0c0a 	mov.w	ip, #10
 8005dfe:	fbb2 f6fc 	udiv	r6, r2, ip
 8005e02:	fb0c 2216 	mls	r2, ip, r6, r2
 8005e06:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8005e0a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8005e0e:	4632      	mov	r2, r6
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	d1f4      	bne.n	8005dfe <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8005e14:	1ae4      	subs	r4, r4, r3
 8005e16:	428c      	cmp	r4, r1
 8005e18:	d808      	bhi.n	8005e2c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8005e1a:	f1c4 010c 	rsb	r1, r4, #12
 8005e1e:	4622      	mov	r2, r4
 8005e20:	4429      	add	r1, r5
 8005e22:	f000 f88b 	bl	8005f3c <memcpy>
 8005e26:	4620      	mov	r0, r4
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e30:	e7f9      	b.n	8005e26 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8005e32:	bf00      	nop
 8005e34:	08006e58 	.word	0x08006e58

08005e38 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8005e38:	3901      	subs	r1, #1
 8005e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3e:	4606      	mov	r6, r0
 8005e40:	4615      	mov	r5, r2
 8005e42:	1847      	adds	r7, r0, r1
 8005e44:	4604      	mov	r4, r0
 8005e46:	782a      	ldrb	r2, [r5, #0]
 8005e48:	b392      	cbz	r2, 8005eb0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8005e4a:	42bc      	cmp	r4, r7
 8005e4c:	d22c      	bcs.n	8005ea8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8005e4e:	2a25      	cmp	r2, #37	; 0x25
 8005e50:	d107      	bne.n	8005e62 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8005e52:	786a      	ldrb	r2, [r5, #1]
 8005e54:	2a73      	cmp	r2, #115	; 0x73
 8005e56:	d009      	beq.n	8005e6c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8005e58:	2a7a      	cmp	r2, #122	; 0x7a
 8005e5a:	d012      	beq.n	8005e82 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 8005e5c:	2a25      	cmp	r2, #37	; 0x25
 8005e5e:	d100      	bne.n	8005e62 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8005e60:	3501      	adds	r5, #1
 8005e62:	782a      	ldrb	r2, [r5, #0]
 8005e64:	7022      	strb	r2, [r4, #0]
 8005e66:	3501      	adds	r5, #1
 8005e68:	3401      	adds	r4, #1
 8005e6a:	e7ec      	b.n	8005e46 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005e76:	b1a2      	cbz	r2, 8005ea2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8005e78:	42bc      	cmp	r4, r7
 8005e7a:	d015      	beq.n	8005ea8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8005e7c:	f804 2b01 	strb.w	r2, [r4], #1
 8005e80:	e7f7      	b.n	8005e72 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8005e82:	78aa      	ldrb	r2, [r5, #2]
 8005e84:	2a75      	cmp	r2, #117	; 0x75
 8005e86:	d1ec      	bne.n	8005e62 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	1b39      	subs	r1, r7, r4
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f103 0804 	add.w	r8, r3, #4
 8005e92:	f7ff ffa9 	bl	8005de8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	dd06      	ble.n	8005ea8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8005e9a:	4404      	add	r4, r0
 8005e9c:	3503      	adds	r5, #3
 8005e9e:	4643      	mov	r3, r8
 8005ea0:	e7d1      	b.n	8005e46 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005ea2:	3502      	adds	r5, #2
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	e7ce      	b.n	8005e46 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f7ff ff76 	bl	8005d9c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8005eb0:	7022      	strb	r2, [r4, #0]
 8005eb2:	1ba0      	subs	r0, r4, r6
 8005eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005eb8 <abort>:
 8005eb8:	b508      	push	{r3, lr}
 8005eba:	2006      	movs	r0, #6
 8005ebc:	f000 f94a 	bl	8006154 <raise>
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f7fb fc5f 	bl	8001784 <_exit>
	...

08005ec8 <__errno>:
 8005ec8:	4b01      	ldr	r3, [pc, #4]	; (8005ed0 <__errno+0x8>)
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000014 	.word	0x20000014

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4e0d      	ldr	r6, [pc, #52]	; (8005f0c <__libc_init_array+0x38>)
 8005ed8:	4c0d      	ldr	r4, [pc, #52]	; (8005f10 <__libc_init_array+0x3c>)
 8005eda:	1ba4      	subs	r4, r4, r6
 8005edc:	10a4      	asrs	r4, r4, #2
 8005ede:	2500      	movs	r5, #0
 8005ee0:	42a5      	cmp	r5, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	4e0b      	ldr	r6, [pc, #44]	; (8005f14 <__libc_init_array+0x40>)
 8005ee6:	4c0c      	ldr	r4, [pc, #48]	; (8005f18 <__libc_init_array+0x44>)
 8005ee8:	f000 fc94 	bl	8006814 <_init>
 8005eec:	1ba4      	subs	r4, r4, r6
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	42a5      	cmp	r5, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005efc:	4798      	blx	r3
 8005efe:	3501      	adds	r5, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f06:	4798      	blx	r3
 8005f08:	3501      	adds	r5, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	08006f08 	.word	0x08006f08
 8005f10:	08006f08 	.word	0x08006f08
 8005f14:	08006f08 	.word	0x08006f08
 8005f18:	08006f10 	.word	0x08006f10

08005f1c <malloc>:
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <malloc+0xc>)
 8005f1e:	4601      	mov	r1, r0
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	f000 b885 	b.w	8006030 <_malloc_r>
 8005f26:	bf00      	nop
 8005f28:	20000014 	.word	0x20000014

08005f2c <free>:
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <free+0xc>)
 8005f2e:	4601      	mov	r1, r0
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f000 b82f 	b.w	8005f94 <_free_r>
 8005f36:	bf00      	nop
 8005f38:	20000014 	.word	0x20000014

08005f3c <memcpy>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	1e43      	subs	r3, r0, #1
 8005f40:	440a      	add	r2, r1
 8005f42:	4291      	cmp	r1, r2
 8005f44:	d100      	bne.n	8005f48 <memcpy+0xc>
 8005f46:	bd10      	pop	{r4, pc}
 8005f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f50:	e7f7      	b.n	8005f42 <memcpy+0x6>

08005f52 <memmove>:
 8005f52:	4288      	cmp	r0, r1
 8005f54:	b510      	push	{r4, lr}
 8005f56:	eb01 0302 	add.w	r3, r1, r2
 8005f5a:	d807      	bhi.n	8005f6c <memmove+0x1a>
 8005f5c:	1e42      	subs	r2, r0, #1
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	d00a      	beq.n	8005f78 <memmove+0x26>
 8005f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f6a:	e7f8      	b.n	8005f5e <memmove+0xc>
 8005f6c:	4283      	cmp	r3, r0
 8005f6e:	d9f5      	bls.n	8005f5c <memmove+0xa>
 8005f70:	1881      	adds	r1, r0, r2
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	42d3      	cmn	r3, r2
 8005f76:	d100      	bne.n	8005f7a <memmove+0x28>
 8005f78:	bd10      	pop	{r4, pc}
 8005f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f82:	e7f7      	b.n	8005f74 <memmove+0x22>

08005f84 <memset>:
 8005f84:	4402      	add	r2, r0
 8005f86:	4603      	mov	r3, r0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d100      	bne.n	8005f8e <memset+0xa>
 8005f8c:	4770      	bx	lr
 8005f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f92:	e7f9      	b.n	8005f88 <memset+0x4>

08005f94 <_free_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4605      	mov	r5, r0
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d045      	beq.n	8006028 <_free_r+0x94>
 8005f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa0:	1f0c      	subs	r4, r1, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfb8      	it	lt
 8005fa6:	18e4      	addlt	r4, r4, r3
 8005fa8:	f000 f92a 	bl	8006200 <__malloc_lock>
 8005fac:	4a1f      	ldr	r2, [pc, #124]	; (800602c <_free_r+0x98>)
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	b933      	cbnz	r3, 8005fc2 <_free_r+0x2e>
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	6014      	str	r4, [r2, #0]
 8005fb8:	4628      	mov	r0, r5
 8005fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fbe:	f000 b920 	b.w	8006202 <__malloc_unlock>
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	d90c      	bls.n	8005fe0 <_free_r+0x4c>
 8005fc6:	6821      	ldr	r1, [r4, #0]
 8005fc8:	1862      	adds	r2, r4, r1
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	bf04      	itt	eq
 8005fce:	681a      	ldreq	r2, [r3, #0]
 8005fd0:	685b      	ldreq	r3, [r3, #4]
 8005fd2:	6063      	str	r3, [r4, #4]
 8005fd4:	bf04      	itt	eq
 8005fd6:	1852      	addeq	r2, r2, r1
 8005fd8:	6022      	streq	r2, [r4, #0]
 8005fda:	6004      	str	r4, [r0, #0]
 8005fdc:	e7ec      	b.n	8005fb8 <_free_r+0x24>
 8005fde:	4613      	mov	r3, r2
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	b10a      	cbz	r2, 8005fe8 <_free_r+0x54>
 8005fe4:	42a2      	cmp	r2, r4
 8005fe6:	d9fa      	bls.n	8005fde <_free_r+0x4a>
 8005fe8:	6819      	ldr	r1, [r3, #0]
 8005fea:	1858      	adds	r0, r3, r1
 8005fec:	42a0      	cmp	r0, r4
 8005fee:	d10b      	bne.n	8006008 <_free_r+0x74>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	4401      	add	r1, r0
 8005ff4:	1858      	adds	r0, r3, r1
 8005ff6:	4282      	cmp	r2, r0
 8005ff8:	6019      	str	r1, [r3, #0]
 8005ffa:	d1dd      	bne.n	8005fb8 <_free_r+0x24>
 8005ffc:	6810      	ldr	r0, [r2, #0]
 8005ffe:	6852      	ldr	r2, [r2, #4]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	4401      	add	r1, r0
 8006004:	6019      	str	r1, [r3, #0]
 8006006:	e7d7      	b.n	8005fb8 <_free_r+0x24>
 8006008:	d902      	bls.n	8006010 <_free_r+0x7c>
 800600a:	230c      	movs	r3, #12
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	e7d3      	b.n	8005fb8 <_free_r+0x24>
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	1821      	adds	r1, r4, r0
 8006014:	428a      	cmp	r2, r1
 8006016:	bf04      	itt	eq
 8006018:	6811      	ldreq	r1, [r2, #0]
 800601a:	6852      	ldreq	r2, [r2, #4]
 800601c:	6062      	str	r2, [r4, #4]
 800601e:	bf04      	itt	eq
 8006020:	1809      	addeq	r1, r1, r0
 8006022:	6021      	streq	r1, [r4, #0]
 8006024:	605c      	str	r4, [r3, #4]
 8006026:	e7c7      	b.n	8005fb8 <_free_r+0x24>
 8006028:	bd38      	pop	{r3, r4, r5, pc}
 800602a:	bf00      	nop
 800602c:	20002aa4 	.word	0x20002aa4

08006030 <_malloc_r>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	1ccd      	adds	r5, r1, #3
 8006034:	f025 0503 	bic.w	r5, r5, #3
 8006038:	3508      	adds	r5, #8
 800603a:	2d0c      	cmp	r5, #12
 800603c:	bf38      	it	cc
 800603e:	250c      	movcc	r5, #12
 8006040:	2d00      	cmp	r5, #0
 8006042:	4606      	mov	r6, r0
 8006044:	db01      	blt.n	800604a <_malloc_r+0x1a>
 8006046:	42a9      	cmp	r1, r5
 8006048:	d903      	bls.n	8006052 <_malloc_r+0x22>
 800604a:	230c      	movs	r3, #12
 800604c:	6033      	str	r3, [r6, #0]
 800604e:	2000      	movs	r0, #0
 8006050:	bd70      	pop	{r4, r5, r6, pc}
 8006052:	f000 f8d5 	bl	8006200 <__malloc_lock>
 8006056:	4a21      	ldr	r2, [pc, #132]	; (80060dc <_malloc_r+0xac>)
 8006058:	6814      	ldr	r4, [r2, #0]
 800605a:	4621      	mov	r1, r4
 800605c:	b991      	cbnz	r1, 8006084 <_malloc_r+0x54>
 800605e:	4c20      	ldr	r4, [pc, #128]	; (80060e0 <_malloc_r+0xb0>)
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	b91b      	cbnz	r3, 800606c <_malloc_r+0x3c>
 8006064:	4630      	mov	r0, r6
 8006066:	f000 f83d 	bl	80060e4 <_sbrk_r>
 800606a:	6020      	str	r0, [r4, #0]
 800606c:	4629      	mov	r1, r5
 800606e:	4630      	mov	r0, r6
 8006070:	f000 f838 	bl	80060e4 <_sbrk_r>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d124      	bne.n	80060c2 <_malloc_r+0x92>
 8006078:	230c      	movs	r3, #12
 800607a:	6033      	str	r3, [r6, #0]
 800607c:	4630      	mov	r0, r6
 800607e:	f000 f8c0 	bl	8006202 <__malloc_unlock>
 8006082:	e7e4      	b.n	800604e <_malloc_r+0x1e>
 8006084:	680b      	ldr	r3, [r1, #0]
 8006086:	1b5b      	subs	r3, r3, r5
 8006088:	d418      	bmi.n	80060bc <_malloc_r+0x8c>
 800608a:	2b0b      	cmp	r3, #11
 800608c:	d90f      	bls.n	80060ae <_malloc_r+0x7e>
 800608e:	600b      	str	r3, [r1, #0]
 8006090:	50cd      	str	r5, [r1, r3]
 8006092:	18cc      	adds	r4, r1, r3
 8006094:	4630      	mov	r0, r6
 8006096:	f000 f8b4 	bl	8006202 <__malloc_unlock>
 800609a:	f104 000b 	add.w	r0, r4, #11
 800609e:	1d23      	adds	r3, r4, #4
 80060a0:	f020 0007 	bic.w	r0, r0, #7
 80060a4:	1ac3      	subs	r3, r0, r3
 80060a6:	d0d3      	beq.n	8006050 <_malloc_r+0x20>
 80060a8:	425a      	negs	r2, r3
 80060aa:	50e2      	str	r2, [r4, r3]
 80060ac:	e7d0      	b.n	8006050 <_malloc_r+0x20>
 80060ae:	428c      	cmp	r4, r1
 80060b0:	684b      	ldr	r3, [r1, #4]
 80060b2:	bf16      	itet	ne
 80060b4:	6063      	strne	r3, [r4, #4]
 80060b6:	6013      	streq	r3, [r2, #0]
 80060b8:	460c      	movne	r4, r1
 80060ba:	e7eb      	b.n	8006094 <_malloc_r+0x64>
 80060bc:	460c      	mov	r4, r1
 80060be:	6849      	ldr	r1, [r1, #4]
 80060c0:	e7cc      	b.n	800605c <_malloc_r+0x2c>
 80060c2:	1cc4      	adds	r4, r0, #3
 80060c4:	f024 0403 	bic.w	r4, r4, #3
 80060c8:	42a0      	cmp	r0, r4
 80060ca:	d005      	beq.n	80060d8 <_malloc_r+0xa8>
 80060cc:	1a21      	subs	r1, r4, r0
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f808 	bl	80060e4 <_sbrk_r>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d0cf      	beq.n	8006078 <_malloc_r+0x48>
 80060d8:	6025      	str	r5, [r4, #0]
 80060da:	e7db      	b.n	8006094 <_malloc_r+0x64>
 80060dc:	20002aa4 	.word	0x20002aa4
 80060e0:	20002aa8 	.word	0x20002aa8

080060e4 <_sbrk_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4c06      	ldr	r4, [pc, #24]	; (8006100 <_sbrk_r+0x1c>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4605      	mov	r5, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	f7fb fb52 	bl	8001798 <_sbrk>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_sbrk_r+0x1a>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_sbrk_r+0x1a>
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20002ab0 	.word	0x20002ab0

08006104 <_raise_r>:
 8006104:	291f      	cmp	r1, #31
 8006106:	b538      	push	{r3, r4, r5, lr}
 8006108:	4604      	mov	r4, r0
 800610a:	460d      	mov	r5, r1
 800610c:	d904      	bls.n	8006118 <_raise_r+0x14>
 800610e:	2316      	movs	r3, #22
 8006110:	6003      	str	r3, [r0, #0]
 8006112:	f04f 30ff 	mov.w	r0, #4294967295
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800611a:	b112      	cbz	r2, 8006122 <_raise_r+0x1e>
 800611c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006120:	b94b      	cbnz	r3, 8006136 <_raise_r+0x32>
 8006122:	4620      	mov	r0, r4
 8006124:	f000 f830 	bl	8006188 <_getpid_r>
 8006128:	462a      	mov	r2, r5
 800612a:	4601      	mov	r1, r0
 800612c:	4620      	mov	r0, r4
 800612e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006132:	f000 b817 	b.w	8006164 <_kill_r>
 8006136:	2b01      	cmp	r3, #1
 8006138:	d00a      	beq.n	8006150 <_raise_r+0x4c>
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	d103      	bne.n	8006146 <_raise_r+0x42>
 800613e:	2316      	movs	r3, #22
 8006140:	6003      	str	r3, [r0, #0]
 8006142:	2001      	movs	r0, #1
 8006144:	e7e7      	b.n	8006116 <_raise_r+0x12>
 8006146:	2400      	movs	r4, #0
 8006148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800614c:	4628      	mov	r0, r5
 800614e:	4798      	blx	r3
 8006150:	2000      	movs	r0, #0
 8006152:	e7e0      	b.n	8006116 <_raise_r+0x12>

08006154 <raise>:
 8006154:	4b02      	ldr	r3, [pc, #8]	; (8006160 <raise+0xc>)
 8006156:	4601      	mov	r1, r0
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	f7ff bfd3 	b.w	8006104 <_raise_r>
 800615e:	bf00      	nop
 8006160:	20000014 	.word	0x20000014

08006164 <_kill_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4c07      	ldr	r4, [pc, #28]	; (8006184 <_kill_r+0x20>)
 8006168:	2300      	movs	r3, #0
 800616a:	4605      	mov	r5, r0
 800616c:	4608      	mov	r0, r1
 800616e:	4611      	mov	r1, r2
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	f7fb faf7 	bl	8001764 <_kill>
 8006176:	1c43      	adds	r3, r0, #1
 8006178:	d102      	bne.n	8006180 <_kill_r+0x1c>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	b103      	cbz	r3, 8006180 <_kill_r+0x1c>
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	bd38      	pop	{r3, r4, r5, pc}
 8006182:	bf00      	nop
 8006184:	20002ab0 	.word	0x20002ab0

08006188 <_getpid_r>:
 8006188:	f7fb bae4 	b.w	8001754 <_getpid>

0800618c <_vsniprintf_r>:
 800618c:	b530      	push	{r4, r5, lr}
 800618e:	1e14      	subs	r4, r2, #0
 8006190:	4605      	mov	r5, r0
 8006192:	b09b      	sub	sp, #108	; 0x6c
 8006194:	4618      	mov	r0, r3
 8006196:	da05      	bge.n	80061a4 <_vsniprintf_r+0x18>
 8006198:	238b      	movs	r3, #139	; 0x8b
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	b01b      	add	sp, #108	; 0x6c
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80061ac:	bf14      	ite	ne
 80061ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061b2:	4623      	moveq	r3, r4
 80061b4:	9302      	str	r3, [sp, #8]
 80061b6:	9305      	str	r3, [sp, #20]
 80061b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061bc:	9100      	str	r1, [sp, #0]
 80061be:	9104      	str	r1, [sp, #16]
 80061c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80061c4:	4602      	mov	r2, r0
 80061c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061c8:	4669      	mov	r1, sp
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 f874 	bl	80062b8 <_svfiprintf_r>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	bfbc      	itt	lt
 80061d4:	238b      	movlt	r3, #139	; 0x8b
 80061d6:	602b      	strlt	r3, [r5, #0]
 80061d8:	2c00      	cmp	r4, #0
 80061da:	d0e1      	beq.n	80061a0 <_vsniprintf_r+0x14>
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e7dd      	b.n	80061a0 <_vsniprintf_r+0x14>

080061e4 <vsniprintf>:
 80061e4:	b507      	push	{r0, r1, r2, lr}
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	460a      	mov	r2, r1
 80061ec:	4601      	mov	r1, r0
 80061ee:	4803      	ldr	r0, [pc, #12]	; (80061fc <vsniprintf+0x18>)
 80061f0:	6800      	ldr	r0, [r0, #0]
 80061f2:	f7ff ffcb 	bl	800618c <_vsniprintf_r>
 80061f6:	b003      	add	sp, #12
 80061f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80061fc:	20000014 	.word	0x20000014

08006200 <__malloc_lock>:
 8006200:	4770      	bx	lr

08006202 <__malloc_unlock>:
 8006202:	4770      	bx	lr

08006204 <__ssputs_r>:
 8006204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006208:	688e      	ldr	r6, [r1, #8]
 800620a:	429e      	cmp	r6, r3
 800620c:	4682      	mov	sl, r0
 800620e:	460c      	mov	r4, r1
 8006210:	4690      	mov	r8, r2
 8006212:	4699      	mov	r9, r3
 8006214:	d837      	bhi.n	8006286 <__ssputs_r+0x82>
 8006216:	898a      	ldrh	r2, [r1, #12]
 8006218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800621c:	d031      	beq.n	8006282 <__ssputs_r+0x7e>
 800621e:	6825      	ldr	r5, [r4, #0]
 8006220:	6909      	ldr	r1, [r1, #16]
 8006222:	1a6f      	subs	r7, r5, r1
 8006224:	6965      	ldr	r5, [r4, #20]
 8006226:	2302      	movs	r3, #2
 8006228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800622c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006230:	f109 0301 	add.w	r3, r9, #1
 8006234:	443b      	add	r3, r7
 8006236:	429d      	cmp	r5, r3
 8006238:	bf38      	it	cc
 800623a:	461d      	movcc	r5, r3
 800623c:	0553      	lsls	r3, r2, #21
 800623e:	d530      	bpl.n	80062a2 <__ssputs_r+0x9e>
 8006240:	4629      	mov	r1, r5
 8006242:	f7ff fef5 	bl	8006030 <_malloc_r>
 8006246:	4606      	mov	r6, r0
 8006248:	b950      	cbnz	r0, 8006260 <__ssputs_r+0x5c>
 800624a:	230c      	movs	r3, #12
 800624c:	f8ca 3000 	str.w	r3, [sl]
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	f04f 30ff 	mov.w	r0, #4294967295
 800625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006260:	463a      	mov	r2, r7
 8006262:	6921      	ldr	r1, [r4, #16]
 8006264:	f7ff fe6a 	bl	8005f3c <memcpy>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	6126      	str	r6, [r4, #16]
 8006276:	6165      	str	r5, [r4, #20]
 8006278:	443e      	add	r6, r7
 800627a:	1bed      	subs	r5, r5, r7
 800627c:	6026      	str	r6, [r4, #0]
 800627e:	60a5      	str	r5, [r4, #8]
 8006280:	464e      	mov	r6, r9
 8006282:	454e      	cmp	r6, r9
 8006284:	d900      	bls.n	8006288 <__ssputs_r+0x84>
 8006286:	464e      	mov	r6, r9
 8006288:	4632      	mov	r2, r6
 800628a:	4641      	mov	r1, r8
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	f7ff fe60 	bl	8005f52 <memmove>
 8006292:	68a3      	ldr	r3, [r4, #8]
 8006294:	1b9b      	subs	r3, r3, r6
 8006296:	60a3      	str	r3, [r4, #8]
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	441e      	add	r6, r3
 800629c:	6026      	str	r6, [r4, #0]
 800629e:	2000      	movs	r0, #0
 80062a0:	e7dc      	b.n	800625c <__ssputs_r+0x58>
 80062a2:	462a      	mov	r2, r5
 80062a4:	f000 fa88 	bl	80067b8 <_realloc_r>
 80062a8:	4606      	mov	r6, r0
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d1e2      	bne.n	8006274 <__ssputs_r+0x70>
 80062ae:	6921      	ldr	r1, [r4, #16]
 80062b0:	4650      	mov	r0, sl
 80062b2:	f7ff fe6f 	bl	8005f94 <_free_r>
 80062b6:	e7c8      	b.n	800624a <__ssputs_r+0x46>

080062b8 <_svfiprintf_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	461d      	mov	r5, r3
 80062be:	898b      	ldrh	r3, [r1, #12]
 80062c0:	061f      	lsls	r7, r3, #24
 80062c2:	b09d      	sub	sp, #116	; 0x74
 80062c4:	4680      	mov	r8, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	4616      	mov	r6, r2
 80062ca:	d50f      	bpl.n	80062ec <_svfiprintf_r+0x34>
 80062cc:	690b      	ldr	r3, [r1, #16]
 80062ce:	b96b      	cbnz	r3, 80062ec <_svfiprintf_r+0x34>
 80062d0:	2140      	movs	r1, #64	; 0x40
 80062d2:	f7ff fead 	bl	8006030 <_malloc_r>
 80062d6:	6020      	str	r0, [r4, #0]
 80062d8:	6120      	str	r0, [r4, #16]
 80062da:	b928      	cbnz	r0, 80062e8 <_svfiprintf_r+0x30>
 80062dc:	230c      	movs	r3, #12
 80062de:	f8c8 3000 	str.w	r3, [r8]
 80062e2:	f04f 30ff 	mov.w	r0, #4294967295
 80062e6:	e0c8      	b.n	800647a <_svfiprintf_r+0x1c2>
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	6163      	str	r3, [r4, #20]
 80062ec:	2300      	movs	r3, #0
 80062ee:	9309      	str	r3, [sp, #36]	; 0x24
 80062f0:	2320      	movs	r3, #32
 80062f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062f6:	2330      	movs	r3, #48	; 0x30
 80062f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062fc:	9503      	str	r5, [sp, #12]
 80062fe:	f04f 0b01 	mov.w	fp, #1
 8006302:	4637      	mov	r7, r6
 8006304:	463d      	mov	r5, r7
 8006306:	f815 3b01 	ldrb.w	r3, [r5], #1
 800630a:	b10b      	cbz	r3, 8006310 <_svfiprintf_r+0x58>
 800630c:	2b25      	cmp	r3, #37	; 0x25
 800630e:	d13e      	bne.n	800638e <_svfiprintf_r+0xd6>
 8006310:	ebb7 0a06 	subs.w	sl, r7, r6
 8006314:	d00b      	beq.n	800632e <_svfiprintf_r+0x76>
 8006316:	4653      	mov	r3, sl
 8006318:	4632      	mov	r2, r6
 800631a:	4621      	mov	r1, r4
 800631c:	4640      	mov	r0, r8
 800631e:	f7ff ff71 	bl	8006204 <__ssputs_r>
 8006322:	3001      	adds	r0, #1
 8006324:	f000 80a4 	beq.w	8006470 <_svfiprintf_r+0x1b8>
 8006328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632a:	4453      	add	r3, sl
 800632c:	9309      	str	r3, [sp, #36]	; 0x24
 800632e:	783b      	ldrb	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 809d 	beq.w	8006470 <_svfiprintf_r+0x1b8>
 8006336:	2300      	movs	r3, #0
 8006338:	f04f 32ff 	mov.w	r2, #4294967295
 800633c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006348:	931a      	str	r3, [sp, #104]	; 0x68
 800634a:	462f      	mov	r7, r5
 800634c:	2205      	movs	r2, #5
 800634e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006352:	4850      	ldr	r0, [pc, #320]	; (8006494 <_svfiprintf_r+0x1dc>)
 8006354:	f7f9 ff5c 	bl	8000210 <memchr>
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	b9d0      	cbnz	r0, 8006392 <_svfiprintf_r+0xda>
 800635c:	06d9      	lsls	r1, r3, #27
 800635e:	bf44      	itt	mi
 8006360:	2220      	movmi	r2, #32
 8006362:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006366:	071a      	lsls	r2, r3, #28
 8006368:	bf44      	itt	mi
 800636a:	222b      	movmi	r2, #43	; 0x2b
 800636c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006370:	782a      	ldrb	r2, [r5, #0]
 8006372:	2a2a      	cmp	r2, #42	; 0x2a
 8006374:	d015      	beq.n	80063a2 <_svfiprintf_r+0xea>
 8006376:	9a07      	ldr	r2, [sp, #28]
 8006378:	462f      	mov	r7, r5
 800637a:	2000      	movs	r0, #0
 800637c:	250a      	movs	r5, #10
 800637e:	4639      	mov	r1, r7
 8006380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006384:	3b30      	subs	r3, #48	; 0x30
 8006386:	2b09      	cmp	r3, #9
 8006388:	d94d      	bls.n	8006426 <_svfiprintf_r+0x16e>
 800638a:	b1b8      	cbz	r0, 80063bc <_svfiprintf_r+0x104>
 800638c:	e00f      	b.n	80063ae <_svfiprintf_r+0xf6>
 800638e:	462f      	mov	r7, r5
 8006390:	e7b8      	b.n	8006304 <_svfiprintf_r+0x4c>
 8006392:	4a40      	ldr	r2, [pc, #256]	; (8006494 <_svfiprintf_r+0x1dc>)
 8006394:	1a80      	subs	r0, r0, r2
 8006396:	fa0b f000 	lsl.w	r0, fp, r0
 800639a:	4318      	orrs	r0, r3
 800639c:	9004      	str	r0, [sp, #16]
 800639e:	463d      	mov	r5, r7
 80063a0:	e7d3      	b.n	800634a <_svfiprintf_r+0x92>
 80063a2:	9a03      	ldr	r2, [sp, #12]
 80063a4:	1d11      	adds	r1, r2, #4
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	9103      	str	r1, [sp, #12]
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	db01      	blt.n	80063b2 <_svfiprintf_r+0xfa>
 80063ae:	9207      	str	r2, [sp, #28]
 80063b0:	e004      	b.n	80063bc <_svfiprintf_r+0x104>
 80063b2:	4252      	negs	r2, r2
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	9207      	str	r2, [sp, #28]
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	783b      	ldrb	r3, [r7, #0]
 80063be:	2b2e      	cmp	r3, #46	; 0x2e
 80063c0:	d10c      	bne.n	80063dc <_svfiprintf_r+0x124>
 80063c2:	787b      	ldrb	r3, [r7, #1]
 80063c4:	2b2a      	cmp	r3, #42	; 0x2a
 80063c6:	d133      	bne.n	8006430 <_svfiprintf_r+0x178>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	9203      	str	r2, [sp, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bfb8      	it	lt
 80063d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80063d8:	3702      	adds	r7, #2
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	4d2e      	ldr	r5, [pc, #184]	; (8006498 <_svfiprintf_r+0x1e0>)
 80063de:	7839      	ldrb	r1, [r7, #0]
 80063e0:	2203      	movs	r2, #3
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7f9 ff14 	bl	8000210 <memchr>
 80063e8:	b138      	cbz	r0, 80063fa <_svfiprintf_r+0x142>
 80063ea:	2340      	movs	r3, #64	; 0x40
 80063ec:	1b40      	subs	r0, r0, r5
 80063ee:	fa03 f000 	lsl.w	r0, r3, r0
 80063f2:	9b04      	ldr	r3, [sp, #16]
 80063f4:	4303      	orrs	r3, r0
 80063f6:	3701      	adds	r7, #1
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	7839      	ldrb	r1, [r7, #0]
 80063fc:	4827      	ldr	r0, [pc, #156]	; (800649c <_svfiprintf_r+0x1e4>)
 80063fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006402:	2206      	movs	r2, #6
 8006404:	1c7e      	adds	r6, r7, #1
 8006406:	f7f9 ff03 	bl	8000210 <memchr>
 800640a:	2800      	cmp	r0, #0
 800640c:	d038      	beq.n	8006480 <_svfiprintf_r+0x1c8>
 800640e:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <_svfiprintf_r+0x1e8>)
 8006410:	bb13      	cbnz	r3, 8006458 <_svfiprintf_r+0x1a0>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	3307      	adds	r3, #7
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	3308      	adds	r3, #8
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	444b      	add	r3, r9
 8006422:	9309      	str	r3, [sp, #36]	; 0x24
 8006424:	e76d      	b.n	8006302 <_svfiprintf_r+0x4a>
 8006426:	fb05 3202 	mla	r2, r5, r2, r3
 800642a:	2001      	movs	r0, #1
 800642c:	460f      	mov	r7, r1
 800642e:	e7a6      	b.n	800637e <_svfiprintf_r+0xc6>
 8006430:	2300      	movs	r3, #0
 8006432:	3701      	adds	r7, #1
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	4619      	mov	r1, r3
 8006438:	250a      	movs	r5, #10
 800643a:	4638      	mov	r0, r7
 800643c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006440:	3a30      	subs	r2, #48	; 0x30
 8006442:	2a09      	cmp	r2, #9
 8006444:	d903      	bls.n	800644e <_svfiprintf_r+0x196>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0c8      	beq.n	80063dc <_svfiprintf_r+0x124>
 800644a:	9105      	str	r1, [sp, #20]
 800644c:	e7c6      	b.n	80063dc <_svfiprintf_r+0x124>
 800644e:	fb05 2101 	mla	r1, r5, r1, r2
 8006452:	2301      	movs	r3, #1
 8006454:	4607      	mov	r7, r0
 8006456:	e7f0      	b.n	800643a <_svfiprintf_r+0x182>
 8006458:	ab03      	add	r3, sp, #12
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	4622      	mov	r2, r4
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <_svfiprintf_r+0x1ec>)
 8006460:	a904      	add	r1, sp, #16
 8006462:	4640      	mov	r0, r8
 8006464:	f3af 8000 	nop.w
 8006468:	f1b0 3fff 	cmp.w	r0, #4294967295
 800646c:	4681      	mov	r9, r0
 800646e:	d1d6      	bne.n	800641e <_svfiprintf_r+0x166>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	065b      	lsls	r3, r3, #25
 8006474:	f53f af35 	bmi.w	80062e2 <_svfiprintf_r+0x2a>
 8006478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800647a:	b01d      	add	sp, #116	; 0x74
 800647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006480:	ab03      	add	r3, sp, #12
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	4622      	mov	r2, r4
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <_svfiprintf_r+0x1ec>)
 8006488:	a904      	add	r1, sp, #16
 800648a:	4640      	mov	r0, r8
 800648c:	f000 f882 	bl	8006594 <_printf_i>
 8006490:	e7ea      	b.n	8006468 <_svfiprintf_r+0x1b0>
 8006492:	bf00      	nop
 8006494:	08006ecc 	.word	0x08006ecc
 8006498:	08006ed2 	.word	0x08006ed2
 800649c:	08006ed6 	.word	0x08006ed6
 80064a0:	00000000 	.word	0x00000000
 80064a4:	08006205 	.word	0x08006205

080064a8 <_printf_common>:
 80064a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ac:	4691      	mov	r9, r2
 80064ae:	461f      	mov	r7, r3
 80064b0:	688a      	ldr	r2, [r1, #8]
 80064b2:	690b      	ldr	r3, [r1, #16]
 80064b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	bfb8      	it	lt
 80064bc:	4613      	movlt	r3, r2
 80064be:	f8c9 3000 	str.w	r3, [r9]
 80064c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064c6:	4606      	mov	r6, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	b112      	cbz	r2, 80064d2 <_printf_common+0x2a>
 80064cc:	3301      	adds	r3, #1
 80064ce:	f8c9 3000 	str.w	r3, [r9]
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	0699      	lsls	r1, r3, #26
 80064d6:	bf42      	ittt	mi
 80064d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064dc:	3302      	addmi	r3, #2
 80064de:	f8c9 3000 	strmi.w	r3, [r9]
 80064e2:	6825      	ldr	r5, [r4, #0]
 80064e4:	f015 0506 	ands.w	r5, r5, #6
 80064e8:	d107      	bne.n	80064fa <_printf_common+0x52>
 80064ea:	f104 0a19 	add.w	sl, r4, #25
 80064ee:	68e3      	ldr	r3, [r4, #12]
 80064f0:	f8d9 2000 	ldr.w	r2, [r9]
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	42ab      	cmp	r3, r5
 80064f8:	dc28      	bgt.n	800654c <_printf_common+0xa4>
 80064fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064fe:	6822      	ldr	r2, [r4, #0]
 8006500:	3300      	adds	r3, #0
 8006502:	bf18      	it	ne
 8006504:	2301      	movne	r3, #1
 8006506:	0692      	lsls	r2, r2, #26
 8006508:	d42d      	bmi.n	8006566 <_printf_common+0xbe>
 800650a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800650e:	4639      	mov	r1, r7
 8006510:	4630      	mov	r0, r6
 8006512:	47c0      	blx	r8
 8006514:	3001      	adds	r0, #1
 8006516:	d020      	beq.n	800655a <_printf_common+0xb2>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	68e5      	ldr	r5, [r4, #12]
 800651c:	f8d9 2000 	ldr.w	r2, [r9]
 8006520:	f003 0306 	and.w	r3, r3, #6
 8006524:	2b04      	cmp	r3, #4
 8006526:	bf08      	it	eq
 8006528:	1aad      	subeq	r5, r5, r2
 800652a:	68a3      	ldr	r3, [r4, #8]
 800652c:	6922      	ldr	r2, [r4, #16]
 800652e:	bf0c      	ite	eq
 8006530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006534:	2500      	movne	r5, #0
 8006536:	4293      	cmp	r3, r2
 8006538:	bfc4      	itt	gt
 800653a:	1a9b      	subgt	r3, r3, r2
 800653c:	18ed      	addgt	r5, r5, r3
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	341a      	adds	r4, #26
 8006544:	454d      	cmp	r5, r9
 8006546:	d11a      	bne.n	800657e <_printf_common+0xd6>
 8006548:	2000      	movs	r0, #0
 800654a:	e008      	b.n	800655e <_printf_common+0xb6>
 800654c:	2301      	movs	r3, #1
 800654e:	4652      	mov	r2, sl
 8006550:	4639      	mov	r1, r7
 8006552:	4630      	mov	r0, r6
 8006554:	47c0      	blx	r8
 8006556:	3001      	adds	r0, #1
 8006558:	d103      	bne.n	8006562 <_printf_common+0xba>
 800655a:	f04f 30ff 	mov.w	r0, #4294967295
 800655e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006562:	3501      	adds	r5, #1
 8006564:	e7c3      	b.n	80064ee <_printf_common+0x46>
 8006566:	18e1      	adds	r1, r4, r3
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	2030      	movs	r0, #48	; 0x30
 800656c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006570:	4422      	add	r2, r4
 8006572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006576:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800657a:	3302      	adds	r3, #2
 800657c:	e7c5      	b.n	800650a <_printf_common+0x62>
 800657e:	2301      	movs	r3, #1
 8006580:	4622      	mov	r2, r4
 8006582:	4639      	mov	r1, r7
 8006584:	4630      	mov	r0, r6
 8006586:	47c0      	blx	r8
 8006588:	3001      	adds	r0, #1
 800658a:	d0e6      	beq.n	800655a <_printf_common+0xb2>
 800658c:	f109 0901 	add.w	r9, r9, #1
 8006590:	e7d8      	b.n	8006544 <_printf_common+0x9c>
	...

08006594 <_printf_i>:
 8006594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006598:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800659c:	460c      	mov	r4, r1
 800659e:	7e09      	ldrb	r1, [r1, #24]
 80065a0:	b085      	sub	sp, #20
 80065a2:	296e      	cmp	r1, #110	; 0x6e
 80065a4:	4617      	mov	r7, r2
 80065a6:	4606      	mov	r6, r0
 80065a8:	4698      	mov	r8, r3
 80065aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ac:	f000 80b3 	beq.w	8006716 <_printf_i+0x182>
 80065b0:	d822      	bhi.n	80065f8 <_printf_i+0x64>
 80065b2:	2963      	cmp	r1, #99	; 0x63
 80065b4:	d036      	beq.n	8006624 <_printf_i+0x90>
 80065b6:	d80a      	bhi.n	80065ce <_printf_i+0x3a>
 80065b8:	2900      	cmp	r1, #0
 80065ba:	f000 80b9 	beq.w	8006730 <_printf_i+0x19c>
 80065be:	2958      	cmp	r1, #88	; 0x58
 80065c0:	f000 8083 	beq.w	80066ca <_printf_i+0x136>
 80065c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065cc:	e032      	b.n	8006634 <_printf_i+0xa0>
 80065ce:	2964      	cmp	r1, #100	; 0x64
 80065d0:	d001      	beq.n	80065d6 <_printf_i+0x42>
 80065d2:	2969      	cmp	r1, #105	; 0x69
 80065d4:	d1f6      	bne.n	80065c4 <_printf_i+0x30>
 80065d6:	6820      	ldr	r0, [r4, #0]
 80065d8:	6813      	ldr	r3, [r2, #0]
 80065da:	0605      	lsls	r5, r0, #24
 80065dc:	f103 0104 	add.w	r1, r3, #4
 80065e0:	d52a      	bpl.n	8006638 <_printf_i+0xa4>
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6011      	str	r1, [r2, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da03      	bge.n	80065f2 <_printf_i+0x5e>
 80065ea:	222d      	movs	r2, #45	; 0x2d
 80065ec:	425b      	negs	r3, r3
 80065ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065f2:	486f      	ldr	r0, [pc, #444]	; (80067b0 <_printf_i+0x21c>)
 80065f4:	220a      	movs	r2, #10
 80065f6:	e039      	b.n	800666c <_printf_i+0xd8>
 80065f8:	2973      	cmp	r1, #115	; 0x73
 80065fa:	f000 809d 	beq.w	8006738 <_printf_i+0x1a4>
 80065fe:	d808      	bhi.n	8006612 <_printf_i+0x7e>
 8006600:	296f      	cmp	r1, #111	; 0x6f
 8006602:	d020      	beq.n	8006646 <_printf_i+0xb2>
 8006604:	2970      	cmp	r1, #112	; 0x70
 8006606:	d1dd      	bne.n	80065c4 <_printf_i+0x30>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	f043 0320 	orr.w	r3, r3, #32
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	e003      	b.n	800661a <_printf_i+0x86>
 8006612:	2975      	cmp	r1, #117	; 0x75
 8006614:	d017      	beq.n	8006646 <_printf_i+0xb2>
 8006616:	2978      	cmp	r1, #120	; 0x78
 8006618:	d1d4      	bne.n	80065c4 <_printf_i+0x30>
 800661a:	2378      	movs	r3, #120	; 0x78
 800661c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006620:	4864      	ldr	r0, [pc, #400]	; (80067b4 <_printf_i+0x220>)
 8006622:	e055      	b.n	80066d0 <_printf_i+0x13c>
 8006624:	6813      	ldr	r3, [r2, #0]
 8006626:	1d19      	adds	r1, r3, #4
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6011      	str	r1, [r2, #0]
 800662c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006634:	2301      	movs	r3, #1
 8006636:	e08c      	b.n	8006752 <_printf_i+0x1be>
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6011      	str	r1, [r2, #0]
 800663c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006640:	bf18      	it	ne
 8006642:	b21b      	sxthne	r3, r3
 8006644:	e7cf      	b.n	80065e6 <_printf_i+0x52>
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	6825      	ldr	r5, [r4, #0]
 800664a:	1d18      	adds	r0, r3, #4
 800664c:	6010      	str	r0, [r2, #0]
 800664e:	0628      	lsls	r0, r5, #24
 8006650:	d501      	bpl.n	8006656 <_printf_i+0xc2>
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	e002      	b.n	800665c <_printf_i+0xc8>
 8006656:	0668      	lsls	r0, r5, #25
 8006658:	d5fb      	bpl.n	8006652 <_printf_i+0xbe>
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	4854      	ldr	r0, [pc, #336]	; (80067b0 <_printf_i+0x21c>)
 800665e:	296f      	cmp	r1, #111	; 0x6f
 8006660:	bf14      	ite	ne
 8006662:	220a      	movne	r2, #10
 8006664:	2208      	moveq	r2, #8
 8006666:	2100      	movs	r1, #0
 8006668:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800666c:	6865      	ldr	r5, [r4, #4]
 800666e:	60a5      	str	r5, [r4, #8]
 8006670:	2d00      	cmp	r5, #0
 8006672:	f2c0 8095 	blt.w	80067a0 <_printf_i+0x20c>
 8006676:	6821      	ldr	r1, [r4, #0]
 8006678:	f021 0104 	bic.w	r1, r1, #4
 800667c:	6021      	str	r1, [r4, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d13d      	bne.n	80066fe <_printf_i+0x16a>
 8006682:	2d00      	cmp	r5, #0
 8006684:	f040 808e 	bne.w	80067a4 <_printf_i+0x210>
 8006688:	4665      	mov	r5, ip
 800668a:	2a08      	cmp	r2, #8
 800668c:	d10b      	bne.n	80066a6 <_printf_i+0x112>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	07db      	lsls	r3, r3, #31
 8006692:	d508      	bpl.n	80066a6 <_printf_i+0x112>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	6862      	ldr	r2, [r4, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	bfde      	ittt	le
 800669c:	2330      	movle	r3, #48	; 0x30
 800669e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066a6:	ebac 0305 	sub.w	r3, ip, r5
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	f8cd 8000 	str.w	r8, [sp]
 80066b0:	463b      	mov	r3, r7
 80066b2:	aa03      	add	r2, sp, #12
 80066b4:	4621      	mov	r1, r4
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7ff fef6 	bl	80064a8 <_printf_common>
 80066bc:	3001      	adds	r0, #1
 80066be:	d14d      	bne.n	800675c <_printf_i+0x1c8>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	b005      	add	sp, #20
 80066c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ca:	4839      	ldr	r0, [pc, #228]	; (80067b0 <_printf_i+0x21c>)
 80066cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066d0:	6813      	ldr	r3, [r2, #0]
 80066d2:	6821      	ldr	r1, [r4, #0]
 80066d4:	1d1d      	adds	r5, r3, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6015      	str	r5, [r2, #0]
 80066da:	060a      	lsls	r2, r1, #24
 80066dc:	d50b      	bpl.n	80066f6 <_printf_i+0x162>
 80066de:	07ca      	lsls	r2, r1, #31
 80066e0:	bf44      	itt	mi
 80066e2:	f041 0120 	orrmi.w	r1, r1, #32
 80066e6:	6021      	strmi	r1, [r4, #0]
 80066e8:	b91b      	cbnz	r3, 80066f2 <_printf_i+0x15e>
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	f022 0220 	bic.w	r2, r2, #32
 80066f0:	6022      	str	r2, [r4, #0]
 80066f2:	2210      	movs	r2, #16
 80066f4:	e7b7      	b.n	8006666 <_printf_i+0xd2>
 80066f6:	064d      	lsls	r5, r1, #25
 80066f8:	bf48      	it	mi
 80066fa:	b29b      	uxthmi	r3, r3
 80066fc:	e7ef      	b.n	80066de <_printf_i+0x14a>
 80066fe:	4665      	mov	r5, ip
 8006700:	fbb3 f1f2 	udiv	r1, r3, r2
 8006704:	fb02 3311 	mls	r3, r2, r1, r3
 8006708:	5cc3      	ldrb	r3, [r0, r3]
 800670a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800670e:	460b      	mov	r3, r1
 8006710:	2900      	cmp	r1, #0
 8006712:	d1f5      	bne.n	8006700 <_printf_i+0x16c>
 8006714:	e7b9      	b.n	800668a <_printf_i+0xf6>
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	6825      	ldr	r5, [r4, #0]
 800671a:	6961      	ldr	r1, [r4, #20]
 800671c:	1d18      	adds	r0, r3, #4
 800671e:	6010      	str	r0, [r2, #0]
 8006720:	0628      	lsls	r0, r5, #24
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	d501      	bpl.n	800672a <_printf_i+0x196>
 8006726:	6019      	str	r1, [r3, #0]
 8006728:	e002      	b.n	8006730 <_printf_i+0x19c>
 800672a:	066a      	lsls	r2, r5, #25
 800672c:	d5fb      	bpl.n	8006726 <_printf_i+0x192>
 800672e:	8019      	strh	r1, [r3, #0]
 8006730:	2300      	movs	r3, #0
 8006732:	6123      	str	r3, [r4, #16]
 8006734:	4665      	mov	r5, ip
 8006736:	e7b9      	b.n	80066ac <_printf_i+0x118>
 8006738:	6813      	ldr	r3, [r2, #0]
 800673a:	1d19      	adds	r1, r3, #4
 800673c:	6011      	str	r1, [r2, #0]
 800673e:	681d      	ldr	r5, [r3, #0]
 8006740:	6862      	ldr	r2, [r4, #4]
 8006742:	2100      	movs	r1, #0
 8006744:	4628      	mov	r0, r5
 8006746:	f7f9 fd63 	bl	8000210 <memchr>
 800674a:	b108      	cbz	r0, 8006750 <_printf_i+0x1bc>
 800674c:	1b40      	subs	r0, r0, r5
 800674e:	6060      	str	r0, [r4, #4]
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	6123      	str	r3, [r4, #16]
 8006754:	2300      	movs	r3, #0
 8006756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675a:	e7a7      	b.n	80066ac <_printf_i+0x118>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	462a      	mov	r2, r5
 8006760:	4639      	mov	r1, r7
 8006762:	4630      	mov	r0, r6
 8006764:	47c0      	blx	r8
 8006766:	3001      	adds	r0, #1
 8006768:	d0aa      	beq.n	80066c0 <_printf_i+0x12c>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	079b      	lsls	r3, r3, #30
 800676e:	d413      	bmi.n	8006798 <_printf_i+0x204>
 8006770:	68e0      	ldr	r0, [r4, #12]
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	4298      	cmp	r0, r3
 8006776:	bfb8      	it	lt
 8006778:	4618      	movlt	r0, r3
 800677a:	e7a3      	b.n	80066c4 <_printf_i+0x130>
 800677c:	2301      	movs	r3, #1
 800677e:	464a      	mov	r2, r9
 8006780:	4639      	mov	r1, r7
 8006782:	4630      	mov	r0, r6
 8006784:	47c0      	blx	r8
 8006786:	3001      	adds	r0, #1
 8006788:	d09a      	beq.n	80066c0 <_printf_i+0x12c>
 800678a:	3501      	adds	r5, #1
 800678c:	68e3      	ldr	r3, [r4, #12]
 800678e:	9a03      	ldr	r2, [sp, #12]
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	42ab      	cmp	r3, r5
 8006794:	dcf2      	bgt.n	800677c <_printf_i+0x1e8>
 8006796:	e7eb      	b.n	8006770 <_printf_i+0x1dc>
 8006798:	2500      	movs	r5, #0
 800679a:	f104 0919 	add.w	r9, r4, #25
 800679e:	e7f5      	b.n	800678c <_printf_i+0x1f8>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1ac      	bne.n	80066fe <_printf_i+0x16a>
 80067a4:	7803      	ldrb	r3, [r0, #0]
 80067a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ae:	e76c      	b.n	800668a <_printf_i+0xf6>
 80067b0:	08006edd 	.word	0x08006edd
 80067b4:	08006eee 	.word	0x08006eee

080067b8 <_realloc_r>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	4607      	mov	r7, r0
 80067bc:	4614      	mov	r4, r2
 80067be:	460e      	mov	r6, r1
 80067c0:	b921      	cbnz	r1, 80067cc <_realloc_r+0x14>
 80067c2:	4611      	mov	r1, r2
 80067c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067c8:	f7ff bc32 	b.w	8006030 <_malloc_r>
 80067cc:	b922      	cbnz	r2, 80067d8 <_realloc_r+0x20>
 80067ce:	f7ff fbe1 	bl	8005f94 <_free_r>
 80067d2:	4625      	mov	r5, r4
 80067d4:	4628      	mov	r0, r5
 80067d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d8:	f000 f814 	bl	8006804 <_malloc_usable_size_r>
 80067dc:	42a0      	cmp	r0, r4
 80067de:	d20f      	bcs.n	8006800 <_realloc_r+0x48>
 80067e0:	4621      	mov	r1, r4
 80067e2:	4638      	mov	r0, r7
 80067e4:	f7ff fc24 	bl	8006030 <_malloc_r>
 80067e8:	4605      	mov	r5, r0
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d0f2      	beq.n	80067d4 <_realloc_r+0x1c>
 80067ee:	4631      	mov	r1, r6
 80067f0:	4622      	mov	r2, r4
 80067f2:	f7ff fba3 	bl	8005f3c <memcpy>
 80067f6:	4631      	mov	r1, r6
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff fbcb 	bl	8005f94 <_free_r>
 80067fe:	e7e9      	b.n	80067d4 <_realloc_r+0x1c>
 8006800:	4635      	mov	r5, r6
 8006802:	e7e7      	b.n	80067d4 <_realloc_r+0x1c>

08006804 <_malloc_usable_size_r>:
 8006804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006808:	1f18      	subs	r0, r3, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	bfbc      	itt	lt
 800680e:	580b      	ldrlt	r3, [r1, r0]
 8006810:	18c0      	addlt	r0, r0, r3
 8006812:	4770      	bx	lr

08006814 <_init>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	bf00      	nop
 8006818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681a:	bc08      	pop	{r3}
 800681c:	469e      	mov	lr, r3
 800681e:	4770      	bx	lr

08006820 <_fini>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr
